"""
Address is a 20 byte Ethereum address, represented as 0x-prefixed hexadecimal.
"""
scalar Address

"""BigInt is a large integer represented as a string."""
scalar BigInt

type BodyPart implements Node {
  id: ID!
  rle: String!
  sex: BodyPartSex!
  type: BodyPartType!
}

enum BodyPartSex {
  FEMALE
  MALE
}

enum BodyPartType {
  BEARD
  BODY
  HAIR
}

"""
BodyPartWhereInput is used for filtering BodyPart objects.
Input was generated by ent.
"""
input BodyPartWhereInput {
  and: [BodyPartWhereInput!]

  """hustler_beards edge predicates"""
  hasHustlerBeards: Boolean
  hasHustlerBeardsWith: [HustlerWhereInput!]

  """hustler_bodies edge predicates"""
  hasHustlerBodies: Boolean
  hasHustlerBodiesWith: [HustlerWhereInput!]

  """hustler_hairs edge predicates"""
  hasHustlerHairs: Boolean
  hasHustlerHairsWith: [HustlerWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: BodyPartWhereInput
  or: [BodyPartWhereInput!]

  """rle field predicates"""
  rle: String
  rleContains: String
  rleContainsFold: String
  rleEqualFold: String
  rleGT: String
  rleGTE: String
  rleHasPrefix: String
  rleHasSuffix: String
  rleIn: [String!]
  rleLT: String
  rleLTE: String
  rleNEQ: String
  rleNotIn: [String!]

  """sex field predicates"""
  sex: BodyPartSex
  sexIn: [BodyPartSex!]
  sexNEQ: BodyPartSex
  sexNotIn: [BodyPartSex!]

  """type field predicates"""
  type: BodyPartType
  typeIn: [BodyPartType!]
  typeNEQ: BodyPartType
  typeNotIn: [BodyPartType!]
}

"""
Bytes is an arbitrary length binary string, represented as 0x-prefixed hexadecimal.
An empty byte string is represented as '0x'. Byte strings must have an even number of hexadecimal nybbles.
"""
scalar Bytes

"""
Bytes32 is a 32 byte binary string, represented as 0x-prefixed hexadecimal.
"""
scalar Bytes32

""""""
scalar Cursor

type Dope implements Node {
  claimed: Boolean!
  id: ID!
  items: [Item!]!
  opened: Boolean!
}

type DopeConnection {
  edges: [DopeEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type DopeEdge {
  cursor: Cursor!
  node: Dope
}

input DopeOrder {
  direction: OrderDirection!
}

"""
DopeWhereInput is used for filtering Dope objects.
Input was generated by ent.
"""
input DopeWhereInput {
  and: [DopeWhereInput!]

  """claimed field predicates"""
  claimed: Boolean
  claimedNEQ: Boolean

  """items edge predicates"""
  hasItems: Boolean
  hasItemsWith: [ItemWhereInput!]

  """wallet edge predicates"""
  hasWallet: Boolean
  hasWalletWith: [WalletWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: DopeWhereInput

  """opened field predicates"""
  opened: Boolean
  openedNEQ: Boolean
  or: [DopeWhereInput!]

  """order field predicates"""
  order: Int
  orderGT: Int
  orderGTE: Int
  orderIn: [Int!]
  orderLT: Int
  orderLTE: Int
  orderNEQ: Int
  orderNotIn: [Int!]
}

"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
  and: [EventWhereInput!]

  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """index field predicates"""
  index: Long
  indexGT: Long
  indexGTE: Long
  indexIn: [Long!]
  indexLT: Long
  indexLTE: Long
  indexNEQ: Long
  indexNotIn: [Long!]
  not: EventWhereInput
  or: [EventWhereInput!]

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Hustler implements Node {
  accessory: Item
  age: Long!
  background: String
  beard: BodyPart
  body: BodyPart
  clothes: Item
  color: String
  drug: Item
  foot: Item
  hair: BodyPart
  hand: Item
  id: ID!
  name: String
  neck: Item
  order: [Int!]!
  ring: Item
  sex: HustlerSex!
  svg: String
  title: String
  type: HustlerType!
  vehicle: Item
  viewbox: [Int!]!
  waist: Item
  weapon: Item
}

type HustlerConnection {
  edges: [HustlerEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type HustlerEdge {
  cursor: Cursor!
  node: Hustler
}

input HustlerOrder {
  direction: OrderDirection!
}

enum HustlerSex {
  FEMALE
  MALE
}

enum HustlerType {
  ORIGINAL_GANGSTA
  REGULAR
}

"""
HustlerWhereInput is used for filtering Hustler objects.
Input was generated by ent.
"""
input HustlerWhereInput {
  """age field predicates"""
  age: Long
  ageGT: Long
  ageGTE: Long
  ageIn: [Long!]
  ageLT: Long
  ageLTE: Long
  ageNEQ: Long
  ageNotIn: [Long!]
  and: [HustlerWhereInput!]

  """background field predicates"""
  background: String
  backgroundContains: String
  backgroundContainsFold: String
  backgroundEqualFold: String
  backgroundGT: String
  backgroundGTE: String
  backgroundHasPrefix: String
  backgroundHasSuffix: String
  backgroundIn: [String!]
  backgroundIsNil: Boolean
  backgroundLT: String
  backgroundLTE: String
  backgroundNEQ: String
  backgroundNotIn: [String!]
  backgroundNotNil: Boolean

  """color field predicates"""
  color: String
  colorContains: String
  colorContainsFold: String
  colorEqualFold: String
  colorGT: String
  colorGTE: String
  colorHasPrefix: String
  colorHasSuffix: String
  colorIn: [String!]
  colorIsNil: Boolean
  colorLT: String
  colorLTE: String
  colorNEQ: String
  colorNotIn: [String!]
  colorNotNil: Boolean

  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """accessory edge predicates"""
  hasAccessory: Boolean
  hasAccessoryWith: [ItemWhereInput!]

  """beard edge predicates"""
  hasBeard: Boolean
  hasBeardWith: [BodyPartWhereInput!]

  """body edge predicates"""
  hasBody: Boolean
  hasBodyWith: [BodyPartWhereInput!]

  """clothes edge predicates"""
  hasClothes: Boolean
  hasClothesWith: [ItemWhereInput!]

  """drug edge predicates"""
  hasDrug: Boolean
  hasDrugWith: [ItemWhereInput!]

  """foot edge predicates"""
  hasFoot: Boolean
  hasFootWith: [ItemWhereInput!]

  """hair edge predicates"""
  hasHair: Boolean
  hasHairWith: [BodyPartWhereInput!]

  """hand edge predicates"""
  hasHand: Boolean
  hasHandWith: [ItemWhereInput!]

  """neck edge predicates"""
  hasNeck: Boolean
  hasNeckWith: [ItemWhereInput!]

  """ring edge predicates"""
  hasRing: Boolean
  hasRingWith: [ItemWhereInput!]

  """vehicle edge predicates"""
  hasVehicle: Boolean
  hasVehicleWith: [ItemWhereInput!]

  """waist edge predicates"""
  hasWaist: Boolean
  hasWaistWith: [ItemWhereInput!]

  """wallet edge predicates"""
  hasWallet: Boolean
  hasWalletWith: [WalletWhereInput!]

  """weapon edge predicates"""
  hasWeapon: Boolean
  hasWeaponWith: [ItemWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameIsNil: Boolean
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  nameNotNil: Boolean
  not: HustlerWhereInput
  or: [HustlerWhereInput!]

  """sex field predicates"""
  sex: HustlerSex
  sexIn: [HustlerSex!]
  sexNEQ: HustlerSex
  sexNotIn: [HustlerSex!]

  """svg field predicates"""
  svg: String
  svgContains: String
  svgContainsFold: String
  svgEqualFold: String
  svgGT: String
  svgGTE: String
  svgHasPrefix: String
  svgHasSuffix: String
  svgIn: [String!]
  svgIsNil: Boolean
  svgLT: String
  svgLTE: String
  svgNEQ: String
  svgNotIn: [String!]
  svgNotNil: Boolean

  """title field predicates"""
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleIsNil: Boolean
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]
  titleNotNil: Boolean

  """type field predicates"""
  type: HustlerType
  typeIn: [HustlerType!]
  typeNEQ: HustlerType
  typeNotIn: [HustlerType!]
}

type Item implements Node {
  augmented: Boolean
  id: ID!
  name: String!
  namePrefix: String
  nameSuffix: String
  suffix: String
  type: ItemType!
}

type ItemConnection {
  edges: [ItemEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ItemEdge {
  cursor: Cursor!
  node: Item
}

input ItemOrder {
  direction: OrderDirection!
}

"""ItemType represents the item slot the item belongs to."""
enum ItemType {
  ACCESSORY
  CLOTHES
  DRUGS
  FOOT
  HAND
  NECK
  RING
  VEHCILE
  WAIST
  WEAPON
}

"""
ItemWhereInput is used for filtering Item objects.
Input was generated by ent.
"""
input ItemWhereInput {
  and: [ItemWhereInput!]

  """augmented field predicates"""
  augmented: Boolean
  augmentedIsNil: Boolean
  augmentedNEQ: Boolean
  augmentedNotNil: Boolean

  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """base edge predicates"""
  hasBase: Boolean
  hasBaseWith: [ItemWhereInput!]

  """derivative edge predicates"""
  hasDerivative: Boolean
  hasDerivativeWith: [ItemWhereInput!]

  """dopes edge predicates"""
  hasDopes: Boolean
  hasDopesWith: [DopeWhereInput!]

  """hustler_accessories edge predicates"""
  hasHustlerAccessories: Boolean
  hasHustlerAccessoriesWith: [HustlerWhereInput!]

  """hustler_clothes edge predicates"""
  hasHustlerClothes: Boolean
  hasHustlerClothesWith: [HustlerWhereInput!]

  """hustler_drugs edge predicates"""
  hasHustlerDrugs: Boolean
  hasHustlerDrugsWith: [HustlerWhereInput!]

  """hustler_feet edge predicates"""
  hasHustlerFeet: Boolean
  hasHustlerFeetWith: [HustlerWhereInput!]

  """hustler_hands edge predicates"""
  hasHustlerHands: Boolean
  hasHustlerHandsWith: [HustlerWhereInput!]

  """hustler_necks edge predicates"""
  hasHustlerNecks: Boolean
  hasHustlerNecksWith: [HustlerWhereInput!]

  """hustler_rings edge predicates"""
  hasHustlerRings: Boolean
  hasHustlerRingsWith: [HustlerWhereInput!]

  """hustler_vehicles edge predicates"""
  hasHustlerVehicles: Boolean
  hasHustlerVehiclesWith: [HustlerWhereInput!]

  """hustler_waists edge predicates"""
  hasHustlerWaists: Boolean
  hasHustlerWaistsWith: [HustlerWhereInput!]

  """hustler_weapons edge predicates"""
  hasHustlerWeapons: Boolean
  hasHustlerWeaponsWith: [HustlerWhereInput!]

  """wallets edge predicates"""
  hasWallets: Boolean
  hasWalletsWith: [WalletItemsWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]

  """name_prefix field predicates"""
  namePrefix: String
  namePrefixContains: String
  namePrefixContainsFold: String
  namePrefixEqualFold: String
  namePrefixGT: String
  namePrefixGTE: String
  namePrefixHasPrefix: String
  namePrefixHasSuffix: String
  namePrefixIn: [String!]
  namePrefixIsNil: Boolean
  namePrefixLT: String
  namePrefixLTE: String
  namePrefixNEQ: String
  namePrefixNotIn: [String!]
  namePrefixNotNil: Boolean

  """name_suffix field predicates"""
  nameSuffix: String
  nameSuffixContains: String
  nameSuffixContainsFold: String
  nameSuffixEqualFold: String
  nameSuffixGT: String
  nameSuffixGTE: String
  nameSuffixHasPrefix: String
  nameSuffixHasSuffix: String
  nameSuffixIn: [String!]
  nameSuffixIsNil: Boolean
  nameSuffixLT: String
  nameSuffixLTE: String
  nameSuffixNEQ: String
  nameSuffixNotIn: [String!]
  nameSuffixNotNil: Boolean
  not: ItemWhereInput
  or: [ItemWhereInput!]

  """suffix field predicates"""
  suffix: String
  suffixContains: String
  suffixContainsFold: String
  suffixEqualFold: String
  suffixGT: String
  suffixGTE: String
  suffixHasPrefix: String
  suffixHasSuffix: String
  suffixIn: [String!]
  suffixIsNil: Boolean
  suffixLT: String
  suffixLTE: String
  suffixNEQ: String
  suffixNotIn: [String!]
  suffixNotNil: Boolean

  """svg field predicates"""
  svg: String
  svgContains: String
  svgContainsFold: String
  svgEqualFold: String
  svgGT: String
  svgGTE: String
  svgHasPrefix: String
  svgHasSuffix: String
  svgIn: [String!]
  svgIsNil: Boolean
  svgLT: String
  svgLTE: String
  svgNEQ: String
  svgNotIn: [String!]
  svgNotNil: Boolean

  """type field predicates"""
  type: ItemType
  typeIn: [ItemType!]
  typeNEQ: ItemType
  typeNotIn: [ItemType!]
}

"""Long is a 64 bit unsigned integer."""
scalar Long

interface Node {
  id: ID!
}

enum OrderDirection {
  ASC
  DESC
}

type PageInfo {
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
}

type Query {
  dopes(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: DopeOrder, where: DopeWhereInput): DopeConnection!
  hustlers(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: HustlerOrder, where: HustlerWhereInput): HustlerConnection!
  items(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: ItemOrder, where: ItemWhereInput): ItemConnection!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  wallets(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: WalletOrder, where: WalletWhereInput): WalletConnection!
}

"""
SyncStateWhereInput is used for filtering SyncState objects.
Input was generated by ent.
"""
input SyncStateWhereInput {
  and: [SyncStateWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: SyncStateWhereInput
  or: [SyncStateWhereInput!]

  """start_block field predicates"""
  startBlock: Long
  startBlockGT: Long
  startBlockGTE: Long
  startBlockIn: [Long!]
  startBlockLT: Long
  startBlockLTE: Long
  startBlockNEQ: Long
  startBlockNotIn: [Long!]
}

"""Maps a Time GraphQL scalar to a Go time.Time struct."""
scalar Time

"""Timestamp is a RFC3339 string."""
scalar Timestamp

type Wallet implements Node {
  dopes: [Dope!]!
  hustlers: [Hustler!]!
  id: ID!
  items: [WalletItems!]!
  paper: BigInt!
}

type WalletConnection {
  edges: [WalletEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type WalletEdge {
  cursor: Cursor!
  node: Wallet
}

type WalletItems implements Node {
  balance: BigInt!
  id: ID!
  item: Item!
  wallet: Wallet!
}

"""
WalletItemsWhereInput is used for filtering WalletItems objects.
Input was generated by ent.
"""
input WalletItemsWhereInput {
  and: [WalletItemsWhereInput!]

  """balance field predicates"""
  balance: BigInt
  balanceGT: BigInt
  balanceGTE: BigInt
  balanceIn: [BigInt!]
  balanceLT: BigInt
  balanceLTE: BigInt
  balanceNEQ: BigInt
  balanceNotIn: [BigInt!]

  """item edge predicates"""
  hasItem: Boolean
  hasItemWith: [ItemWhereInput!]

  """wallet edge predicates"""
  hasWallet: Boolean
  hasWalletWith: [WalletWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: WalletItemsWhereInput
  or: [WalletItemsWhereInput!]
}

input WalletOrder {
  direction: OrderDirection!
}

"""
WalletWhereInput is used for filtering Wallet objects.
Input was generated by ent.
"""
input WalletWhereInput {
  and: [WalletWhereInput!]

  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """dopes edge predicates"""
  hasDopes: Boolean
  hasDopesWith: [DopeWhereInput!]

  """hustlers edge predicates"""
  hasHustlers: Boolean
  hasHustlersWith: [HustlerWhereInput!]

  """items edge predicates"""
  hasItems: Boolean
  hasItemsWith: [WalletItemsWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: WalletWhereInput
  or: [WalletWhereInput!]

  """paper field predicates"""
  paper: BigInt
  paperGT: BigInt
  paperGTE: BigInt
  paperIn: [BigInt!]
  paperLT: BigInt
  paperLTE: BigInt
  paperNEQ: BigInt
  paperNotIn: [BigInt!]
}
