import { client, q } from '../src/fauna-client';
import { getRarityForDopeId } from '../src/dope-rarity-check';
import DopeJson from 'dope-metrics/output/loot.json';

// Returns data structures that should map to the GraphQL schema for DopeToken
// as defined in dope_token_schema.graphql
const buildTokenObjects = () => {
  console.log('Building token objects');
  const lootJsonEntries = Object.entries(DopeJson);
  const tokens = [];
  for (let i = 0; i < lootJsonEntries.length; i++) {
    const dopeAsset = lootJsonEntries[i][1];
    const tokenId = Object.keys(dopeAsset)[0];
    const itemValues = Object.values(dopeAsset)[0];
    // Merge items we have with smart defaults we can update later.
    // Default claimed / unbundled to worst possible status
    // and update from The Graph later.
    const tokenDocument = Object.assign(
      {
        token_id: tokenId,
        claimed: true,
        unbundled: true,
        rank: getRarityForDopeId(tokenId)
      }, 
      itemValues
    );
    // Adding tokenId to nested array allows us to use it as 
    // the Fauna "ref" instead of an autogenerated one they create.
    tokens.push([tokenId, tokenDocument]);
  }
  return tokens;
}

const populate = async(tokens: any[]) => {
  console.log(`Populating ${tokens.length} DOPE tokens`)
  await client.query(
    q.Map(
      tokens, 
      q.Lambda(
        ['token_id', 'data'], 
        q.Create(
          q.Ref(q.Collection('DopeToken'), q.Var('token_id')),
          { data: q.Var('data') }
        )
      )
    )
  );
  console.log('Done');
};

(async () => {
  try {
    const tokens = buildTokenObjects();
    await populate(tokens);
    process.exit(0);
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
})();
