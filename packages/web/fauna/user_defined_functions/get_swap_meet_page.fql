// Working version of example query
// q: String,
// hasUnclaimedPaper: Boolean,
// isForSale: Boolean,
// sortByIndexName: String

// Possibilities (no term = term under Ngram length also)
// - No term / no filter / sorted
// - No term / filter / sorted
// - Term / filter / sorted
// - Term / no filter /
{
  name: "get_swap_meet_page",
  role: null,
  body: Query(
    Lambda(
      [
        "q",
        "hasUnclaimedPaper",
        "isForSale",
        "hasItemsUnbundled",
        "size",
        "after",
        "before"
      ],
      Let(
        {
          with_a: If(
            IsNull(Var("q")),
            [],
            [Match(Index("dope_text_search"), Var("q"))]
          ),

          with_b: If(
            IsNull(Var("hasUnclaimedPaper")),
            Var("with_a"),
            Append(Var("with_a"), [
              Match(Index("paper_claimed"), Var("hasUnclaimedPaper"))
            ])
          ),
          with_c: If(
            IsNull(Var("hasItemsUnbundled")),
            Var("with_b"),
            Append(Var("with_b"), [
              Match(Index("items_unbundled"), Var("hasItemsUnbundled"))
            ])
          ),
          with_d: If(
            IsNull(Var("isForSale")),
            Var("with_c"),
            Append(Var("with_c"), [Match(Index("on_sale"), Var("isForSale"))])
          ),
          // match: Intersection(Var('with_c')),
          match: If(
            IsEmpty(Var("with_d")),
            Documents(Collection("DopeToken")), // simplify if no filters
            Intersection(Var("with_d"))
          ),

          // match: Union(
          //   Match(Index("paper_claimed"), true),
          //   Match(Index("paper_claimed"))
          // ),
          page: If(
            Equals(Var("before"), IsNull(Var("before"))),
            If(
              Equals(Var("after"), IsNull(Var("after"))),
              Paginate(Var("match"), { size: Var("size") }),
              Paginate(Var("match"), { after: Var("after"), size: Var("size") })
            ),
            Paginate(Var("match"), { before: Var("before"), size: Var("size") })
          )
        },
        // Paginate(Var('match'))
        Map(Var("page"), Lambda("ref", Get(Var("ref"))))
      )
    )
  )
}
