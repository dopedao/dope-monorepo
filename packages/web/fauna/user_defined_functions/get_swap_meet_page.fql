// q: String,
// hasUnclaimedPaper: Boolean,
// isForSale: Boolean,
// sortByIndexName: String

// Possibilities (no term = term under Ngram length also)
// - No term / no filter / sorted
// - No term / filter / sorted
// - Term / filter / sorted
// - Term / no filter /
Map(
  [['knife', 'paper_claimed', 'by_rank_with_ref']],
  Lambda(
    ['search_term', 'filter_index', 'sort_index'],
    Paginate(
      If(
        GTE(Length(Var('search_term')), 3),
        // Min search term length is 3â€¦
        // NGram the search term and provide matches that
        // are hits in all documents.
        Join(
          Intersection(
            Intersection(
              Map(
                Distinct(NGram(LowerCase(Var('search_term')),3,3)),
                Lambda(
                  'term',
                  Match(
                    Index('dope_text_search'),
                    Var('term')
                  )
                )
              ),
            ),
            // Bundled Items
            Match(Index(Var('filter_index')), true),
          ),
          Index(Var('sort_index'))
        ),
        // Search term too small, just filter and sort
        Join(
          Match(Index(Var('filter_index')), true),
          Index(Var('sort_index'))
        )
      ),
      { size: 25 }
    )
  )
)