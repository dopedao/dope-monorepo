// Code generated by github.com/withtally/synceth, DO NOT EDIT.

package bindings

import (
	"context"
	"fmt"
	"strings"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"

	"github.com/dopedao/dope-monorepo/packages/api/ent"
)

type HustlerProcessor interface {
	Setup(address common.Address, eth interface {
		ethereum.ChainReader
		ethereum.ChainStateReader
		ethereum.TransactionReader
		bind.ContractBackend
	}) error
	Initialize(ctx context.Context, start uint64, tx *ent.Tx) error

	ProcessAddRles(ctx context.Context, e *HustlerAddRles, tx *ent.Tx) error

	ProcessApprovalForAll(ctx context.Context, e *HustlerApprovalForAll, tx *ent.Tx) error

	ProcessMetadataUpdate(ctx context.Context, e *HustlerMetadataUpdate, tx *ent.Tx) error

	ProcessOwnershipTransferred(ctx context.Context, e *HustlerOwnershipTransferred, tx *ent.Tx) error

	ProcessTransferBatch(ctx context.Context, e *HustlerTransferBatch, tx *ent.Tx) error

	ProcessTransferSingle(ctx context.Context, e *HustlerTransferSingle, tx *ent.Tx) error

	ProcessURI(ctx context.Context, e *HustlerURI, tx *ent.Tx) error

	mustEmbedUnimplementedHustlerProcessor()
}

type UnimplementedHustlerProcessor struct {
	Address  common.Address
	ABI      abi.ABI
	Contract *Hustler
	Eth      interface {
		ethereum.ChainReader
		ethereum.ChainStateReader
		ethereum.TransactionReader
		bind.ContractBackend
	}
}

func (h *UnimplementedHustlerProcessor) Setup(address common.Address, eth interface {
	ethereum.ChainReader
	ethereum.ChainStateReader
	ethereum.TransactionReader
	bind.ContractBackend
}) error {
	contract, err := NewHustler(address, eth)
	if err != nil {
		return fmt.Errorf("new Hustler: %w", err)
	}

	abi, err := abi.JSON(strings.NewReader(string(HustlerABI)))
	if err != nil {
		return fmt.Errorf("parsing Hustler abi: %w", err)
	}

	h.Address = address
	h.ABI = abi
	h.Contract = contract
	h.Eth = eth
	return nil
}

func (h *UnimplementedHustlerProcessor) ProcessElement(p interface{}) func(context.Context, types.Log, *ent.Tx) error {
	return func(ctx context.Context, vLog types.Log, tx *ent.Tx) error {
		switch vLog.Topics[0].Hex() {

		case h.ABI.Events["AddRles"].ID.Hex():
			e := new(HustlerAddRles)
			if err := h.UnpackLog(e, "AddRles", vLog); err != nil {
				return fmt.Errorf("unpacking AddRles: %w", err)
			}

			e.Raw = vLog
			if err := p.(HustlerProcessor).ProcessAddRles(ctx, e, tx); err != nil {
				return fmt.Errorf("processing AddRles: %w", err)
			}

		case h.ABI.Events["ApprovalForAll"].ID.Hex():
			e := new(HustlerApprovalForAll)
			if err := h.UnpackLog(e, "ApprovalForAll", vLog); err != nil {
				return fmt.Errorf("unpacking ApprovalForAll: %w", err)
			}

			e.Raw = vLog
			if err := p.(HustlerProcessor).ProcessApprovalForAll(ctx, e, tx); err != nil {
				return fmt.Errorf("processing ApprovalForAll: %w", err)
			}

		case h.ABI.Events["MetadataUpdate"].ID.Hex():
			e := new(HustlerMetadataUpdate)
			if err := h.UnpackLog(e, "MetadataUpdate", vLog); err != nil {
				return fmt.Errorf("unpacking MetadataUpdate: %w", err)
			}

			e.Raw = vLog
			if err := p.(HustlerProcessor).ProcessMetadataUpdate(ctx, e, tx); err != nil {
				return fmt.Errorf("processing MetadataUpdate: %w", err)
			}

		case h.ABI.Events["OwnershipTransferred"].ID.Hex():
			e := new(HustlerOwnershipTransferred)
			if err := h.UnpackLog(e, "OwnershipTransferred", vLog); err != nil {
				return fmt.Errorf("unpacking OwnershipTransferred: %w", err)
			}

			e.Raw = vLog
			if err := p.(HustlerProcessor).ProcessOwnershipTransferred(ctx, e, tx); err != nil {
				return fmt.Errorf("processing OwnershipTransferred: %w", err)
			}

		case h.ABI.Events["TransferBatch"].ID.Hex():
			e := new(HustlerTransferBatch)
			if err := h.UnpackLog(e, "TransferBatch", vLog); err != nil {
				return fmt.Errorf("unpacking TransferBatch: %w", err)
			}

			e.Raw = vLog
			if err := p.(HustlerProcessor).ProcessTransferBatch(ctx, e, tx); err != nil {
				return fmt.Errorf("processing TransferBatch: %w", err)
			}

		case h.ABI.Events["TransferSingle"].ID.Hex():
			e := new(HustlerTransferSingle)
			if err := h.UnpackLog(e, "TransferSingle", vLog); err != nil {
				return fmt.Errorf("unpacking TransferSingle: %w", err)
			}

			e.Raw = vLog
			if err := p.(HustlerProcessor).ProcessTransferSingle(ctx, e, tx); err != nil {
				return fmt.Errorf("processing TransferSingle: %w", err)
			}

		case h.ABI.Events["URI"].ID.Hex():
			e := new(HustlerURI)
			if err := h.UnpackLog(e, "URI", vLog); err != nil {
				return fmt.Errorf("unpacking URI: %w", err)
			}

			e.Raw = vLog
			if err := p.(HustlerProcessor).ProcessURI(ctx, e, tx); err != nil {
				return fmt.Errorf("processing URI: %w", err)
			}

		}
		return nil
	}
}

func (h *UnimplementedHustlerProcessor) UnpackLog(out interface{}, event string, log types.Log) error {
	if len(log.Data) > 0 {
		if err := h.ABI.UnpackIntoInterface(out, event, log.Data); err != nil {
			return err
		}
	}
	var indexed abi.Arguments
	for _, arg := range h.ABI.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	return abi.ParseTopics(out, indexed, log.Topics[1:])
}

func (h *UnimplementedHustlerProcessor) Initialize(ctx context.Context, start uint64, tx *ent.Tx) error {
	return nil
}

func (h *UnimplementedHustlerProcessor) ProcessAddRles(ctx context.Context, e *HustlerAddRles, tx *ent.Tx) error {
	return nil
}

func (h *UnimplementedHustlerProcessor) ProcessApprovalForAll(ctx context.Context, e *HustlerApprovalForAll, tx *ent.Tx) error {
	return nil
}

func (h *UnimplementedHustlerProcessor) ProcessMetadataUpdate(ctx context.Context, e *HustlerMetadataUpdate, tx *ent.Tx) error {
	return nil
}

func (h *UnimplementedHustlerProcessor) ProcessOwnershipTransferred(ctx context.Context, e *HustlerOwnershipTransferred, tx *ent.Tx) error {
	return nil
}

func (h *UnimplementedHustlerProcessor) ProcessTransferBatch(ctx context.Context, e *HustlerTransferBatch, tx *ent.Tx) error {
	return nil
}

func (h *UnimplementedHustlerProcessor) ProcessTransferSingle(ctx context.Context, e *HustlerTransferSingle, tx *ent.Tx) error {
	return nil
}

func (h *UnimplementedHustlerProcessor) ProcessURI(ctx context.Context, e *HustlerURI, tx *ent.Tx) error {
	return nil
}

func (h *UnimplementedHustlerProcessor) mustEmbedUnimplementedHustlerProcessor() {}
