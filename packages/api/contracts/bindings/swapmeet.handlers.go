// Code generated by github.com/withtally/ethgen, DO NOT EDIT.

package bindings

import (
	"context"
	"fmt"
	"strings"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

type SwapMeetProcessor interface {
	Setup(address common.Address, eth interface {
		ethereum.ChainReader
		bind.ContractBackend
	}) error
	Initialize(ctx context.Context, start uint64, emit func(string, []interface{})) error

	ProcessApprovalForAll(ctx context.Context, e *SwapMeetApprovalForAll, emit func(string, []interface{})) error

	ProcessOwnershipTransferred(ctx context.Context, e *SwapMeetOwnershipTransferred, emit func(string, []interface{})) error

	ProcessSetRle(ctx context.Context, e *SwapMeetSetRle, emit func(string, []interface{})) error

	ProcessTransferBatch(ctx context.Context, e *SwapMeetTransferBatch, emit func(string, []interface{})) error

	ProcessTransferSingle(ctx context.Context, e *SwapMeetTransferSingle, emit func(string, []interface{})) error

	ProcessURI(ctx context.Context, e *SwapMeetURI, emit func(string, []interface{})) error

	mustEmbedUnimplementedSwapMeetProcessor()
}

type UnimplementedSwapMeetProcessor struct {
	Address  common.Address
	ABI      abi.ABI
	Contract *SwapMeet
	Eth      interface {
		ethereum.ChainReader
		bind.ContractBackend
	}
}

func (h *UnimplementedSwapMeetProcessor) Setup(address common.Address, eth interface {
	ethereum.ChainReader
	bind.ContractBackend
}) error {
	contract, err := NewSwapMeet(address, eth)
	if err != nil {
		return fmt.Errorf("new SwapMeet: %w", err)
	}

	abi, err := abi.JSON(strings.NewReader(string(SwapMeetABI)))
	if err != nil {
		return fmt.Errorf("parsing SwapMeet abi: %w", err)
	}

	h.Address = address
	h.ABI = abi
	h.Contract = contract
	h.Eth = eth
	return nil
}

func (h *UnimplementedSwapMeetProcessor) ProcessElement(p interface{}) func(context.Context, types.Log, func(string, []interface{})) error {
	return func(ctx context.Context, vLog types.Log, emit func(string, []interface{})) error {
		switch vLog.Topics[0].Hex() {

		case h.ABI.Events["ApprovalForAll"].ID.Hex():
			e := new(SwapMeetApprovalForAll)
			if err := h.UnpackLog(e, "ApprovalForAll", vLog); err != nil {
				return fmt.Errorf("unpacking ApprovalForAll: %w", err)
			}

			e.Raw = vLog
			if err := p.(SwapMeetProcessor).ProcessApprovalForAll(ctx, e, emit); err != nil {
				return fmt.Errorf("processing ApprovalForAll: %w", err)
			}

		case h.ABI.Events["OwnershipTransferred"].ID.Hex():
			e := new(SwapMeetOwnershipTransferred)
			if err := h.UnpackLog(e, "OwnershipTransferred", vLog); err != nil {
				return fmt.Errorf("unpacking OwnershipTransferred: %w", err)
			}

			e.Raw = vLog
			if err := p.(SwapMeetProcessor).ProcessOwnershipTransferred(ctx, e, emit); err != nil {
				return fmt.Errorf("processing OwnershipTransferred: %w", err)
			}

		case h.ABI.Events["SetRle"].ID.Hex():
			e := new(SwapMeetSetRle)
			if err := h.UnpackLog(e, "SetRle", vLog); err != nil {
				return fmt.Errorf("unpacking SetRle: %w", err)
			}

			e.Raw = vLog
			if err := p.(SwapMeetProcessor).ProcessSetRle(ctx, e, emit); err != nil {
				return fmt.Errorf("processing SetRle: %w", err)
			}

		case h.ABI.Events["TransferBatch"].ID.Hex():
			e := new(SwapMeetTransferBatch)
			if err := h.UnpackLog(e, "TransferBatch", vLog); err != nil {
				return fmt.Errorf("unpacking TransferBatch: %w", err)
			}

			e.Raw = vLog
			if err := p.(SwapMeetProcessor).ProcessTransferBatch(ctx, e, emit); err != nil {
				return fmt.Errorf("processing TransferBatch: %w", err)
			}

		case h.ABI.Events["TransferSingle"].ID.Hex():
			e := new(SwapMeetTransferSingle)
			if err := h.UnpackLog(e, "TransferSingle", vLog); err != nil {
				return fmt.Errorf("unpacking TransferSingle: %w", err)
			}

			e.Raw = vLog
			if err := p.(SwapMeetProcessor).ProcessTransferSingle(ctx, e, emit); err != nil {
				return fmt.Errorf("processing TransferSingle: %w", err)
			}

		case h.ABI.Events["URI"].ID.Hex():
			e := new(SwapMeetURI)
			if err := h.UnpackLog(e, "URI", vLog); err != nil {
				return fmt.Errorf("unpacking URI: %w", err)
			}

			e.Raw = vLog
			if err := p.(SwapMeetProcessor).ProcessURI(ctx, e, emit); err != nil {
				return fmt.Errorf("processing URI: %w", err)
			}

		}
		return nil
	}
}

func (h *UnimplementedSwapMeetProcessor) UnpackLog(out interface{}, event string, log types.Log) error {
	if len(log.Data) > 0 {
		if err := h.ABI.UnpackIntoInterface(out, event, log.Data); err != nil {
			return err
		}
	}
	var indexed abi.Arguments
	for _, arg := range h.ABI.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	return abi.ParseTopics(out, indexed, log.Topics[1:])
}

func (h *UnimplementedSwapMeetProcessor) Initialize(ctx context.Context, start uint64, emit func(string, []interface{})) error {
	return nil
}

func (h *UnimplementedSwapMeetProcessor) ProcessApprovalForAll(ctx context.Context, e *SwapMeetApprovalForAll, emit func(string, []interface{})) error {
	return nil
}

func (h *UnimplementedSwapMeetProcessor) ProcessOwnershipTransferred(ctx context.Context, e *SwapMeetOwnershipTransferred, emit func(string, []interface{})) error {
	return nil
}

func (h *UnimplementedSwapMeetProcessor) ProcessSetRle(ctx context.Context, e *SwapMeetSetRle, emit func(string, []interface{})) error {
	return nil
}

func (h *UnimplementedSwapMeetProcessor) ProcessTransferBatch(ctx context.Context, e *SwapMeetTransferBatch, emit func(string, []interface{})) error {
	return nil
}

func (h *UnimplementedSwapMeetProcessor) ProcessTransferSingle(ctx context.Context, e *SwapMeetTransferSingle, emit func(string, []interface{})) error {
	return nil
}

func (h *UnimplementedSwapMeetProcessor) ProcessURI(ctx context.Context, e *SwapMeetURI, emit func(string, []interface{})) error {
	return nil
}

func (h *UnimplementedSwapMeetProcessor) mustEmbedUnimplementedSwapMeetProcessor() {}
