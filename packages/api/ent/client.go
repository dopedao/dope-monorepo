// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/dopedao/dope-monorepo/packages/api/ent/migrate"

	"github.com/dopedao/dope-monorepo/packages/api/ent/amount"
	"github.com/dopedao/dope-monorepo/packages/api/ent/bodypart"
	"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/ent/event"
	"github.com/dopedao/dope-monorepo/packages/api/ent/gamehustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/ent/listing"
	"github.com/dopedao/dope-monorepo/packages/api/ent/search"
	"github.com/dopedao/dope-monorepo/packages/api/ent/syncstate"
	"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"
	"github.com/dopedao/dope-monorepo/packages/api/ent/walletitems"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Amount is the client for interacting with the Amount builders.
	Amount *AmountClient
	// BodyPart is the client for interacting with the BodyPart builders.
	BodyPart *BodyPartClient
	// Dope is the client for interacting with the Dope builders.
	Dope *DopeClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// GameHustler is the client for interacting with the GameHustler builders.
	GameHustler *GameHustlerClient
	// Hustler is the client for interacting with the Hustler builders.
	Hustler *HustlerClient
	// Item is the client for interacting with the Item builders.
	Item *ItemClient
	// Listing is the client for interacting with the Listing builders.
	Listing *ListingClient
	// Search is the client for interacting with the Search builders.
	Search *SearchClient
	// SyncState is the client for interacting with the SyncState builders.
	SyncState *SyncStateClient
	// Wallet is the client for interacting with the Wallet builders.
	Wallet *WalletClient
	// WalletItems is the client for interacting with the WalletItems builders.
	WalletItems *WalletItemsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Amount = NewAmountClient(c.config)
	c.BodyPart = NewBodyPartClient(c.config)
	c.Dope = NewDopeClient(c.config)
	c.Event = NewEventClient(c.config)
	c.GameHustler = NewGameHustlerClient(c.config)
	c.Hustler = NewHustlerClient(c.config)
	c.Item = NewItemClient(c.config)
	c.Listing = NewListingClient(c.config)
	c.Search = NewSearchClient(c.config)
	c.SyncState = NewSyncStateClient(c.config)
	c.Wallet = NewWalletClient(c.config)
	c.WalletItems = NewWalletItemsClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Amount:      NewAmountClient(cfg),
		BodyPart:    NewBodyPartClient(cfg),
		Dope:        NewDopeClient(cfg),
		Event:       NewEventClient(cfg),
		GameHustler: NewGameHustlerClient(cfg),
		Hustler:     NewHustlerClient(cfg),
		Item:        NewItemClient(cfg),
		Listing:     NewListingClient(cfg),
		Search:      NewSearchClient(cfg),
		SyncState:   NewSyncStateClient(cfg),
		Wallet:      NewWalletClient(cfg),
		WalletItems: NewWalletItemsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:      cfg,
		Amount:      NewAmountClient(cfg),
		BodyPart:    NewBodyPartClient(cfg),
		Dope:        NewDopeClient(cfg),
		Event:       NewEventClient(cfg),
		GameHustler: NewGameHustlerClient(cfg),
		Hustler:     NewHustlerClient(cfg),
		Item:        NewItemClient(cfg),
		Listing:     NewListingClient(cfg),
		Search:      NewSearchClient(cfg),
		SyncState:   NewSyncStateClient(cfg),
		Wallet:      NewWalletClient(cfg),
		WalletItems: NewWalletItemsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Amount.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Amount.Use(hooks...)
	c.BodyPart.Use(hooks...)
	c.Dope.Use(hooks...)
	c.Event.Use(hooks...)
	c.GameHustler.Use(hooks...)
	c.Hustler.Use(hooks...)
	c.Item.Use(hooks...)
	c.Listing.Use(hooks...)
	c.Search.Use(hooks...)
	c.SyncState.Use(hooks...)
	c.Wallet.Use(hooks...)
	c.WalletItems.Use(hooks...)
}

// AmountClient is a client for the Amount schema.
type AmountClient struct {
	config
}

// NewAmountClient returns a client for the Amount from the given config.
func NewAmountClient(c config) *AmountClient {
	return &AmountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `amount.Hooks(f(g(h())))`.
func (c *AmountClient) Use(hooks ...Hook) {
	c.hooks.Amount = append(c.hooks.Amount, hooks...)
}

// Create returns a create builder for Amount.
func (c *AmountClient) Create() *AmountCreate {
	mutation := newAmountMutation(c.config, OpCreate)
	return &AmountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Amount entities.
func (c *AmountClient) CreateBulk(builders ...*AmountCreate) *AmountCreateBulk {
	return &AmountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Amount.
func (c *AmountClient) Update() *AmountUpdate {
	mutation := newAmountMutation(c.config, OpUpdate)
	return &AmountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AmountClient) UpdateOne(a *Amount) *AmountUpdateOne {
	mutation := newAmountMutation(c.config, OpUpdateOne, withAmount(a))
	return &AmountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AmountClient) UpdateOneID(id string) *AmountUpdateOne {
	mutation := newAmountMutation(c.config, OpUpdateOne, withAmountID(id))
	return &AmountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Amount.
func (c *AmountClient) Delete() *AmountDelete {
	mutation := newAmountMutation(c.config, OpDelete)
	return &AmountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AmountClient) DeleteOne(a *Amount) *AmountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AmountClient) DeleteOneID(id string) *AmountDeleteOne {
	builder := c.Delete().Where(amount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AmountDeleteOne{builder}
}

// Query returns a query builder for Amount.
func (c *AmountClient) Query() *AmountQuery {
	return &AmountQuery{
		config: c.config,
	}
}

// Get returns a Amount entity by its id.
func (c *AmountClient) Get(ctx context.Context, id string) (*Amount, error) {
	return c.Query().Where(amount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AmountClient) GetX(ctx context.Context, id string) *Amount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryListingInput queries the listing_input edge of a Amount.
func (c *AmountClient) QueryListingInput(a *Amount) *ListingQuery {
	query := &ListingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(amount.Table, amount.FieldID, id),
			sqlgraph.To(listing.Table, listing.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, amount.ListingInputTable, amount.ListingInputColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryListingOutput queries the listing_output edge of a Amount.
func (c *AmountClient) QueryListingOutput(a *Amount) *ListingQuery {
	query := &ListingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(amount.Table, amount.FieldID, id),
			sqlgraph.To(listing.Table, listing.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, amount.ListingOutputTable, amount.ListingOutputColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AmountClient) Hooks() []Hook {
	return c.hooks.Amount
}

// BodyPartClient is a client for the BodyPart schema.
type BodyPartClient struct {
	config
}

// NewBodyPartClient returns a client for the BodyPart from the given config.
func NewBodyPartClient(c config) *BodyPartClient {
	return &BodyPartClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bodypart.Hooks(f(g(h())))`.
func (c *BodyPartClient) Use(hooks ...Hook) {
	c.hooks.BodyPart = append(c.hooks.BodyPart, hooks...)
}

// Create returns a create builder for BodyPart.
func (c *BodyPartClient) Create() *BodyPartCreate {
	mutation := newBodyPartMutation(c.config, OpCreate)
	return &BodyPartCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BodyPart entities.
func (c *BodyPartClient) CreateBulk(builders ...*BodyPartCreate) *BodyPartCreateBulk {
	return &BodyPartCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BodyPart.
func (c *BodyPartClient) Update() *BodyPartUpdate {
	mutation := newBodyPartMutation(c.config, OpUpdate)
	return &BodyPartUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BodyPartClient) UpdateOne(bp *BodyPart) *BodyPartUpdateOne {
	mutation := newBodyPartMutation(c.config, OpUpdateOne, withBodyPart(bp))
	return &BodyPartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BodyPartClient) UpdateOneID(id string) *BodyPartUpdateOne {
	mutation := newBodyPartMutation(c.config, OpUpdateOne, withBodyPartID(id))
	return &BodyPartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BodyPart.
func (c *BodyPartClient) Delete() *BodyPartDelete {
	mutation := newBodyPartMutation(c.config, OpDelete)
	return &BodyPartDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BodyPartClient) DeleteOne(bp *BodyPart) *BodyPartDeleteOne {
	return c.DeleteOneID(bp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BodyPartClient) DeleteOneID(id string) *BodyPartDeleteOne {
	builder := c.Delete().Where(bodypart.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BodyPartDeleteOne{builder}
}

// Query returns a query builder for BodyPart.
func (c *BodyPartClient) Query() *BodyPartQuery {
	return &BodyPartQuery{
		config: c.config,
	}
}

// Get returns a BodyPart entity by its id.
func (c *BodyPartClient) Get(ctx context.Context, id string) (*BodyPart, error) {
	return c.Query().Where(bodypart.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BodyPartClient) GetX(ctx context.Context, id string) *BodyPart {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHustlerBodies queries the hustler_bodies edge of a BodyPart.
func (c *BodyPartClient) QueryHustlerBodies(bp *BodyPart) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bodypart.Table, bodypart.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bodypart.HustlerBodiesTable, bodypart.HustlerBodiesColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerHairs queries the hustler_hairs edge of a BodyPart.
func (c *BodyPartClient) QueryHustlerHairs(bp *BodyPart) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bodypart.Table, bodypart.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bodypart.HustlerHairsTable, bodypart.HustlerHairsColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerBeards queries the hustler_beards edge of a BodyPart.
func (c *BodyPartClient) QueryHustlerBeards(bp *BodyPart) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bodypart.Table, bodypart.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bodypart.HustlerBeardsTable, bodypart.HustlerBeardsColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BodyPartClient) Hooks() []Hook {
	return c.hooks.BodyPart
}

// DopeClient is a client for the Dope schema.
type DopeClient struct {
	config
}

// NewDopeClient returns a client for the Dope from the given config.
func NewDopeClient(c config) *DopeClient {
	return &DopeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dope.Hooks(f(g(h())))`.
func (c *DopeClient) Use(hooks ...Hook) {
	c.hooks.Dope = append(c.hooks.Dope, hooks...)
}

// Create returns a create builder for Dope.
func (c *DopeClient) Create() *DopeCreate {
	mutation := newDopeMutation(c.config, OpCreate)
	return &DopeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Dope entities.
func (c *DopeClient) CreateBulk(builders ...*DopeCreate) *DopeCreateBulk {
	return &DopeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dope.
func (c *DopeClient) Update() *DopeUpdate {
	mutation := newDopeMutation(c.config, OpUpdate)
	return &DopeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DopeClient) UpdateOne(d *Dope) *DopeUpdateOne {
	mutation := newDopeMutation(c.config, OpUpdateOne, withDope(d))
	return &DopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DopeClient) UpdateOneID(id string) *DopeUpdateOne {
	mutation := newDopeMutation(c.config, OpUpdateOne, withDopeID(id))
	return &DopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dope.
func (c *DopeClient) Delete() *DopeDelete {
	mutation := newDopeMutation(c.config, OpDelete)
	return &DopeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DopeClient) DeleteOne(d *Dope) *DopeDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DopeClient) DeleteOneID(id string) *DopeDeleteOne {
	builder := c.Delete().Where(dope.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DopeDeleteOne{builder}
}

// Query returns a query builder for Dope.
func (c *DopeClient) Query() *DopeQuery {
	return &DopeQuery{
		config: c.config,
	}
}

// Get returns a Dope entity by its id.
func (c *DopeClient) Get(ctx context.Context, id string) (*Dope, error) {
	return c.Query().Where(dope.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DopeClient) GetX(ctx context.Context, id string) *Dope {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWallet queries the wallet edge of a Dope.
func (c *DopeClient) QueryWallet(d *Dope) *WalletQuery {
	query := &WalletQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dope.Table, dope.FieldID, id),
			sqlgraph.To(wallet.Table, wallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dope.WalletTable, dope.WalletColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLastSale queries the last_sale edge of a Dope.
func (c *DopeClient) QueryLastSale(d *Dope) *ListingQuery {
	query := &ListingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dope.Table, dope.FieldID, id),
			sqlgraph.To(listing.Table, listing.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, dope.LastSaleTable, dope.LastSaleColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryListings queries the listings edge of a Dope.
func (c *DopeClient) QueryListings(d *Dope) *ListingQuery {
	query := &ListingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dope.Table, dope.FieldID, id),
			sqlgraph.To(listing.Table, listing.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dope.ListingsTable, dope.ListingsColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItems queries the items edge of a Dope.
func (c *DopeClient) QueryItems(d *Dope) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dope.Table, dope.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, dope.ItemsTable, dope.ItemsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIndex queries the index edge of a Dope.
func (c *DopeClient) QueryIndex(d *Dope) *SearchQuery {
	query := &SearchQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dope.Table, dope.FieldID, id),
			sqlgraph.To(search.Table, search.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, dope.IndexTable, dope.IndexColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DopeClient) Hooks() []Hook {
	return c.hooks.Dope
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Create returns a create builder for Event.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id string) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EventClient) DeleteOneID(id string) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id string) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id string) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}

// GameHustlerClient is a client for the GameHustler schema.
type GameHustlerClient struct {
	config
}

// NewGameHustlerClient returns a client for the GameHustler from the given config.
func NewGameHustlerClient(c config) *GameHustlerClient {
	return &GameHustlerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gamehustler.Hooks(f(g(h())))`.
func (c *GameHustlerClient) Use(hooks ...Hook) {
	c.hooks.GameHustler = append(c.hooks.GameHustler, hooks...)
}

// Create returns a create builder for GameHustler.
func (c *GameHustlerClient) Create() *GameHustlerCreate {
	mutation := newGameHustlerMutation(c.config, OpCreate)
	return &GameHustlerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GameHustler entities.
func (c *GameHustlerClient) CreateBulk(builders ...*GameHustlerCreate) *GameHustlerCreateBulk {
	return &GameHustlerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GameHustler.
func (c *GameHustlerClient) Update() *GameHustlerUpdate {
	mutation := newGameHustlerMutation(c.config, OpUpdate)
	return &GameHustlerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameHustlerClient) UpdateOne(gh *GameHustler) *GameHustlerUpdateOne {
	mutation := newGameHustlerMutation(c.config, OpUpdateOne, withGameHustler(gh))
	return &GameHustlerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameHustlerClient) UpdateOneID(id string) *GameHustlerUpdateOne {
	mutation := newGameHustlerMutation(c.config, OpUpdateOne, withGameHustlerID(id))
	return &GameHustlerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GameHustler.
func (c *GameHustlerClient) Delete() *GameHustlerDelete {
	mutation := newGameHustlerMutation(c.config, OpDelete)
	return &GameHustlerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GameHustlerClient) DeleteOne(gh *GameHustler) *GameHustlerDeleteOne {
	return c.DeleteOneID(gh.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GameHustlerClient) DeleteOneID(id string) *GameHustlerDeleteOne {
	builder := c.Delete().Where(gamehustler.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameHustlerDeleteOne{builder}
}

// Query returns a query builder for GameHustler.
func (c *GameHustlerClient) Query() *GameHustlerQuery {
	return &GameHustlerQuery{
		config: c.config,
	}
}

// Get returns a GameHustler entity by its id.
func (c *GameHustlerClient) Get(ctx context.Context, id string) (*GameHustler, error) {
	return c.Query().Where(gamehustler.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameHustlerClient) GetX(ctx context.Context, id string) *GameHustler {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GameHustlerClient) Hooks() []Hook {
	return c.hooks.GameHustler
}

// HustlerClient is a client for the Hustler schema.
type HustlerClient struct {
	config
}

// NewHustlerClient returns a client for the Hustler from the given config.
func NewHustlerClient(c config) *HustlerClient {
	return &HustlerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hustler.Hooks(f(g(h())))`.
func (c *HustlerClient) Use(hooks ...Hook) {
	c.hooks.Hustler = append(c.hooks.Hustler, hooks...)
}

// Create returns a create builder for Hustler.
func (c *HustlerClient) Create() *HustlerCreate {
	mutation := newHustlerMutation(c.config, OpCreate)
	return &HustlerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Hustler entities.
func (c *HustlerClient) CreateBulk(builders ...*HustlerCreate) *HustlerCreateBulk {
	return &HustlerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Hustler.
func (c *HustlerClient) Update() *HustlerUpdate {
	mutation := newHustlerMutation(c.config, OpUpdate)
	return &HustlerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HustlerClient) UpdateOne(h *Hustler) *HustlerUpdateOne {
	mutation := newHustlerMutation(c.config, OpUpdateOne, withHustler(h))
	return &HustlerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HustlerClient) UpdateOneID(id string) *HustlerUpdateOne {
	mutation := newHustlerMutation(c.config, OpUpdateOne, withHustlerID(id))
	return &HustlerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Hustler.
func (c *HustlerClient) Delete() *HustlerDelete {
	mutation := newHustlerMutation(c.config, OpDelete)
	return &HustlerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HustlerClient) DeleteOne(h *Hustler) *HustlerDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HustlerClient) DeleteOneID(id string) *HustlerDeleteOne {
	builder := c.Delete().Where(hustler.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HustlerDeleteOne{builder}
}

// Query returns a query builder for Hustler.
func (c *HustlerClient) Query() *HustlerQuery {
	return &HustlerQuery{
		config: c.config,
	}
}

// Get returns a Hustler entity by its id.
func (c *HustlerClient) Get(ctx context.Context, id string) (*Hustler, error) {
	return c.Query().Where(hustler.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HustlerClient) GetX(ctx context.Context, id string) *Hustler {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWallet queries the wallet edge of a Hustler.
func (c *HustlerClient) QueryWallet(h *Hustler) *WalletQuery {
	query := &WalletQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(wallet.Table, wallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.WalletTable, hustler.WalletColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWeapon queries the weapon edge of a Hustler.
func (c *HustlerClient) QueryWeapon(h *Hustler) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.WeaponTable, hustler.WeaponColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClothes queries the clothes edge of a Hustler.
func (c *HustlerClient) QueryClothes(h *Hustler) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.ClothesTable, hustler.ClothesColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehicle queries the vehicle edge of a Hustler.
func (c *HustlerClient) QueryVehicle(h *Hustler) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.VehicleTable, hustler.VehicleColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWaist queries the waist edge of a Hustler.
func (c *HustlerClient) QueryWaist(h *Hustler) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.WaistTable, hustler.WaistColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFoot queries the foot edge of a Hustler.
func (c *HustlerClient) QueryFoot(h *Hustler) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.FootTable, hustler.FootColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHand queries the hand edge of a Hustler.
func (c *HustlerClient) QueryHand(h *Hustler) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.HandTable, hustler.HandColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDrug queries the drug edge of a Hustler.
func (c *HustlerClient) QueryDrug(h *Hustler) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.DrugTable, hustler.DrugColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNeck queries the neck edge of a Hustler.
func (c *HustlerClient) QueryNeck(h *Hustler) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.NeckTable, hustler.NeckColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRing queries the ring edge of a Hustler.
func (c *HustlerClient) QueryRing(h *Hustler) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.RingTable, hustler.RingColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccessory queries the accessory edge of a Hustler.
func (c *HustlerClient) QueryAccessory(h *Hustler) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.AccessoryTable, hustler.AccessoryColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBody queries the body edge of a Hustler.
func (c *HustlerClient) QueryBody(h *Hustler) *BodyPartQuery {
	query := &BodyPartQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(bodypart.Table, bodypart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.BodyTable, hustler.BodyColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHair queries the hair edge of a Hustler.
func (c *HustlerClient) QueryHair(h *Hustler) *BodyPartQuery {
	query := &BodyPartQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(bodypart.Table, bodypart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.HairTable, hustler.HairColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBeard queries the beard edge of a Hustler.
func (c *HustlerClient) QueryBeard(h *Hustler) *BodyPartQuery {
	query := &BodyPartQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(bodypart.Table, bodypart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.BeardTable, hustler.BeardColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIndex queries the index edge of a Hustler.
func (c *HustlerClient) QueryIndex(h *Hustler) *SearchQuery {
	query := &SearchQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, id),
			sqlgraph.To(search.Table, search.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, hustler.IndexTable, hustler.IndexColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HustlerClient) Hooks() []Hook {
	return c.hooks.Hustler
}

// ItemClient is a client for the Item schema.
type ItemClient struct {
	config
}

// NewItemClient returns a client for the Item from the given config.
func NewItemClient(c config) *ItemClient {
	return &ItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `item.Hooks(f(g(h())))`.
func (c *ItemClient) Use(hooks ...Hook) {
	c.hooks.Item = append(c.hooks.Item, hooks...)
}

// Create returns a create builder for Item.
func (c *ItemClient) Create() *ItemCreate {
	mutation := newItemMutation(c.config, OpCreate)
	return &ItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Item entities.
func (c *ItemClient) CreateBulk(builders ...*ItemCreate) *ItemCreateBulk {
	return &ItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Item.
func (c *ItemClient) Update() *ItemUpdate {
	mutation := newItemMutation(c.config, OpUpdate)
	return &ItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ItemClient) UpdateOne(i *Item) *ItemUpdateOne {
	mutation := newItemMutation(c.config, OpUpdateOne, withItem(i))
	return &ItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ItemClient) UpdateOneID(id string) *ItemUpdateOne {
	mutation := newItemMutation(c.config, OpUpdateOne, withItemID(id))
	return &ItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Item.
func (c *ItemClient) Delete() *ItemDelete {
	mutation := newItemMutation(c.config, OpDelete)
	return &ItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ItemClient) DeleteOne(i *Item) *ItemDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ItemClient) DeleteOneID(id string) *ItemDeleteOne {
	builder := c.Delete().Where(item.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ItemDeleteOne{builder}
}

// Query returns a query builder for Item.
func (c *ItemClient) Query() *ItemQuery {
	return &ItemQuery{
		config: c.config,
	}
}

// Get returns a Item entity by its id.
func (c *ItemClient) Get(ctx context.Context, id string) (*Item, error) {
	return c.Query().Where(item.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ItemClient) GetX(ctx context.Context, id string) *Item {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWallets queries the wallets edge of a Item.
func (c *ItemClient) QueryWallets(i *Item) *WalletItemsQuery {
	query := &WalletItemsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(walletitems.Table, walletitems.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.WalletsTable, item.WalletsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDopes queries the dopes edge of a Item.
func (c *ItemClient) QueryDopes(i *Item) *DopeQuery {
	query := &DopeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(dope.Table, dope.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, item.DopesTable, item.DopesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerWeapons queries the hustler_weapons edge of a Item.
func (c *ItemClient) QueryHustlerWeapons(i *Item) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerWeaponsTable, item.HustlerWeaponsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerClothes queries the hustler_clothes edge of a Item.
func (c *ItemClient) QueryHustlerClothes(i *Item) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerClothesTable, item.HustlerClothesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerVehicles queries the hustler_vehicles edge of a Item.
func (c *ItemClient) QueryHustlerVehicles(i *Item) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerVehiclesTable, item.HustlerVehiclesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerWaists queries the hustler_waists edge of a Item.
func (c *ItemClient) QueryHustlerWaists(i *Item) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerWaistsTable, item.HustlerWaistsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerFeet queries the hustler_feet edge of a Item.
func (c *ItemClient) QueryHustlerFeet(i *Item) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerFeetTable, item.HustlerFeetColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerHands queries the hustler_hands edge of a Item.
func (c *ItemClient) QueryHustlerHands(i *Item) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerHandsTable, item.HustlerHandsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerDrugs queries the hustler_drugs edge of a Item.
func (c *ItemClient) QueryHustlerDrugs(i *Item) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerDrugsTable, item.HustlerDrugsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerNecks queries the hustler_necks edge of a Item.
func (c *ItemClient) QueryHustlerNecks(i *Item) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerNecksTable, item.HustlerNecksColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerRings queries the hustler_rings edge of a Item.
func (c *ItemClient) QueryHustlerRings(i *Item) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerRingsTable, item.HustlerRingsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlerAccessories queries the hustler_accessories edge of a Item.
func (c *ItemClient) QueryHustlerAccessories(i *Item) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerAccessoriesTable, item.HustlerAccessoriesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBase queries the base edge of a Item.
func (c *ItemClient) QueryBase(i *Item) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, item.BaseTable, item.BaseColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDerivative queries the derivative edge of a Item.
func (c *ItemClient) QueryDerivative(i *Item) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.DerivativeTable, item.DerivativeColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIndex queries the index edge of a Item.
func (c *ItemClient) QueryIndex(i *Item) *SearchQuery {
	query := &SearchQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(search.Table, search.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, item.IndexTable, item.IndexColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ItemClient) Hooks() []Hook {
	return c.hooks.Item
}

// ListingClient is a client for the Listing schema.
type ListingClient struct {
	config
}

// NewListingClient returns a client for the Listing from the given config.
func NewListingClient(c config) *ListingClient {
	return &ListingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `listing.Hooks(f(g(h())))`.
func (c *ListingClient) Use(hooks ...Hook) {
	c.hooks.Listing = append(c.hooks.Listing, hooks...)
}

// Create returns a create builder for Listing.
func (c *ListingClient) Create() *ListingCreate {
	mutation := newListingMutation(c.config, OpCreate)
	return &ListingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Listing entities.
func (c *ListingClient) CreateBulk(builders ...*ListingCreate) *ListingCreateBulk {
	return &ListingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Listing.
func (c *ListingClient) Update() *ListingUpdate {
	mutation := newListingMutation(c.config, OpUpdate)
	return &ListingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ListingClient) UpdateOne(l *Listing) *ListingUpdateOne {
	mutation := newListingMutation(c.config, OpUpdateOne, withListing(l))
	return &ListingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ListingClient) UpdateOneID(id string) *ListingUpdateOne {
	mutation := newListingMutation(c.config, OpUpdateOne, withListingID(id))
	return &ListingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Listing.
func (c *ListingClient) Delete() *ListingDelete {
	mutation := newListingMutation(c.config, OpDelete)
	return &ListingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ListingClient) DeleteOne(l *Listing) *ListingDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ListingClient) DeleteOneID(id string) *ListingDeleteOne {
	builder := c.Delete().Where(listing.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ListingDeleteOne{builder}
}

// Query returns a query builder for Listing.
func (c *ListingClient) Query() *ListingQuery {
	return &ListingQuery{
		config: c.config,
	}
}

// Get returns a Listing entity by its id.
func (c *ListingClient) Get(ctx context.Context, id string) (*Listing, error) {
	return c.Query().Where(listing.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ListingClient) GetX(ctx context.Context, id string) *Listing {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDope queries the dope edge of a Listing.
func (c *ListingClient) QueryDope(l *Listing) *DopeQuery {
	query := &DopeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(listing.Table, listing.FieldID, id),
			sqlgraph.To(dope.Table, dope.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, listing.DopeTable, listing.DopeColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDopeLastsales queries the dope_lastsales edge of a Listing.
func (c *ListingClient) QueryDopeLastsales(l *Listing) *DopeQuery {
	query := &DopeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(listing.Table, listing.FieldID, id),
			sqlgraph.To(dope.Table, dope.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, listing.DopeLastsalesTable, listing.DopeLastsalesColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInputs queries the inputs edge of a Listing.
func (c *ListingClient) QueryInputs(l *Listing) *AmountQuery {
	query := &AmountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(listing.Table, listing.FieldID, id),
			sqlgraph.To(amount.Table, amount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, listing.InputsTable, listing.InputsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOutputs queries the outputs edge of a Listing.
func (c *ListingClient) QueryOutputs(l *Listing) *AmountQuery {
	query := &AmountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(listing.Table, listing.FieldID, id),
			sqlgraph.To(amount.Table, amount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, listing.OutputsTable, listing.OutputsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ListingClient) Hooks() []Hook {
	return c.hooks.Listing
}

// SearchClient is a client for the Search schema.
type SearchClient struct {
	config
}

// NewSearchClient returns a client for the Search from the given config.
func NewSearchClient(c config) *SearchClient {
	return &SearchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `search.Hooks(f(g(h())))`.
func (c *SearchClient) Use(hooks ...Hook) {
	c.hooks.Search = append(c.hooks.Search, hooks...)
}

// Create returns a create builder for Search.
func (c *SearchClient) Create() *SearchCreate {
	mutation := newSearchMutation(c.config, OpCreate)
	return &SearchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Search entities.
func (c *SearchClient) CreateBulk(builders ...*SearchCreate) *SearchCreateBulk {
	return &SearchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Search.
func (c *SearchClient) Update() *SearchUpdate {
	mutation := newSearchMutation(c.config, OpUpdate)
	return &SearchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SearchClient) UpdateOne(s *Search) *SearchUpdateOne {
	mutation := newSearchMutation(c.config, OpUpdateOne, withSearch(s))
	return &SearchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SearchClient) UpdateOneID(id string) *SearchUpdateOne {
	mutation := newSearchMutation(c.config, OpUpdateOne, withSearchID(id))
	return &SearchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Search.
func (c *SearchClient) Delete() *SearchDelete {
	mutation := newSearchMutation(c.config, OpDelete)
	return &SearchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SearchClient) DeleteOne(s *Search) *SearchDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SearchClient) DeleteOneID(id string) *SearchDeleteOne {
	builder := c.Delete().Where(search.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SearchDeleteOne{builder}
}

// Query returns a query builder for Search.
func (c *SearchClient) Query() *SearchQuery {
	return &SearchQuery{
		config: c.config,
	}
}

// Get returns a Search entity by its id.
func (c *SearchClient) Get(ctx context.Context, id string) (*Search, error) {
	return c.Query().Where(search.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SearchClient) GetX(ctx context.Context, id string) *Search {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDope queries the dope edge of a Search.
func (c *SearchClient) QueryDope(s *Search) *DopeQuery {
	query := &DopeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(search.Table, search.FieldID, id),
			sqlgraph.To(dope.Table, dope.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, search.DopeTable, search.DopeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItem queries the item edge of a Search.
func (c *SearchClient) QueryItem(s *Search) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(search.Table, search.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, search.ItemTable, search.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustler queries the hustler edge of a Search.
func (c *SearchClient) QueryHustler(s *Search) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(search.Table, search.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, search.HustlerTable, search.HustlerColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SearchClient) Hooks() []Hook {
	return c.hooks.Search
}

// SyncStateClient is a client for the SyncState schema.
type SyncStateClient struct {
	config
}

// NewSyncStateClient returns a client for the SyncState from the given config.
func NewSyncStateClient(c config) *SyncStateClient {
	return &SyncStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `syncstate.Hooks(f(g(h())))`.
func (c *SyncStateClient) Use(hooks ...Hook) {
	c.hooks.SyncState = append(c.hooks.SyncState, hooks...)
}

// Create returns a create builder for SyncState.
func (c *SyncStateClient) Create() *SyncStateCreate {
	mutation := newSyncStateMutation(c.config, OpCreate)
	return &SyncStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SyncState entities.
func (c *SyncStateClient) CreateBulk(builders ...*SyncStateCreate) *SyncStateCreateBulk {
	return &SyncStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SyncState.
func (c *SyncStateClient) Update() *SyncStateUpdate {
	mutation := newSyncStateMutation(c.config, OpUpdate)
	return &SyncStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SyncStateClient) UpdateOne(ss *SyncState) *SyncStateUpdateOne {
	mutation := newSyncStateMutation(c.config, OpUpdateOne, withSyncState(ss))
	return &SyncStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SyncStateClient) UpdateOneID(id string) *SyncStateUpdateOne {
	mutation := newSyncStateMutation(c.config, OpUpdateOne, withSyncStateID(id))
	return &SyncStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SyncState.
func (c *SyncStateClient) Delete() *SyncStateDelete {
	mutation := newSyncStateMutation(c.config, OpDelete)
	return &SyncStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SyncStateClient) DeleteOne(ss *SyncState) *SyncStateDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SyncStateClient) DeleteOneID(id string) *SyncStateDeleteOne {
	builder := c.Delete().Where(syncstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SyncStateDeleteOne{builder}
}

// Query returns a query builder for SyncState.
func (c *SyncStateClient) Query() *SyncStateQuery {
	return &SyncStateQuery{
		config: c.config,
	}
}

// Get returns a SyncState entity by its id.
func (c *SyncStateClient) Get(ctx context.Context, id string) (*SyncState, error) {
	return c.Query().Where(syncstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SyncStateClient) GetX(ctx context.Context, id string) *SyncState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SyncStateClient) Hooks() []Hook {
	return c.hooks.SyncState
}

// WalletClient is a client for the Wallet schema.
type WalletClient struct {
	config
}

// NewWalletClient returns a client for the Wallet from the given config.
func NewWalletClient(c config) *WalletClient {
	return &WalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wallet.Hooks(f(g(h())))`.
func (c *WalletClient) Use(hooks ...Hook) {
	c.hooks.Wallet = append(c.hooks.Wallet, hooks...)
}

// Create returns a create builder for Wallet.
func (c *WalletClient) Create() *WalletCreate {
	mutation := newWalletMutation(c.config, OpCreate)
	return &WalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Wallet entities.
func (c *WalletClient) CreateBulk(builders ...*WalletCreate) *WalletCreateBulk {
	return &WalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Wallet.
func (c *WalletClient) Update() *WalletUpdate {
	mutation := newWalletMutation(c.config, OpUpdate)
	return &WalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WalletClient) UpdateOne(w *Wallet) *WalletUpdateOne {
	mutation := newWalletMutation(c.config, OpUpdateOne, withWallet(w))
	return &WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WalletClient) UpdateOneID(id string) *WalletUpdateOne {
	mutation := newWalletMutation(c.config, OpUpdateOne, withWalletID(id))
	return &WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Wallet.
func (c *WalletClient) Delete() *WalletDelete {
	mutation := newWalletMutation(c.config, OpDelete)
	return &WalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WalletClient) DeleteOne(w *Wallet) *WalletDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WalletClient) DeleteOneID(id string) *WalletDeleteOne {
	builder := c.Delete().Where(wallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WalletDeleteOne{builder}
}

// Query returns a query builder for Wallet.
func (c *WalletClient) Query() *WalletQuery {
	return &WalletQuery{
		config: c.config,
	}
}

// Get returns a Wallet entity by its id.
func (c *WalletClient) Get(ctx context.Context, id string) (*Wallet, error) {
	return c.Query().Where(wallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WalletClient) GetX(ctx context.Context, id string) *Wallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDopes queries the dopes edge of a Wallet.
func (c *WalletClient) QueryDopes(w *Wallet) *DopeQuery {
	query := &DopeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(wallet.Table, wallet.FieldID, id),
			sqlgraph.To(dope.Table, dope.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, wallet.DopesTable, wallet.DopesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItems queries the items edge of a Wallet.
func (c *WalletClient) QueryItems(w *Wallet) *WalletItemsQuery {
	query := &WalletItemsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(wallet.Table, wallet.FieldID, id),
			sqlgraph.To(walletitems.Table, walletitems.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, wallet.ItemsTable, wallet.ItemsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHustlers queries the hustlers edge of a Wallet.
func (c *WalletClient) QueryHustlers(w *Wallet) *HustlerQuery {
	query := &HustlerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(wallet.Table, wallet.FieldID, id),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, wallet.HustlersTable, wallet.HustlersColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WalletClient) Hooks() []Hook {
	return c.hooks.Wallet
}

// WalletItemsClient is a client for the WalletItems schema.
type WalletItemsClient struct {
	config
}

// NewWalletItemsClient returns a client for the WalletItems from the given config.
func NewWalletItemsClient(c config) *WalletItemsClient {
	return &WalletItemsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `walletitems.Hooks(f(g(h())))`.
func (c *WalletItemsClient) Use(hooks ...Hook) {
	c.hooks.WalletItems = append(c.hooks.WalletItems, hooks...)
}

// Create returns a create builder for WalletItems.
func (c *WalletItemsClient) Create() *WalletItemsCreate {
	mutation := newWalletItemsMutation(c.config, OpCreate)
	return &WalletItemsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WalletItems entities.
func (c *WalletItemsClient) CreateBulk(builders ...*WalletItemsCreate) *WalletItemsCreateBulk {
	return &WalletItemsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WalletItems.
func (c *WalletItemsClient) Update() *WalletItemsUpdate {
	mutation := newWalletItemsMutation(c.config, OpUpdate)
	return &WalletItemsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WalletItemsClient) UpdateOne(wi *WalletItems) *WalletItemsUpdateOne {
	mutation := newWalletItemsMutation(c.config, OpUpdateOne, withWalletItems(wi))
	return &WalletItemsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WalletItemsClient) UpdateOneID(id string) *WalletItemsUpdateOne {
	mutation := newWalletItemsMutation(c.config, OpUpdateOne, withWalletItemsID(id))
	return &WalletItemsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WalletItems.
func (c *WalletItemsClient) Delete() *WalletItemsDelete {
	mutation := newWalletItemsMutation(c.config, OpDelete)
	return &WalletItemsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WalletItemsClient) DeleteOne(wi *WalletItems) *WalletItemsDeleteOne {
	return c.DeleteOneID(wi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WalletItemsClient) DeleteOneID(id string) *WalletItemsDeleteOne {
	builder := c.Delete().Where(walletitems.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WalletItemsDeleteOne{builder}
}

// Query returns a query builder for WalletItems.
func (c *WalletItemsClient) Query() *WalletItemsQuery {
	return &WalletItemsQuery{
		config: c.config,
	}
}

// Get returns a WalletItems entity by its id.
func (c *WalletItemsClient) Get(ctx context.Context, id string) (*WalletItems, error) {
	return c.Query().Where(walletitems.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WalletItemsClient) GetX(ctx context.Context, id string) *WalletItems {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWallet queries the wallet edge of a WalletItems.
func (c *WalletItemsClient) QueryWallet(wi *WalletItems) *WalletQuery {
	query := &WalletQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(walletitems.Table, walletitems.FieldID, id),
			sqlgraph.To(wallet.Table, wallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, walletitems.WalletTable, walletitems.WalletColumn),
		)
		fromV = sqlgraph.Neighbors(wi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItem queries the item edge of a WalletItems.
func (c *WalletItemsClient) QueryItem(wi *WalletItems) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(walletitems.Table, walletitems.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, walletitems.ItemTable, walletitems.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(wi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WalletItemsClient) Hooks() []Hook {
	return c.hooks.WalletItems
}
