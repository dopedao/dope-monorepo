// Code generated by entc, DO NOT EDIT.

package asset

import (
	"fmt"
	"io"
	"strconv"

	"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
)

const (
	// Label holds the string label denoting the asset type in the database.
	Label = "asset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldAssetId holds the string denoting the assetid field in the database.
	FieldAssetId = "asset_id"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgePaymentToken holds the string denoting the paymenttoken edge name in mutations.
	EdgePaymentToken = "paymentToken"
	// Table holds the table name of the asset in the database.
	Table = "assets"
	// PaymentTokenTable is the table that holds the paymentToken relation/edge. The primary key declared below.
	PaymentTokenTable = "asset_paymentToken"
	// PaymentTokenInverseTable is the table name for the PaymentToken entity.
	// It exists in this package in order to avoid circular dependency with the "paymenttoken" package.
	PaymentTokenInverseTable = "payment_tokens"
)

// Columns holds all SQL columns for asset fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldType,
	FieldSymbol,
	FieldAmount,
	FieldAssetId,
	FieldPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "assets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"listing_inputs",
	"listing_outputs",
}

var (
	// PaymentTokenPrimaryKey and PaymentTokenColumn2 are the table columns denoting the
	// primary key for the paymentToken relation (M2M).
	PaymentTokenPrimaryKey = []string{"asset_id", "payment_token_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount func() schema.BigInt
	// DefaultAssetId holds the default value on creation for the "assetId" field.
	DefaultAssetId func() schema.BigInt
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeETH       Type = "ETH"
	TypeEQUIPMENT Type = "EQUIPMENT"
	TypeHUSTLER   Type = "HUSTLER"
	TypeTURF      Type = "TURF"
	TypePAPER     Type = "PAPER"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeETH, TypeEQUIPMENT, TypeHUSTLER, TypeTURF, TypePAPER:
		return nil
	default:
		return fmt.Errorf("asset: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
