// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/ent/listing"
)

// Listing is the model entity for the Listing schema.
type Listing struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Source holds the value of the "source" field.
	Source listing.Source `json:"source,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ListingQuery when eager-loading is set.
	Edges         ListingEdges `json:"edges"`
	dope_listings *string
}

// ListingEdges holds the relations/edges for other nodes in the graph.
type ListingEdges struct {
	// Dope holds the value of the dope edge.
	Dope *Dope `json:"dope,omitempty"`
	// DopeLastsales holds the value of the dope_lastsales edge.
	DopeLastsales *Dope `json:"dope_lastsales,omitempty"`
	// Inputs holds the value of the inputs edge.
	Inputs []*Asset `json:"inputs,omitempty"`
	// Outputs holds the value of the outputs edge.
	Outputs []*Asset `json:"outputs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DopeOrErr returns the Dope value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ListingEdges) DopeOrErr() (*Dope, error) {
	if e.loadedTypes[0] {
		if e.Dope == nil {
			// The edge dope was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dope.Label}
		}
		return e.Dope, nil
	}
	return nil, &NotLoadedError{edge: "dope"}
}

// DopeLastsalesOrErr returns the DopeLastsales value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ListingEdges) DopeLastsalesOrErr() (*Dope, error) {
	if e.loadedTypes[1] {
		if e.DopeLastsales == nil {
			// The edge dope_lastsales was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dope.Label}
		}
		return e.DopeLastsales, nil
	}
	return nil, &NotLoadedError{edge: "dope_lastsales"}
}

// InputsOrErr returns the Inputs value or an error if the edge
// was not loaded in eager-loading.
func (e ListingEdges) InputsOrErr() ([]*Asset, error) {
	if e.loadedTypes[2] {
		return e.Inputs, nil
	}
	return nil, &NotLoadedError{edge: "inputs"}
}

// OutputsOrErr returns the Outputs value or an error if the edge
// was not loaded in eager-loading.
func (e ListingEdges) OutputsOrErr() ([]*Asset, error) {
	if e.loadedTypes[3] {
		return e.Outputs, nil
	}
	return nil, &NotLoadedError{edge: "outputs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Listing) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case listing.FieldActive:
			values[i] = new(sql.NullBool)
		case listing.FieldID, listing.FieldSource:
			values[i] = new(sql.NullString)
		case listing.ForeignKeys[0]: // dope_listings
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Listing", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Listing fields.
func (l *Listing) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case listing.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				l.ID = value.String
			}
		case listing.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				l.Active = value.Bool
			}
		case listing.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				l.Source = listing.Source(value.String)
			}
		case listing.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dope_listings", values[i])
			} else if value.Valid {
				l.dope_listings = new(string)
				*l.dope_listings = value.String
			}
		}
	}
	return nil
}

// QueryDope queries the "dope" edge of the Listing entity.
func (l *Listing) QueryDope() *DopeQuery {
	return (&ListingClient{config: l.config}).QueryDope(l)
}

// QueryDopeLastsales queries the "dope_lastsales" edge of the Listing entity.
func (l *Listing) QueryDopeLastsales() *DopeQuery {
	return (&ListingClient{config: l.config}).QueryDopeLastsales(l)
}

// QueryInputs queries the "inputs" edge of the Listing entity.
func (l *Listing) QueryInputs() *AssetQuery {
	return (&ListingClient{config: l.config}).QueryInputs(l)
}

// QueryOutputs queries the "outputs" edge of the Listing entity.
func (l *Listing) QueryOutputs() *AssetQuery {
	return (&ListingClient{config: l.config}).QueryOutputs(l)
}

// Update returns a builder for updating this Listing.
// Note that you need to call Listing.Unwrap() before calling this method if this Listing
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Listing) Update() *ListingUpdateOne {
	return (&ListingClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Listing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Listing) Unwrap() *Listing {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Listing is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Listing) String() string {
	var builder strings.Builder
	builder.WriteString("Listing(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", l.Active))
	builder.WriteString(", source=")
	builder.WriteString(fmt.Sprintf("%v", l.Source))
	builder.WriteByte(')')
	return builder.String()
}

// Listings is a parsable slice of Listing.
type Listings []*Listing

func (l Listings) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
