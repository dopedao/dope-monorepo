




// Code generated by entc, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/schema/field"

)


import (
		"github.com/dopedao/dope-monorepo/packages/api/ent/walletitems"
		"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"
		"github.com/dopedao/dope-monorepo/packages/api/ent/item"
)





// WalletItemsCreate is the builder for creating a WalletItems entity.
type WalletItemsCreate struct {
	config
	mutation *WalletItemsMutation
	hooks []Hook
		conflict []sql.ConflictOption
}


	




	


	
	
	// SetBalance sets the "balance" field.
	func (wic *WalletItemsCreate) SetBalance(si schema.BigInt) *WalletItemsCreate {
		wic.mutation.SetBalance(si)
		return wic
	}

	
	
		
		// SetNillableBalance sets the "balance" field if the given value is not nil.
		func (wic *WalletItemsCreate) SetNillableBalance(si *schema.BigInt) *WalletItemsCreate {
			if si != nil {
				wic.SetBalance(*si)
			}
			return wic
		}
	

	

	

	
	
	// SetID sets the "id" field.
	func (wic *WalletItemsCreate) SetID(s string) *WalletItemsCreate {
		wic.mutation.SetID(s)
		return wic
	}

	
	

	

	



	
	
	
	
		// SetWalletID sets the "wallet" edge to the Wallet entity by ID.
		func (wic *WalletItemsCreate) SetWalletID(id string) *WalletItemsCreate {
			wic.mutation.SetWalletID(id)
			return wic
		}
	
	
		
		// SetNillableWalletID sets the "wallet" edge to the Wallet entity by ID if the given value is not nil.
		func (wic *WalletItemsCreate) SetNillableWalletID(id *string) *WalletItemsCreate {
			if id != nil {
				wic = wic.SetWalletID(*id)
			}
			return wic
		}
	
	
	
	
	// SetWallet sets the "wallet" edge to the Wallet entity.
	func (wic *WalletItemsCreate) SetWallet(w *Wallet) *WalletItemsCreate {
		return wic.SetWalletID(w.ID)
	}

	
	
	
	
		// SetItemID sets the "item" edge to the Item entity by ID.
		func (wic *WalletItemsCreate) SetItemID(id string) *WalletItemsCreate {
			wic.mutation.SetItemID(id)
			return wic
		}
	
	
		
		// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
		func (wic *WalletItemsCreate) SetNillableItemID(id *string) *WalletItemsCreate {
			if id != nil {
				wic = wic.SetItemID(*id)
			}
			return wic
		}
	
	
	
	
	// SetItem sets the "item" edge to the Item entity.
	func (wic *WalletItemsCreate) SetItem(i *Item) *WalletItemsCreate {
		return wic.SetItemID(i.ID)
	}


// Mutation returns the WalletItemsMutation object of the builder.
func (wic *WalletItemsCreate) Mutation() *WalletItemsMutation {
	return wic.mutation
}




// Save creates the WalletItems in the database.
func (wic *WalletItemsCreate) Save(ctx context.Context) (*WalletItems, error) {
	var (
		err error
		node *WalletItems
	)
			wic.defaults()
	if len(wic.hooks) == 0 {
		if err = wic.check(); err != nil {
			return nil, err
		}
		node, err = wic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WalletItemsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wic.check(); err != nil {
				return nil, err
			}
			wic.mutation = mutation
			if node, err = wic.sqlSave(ctx) ; err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wic.hooks) - 1; i >= 0; i-- {
			if wic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wic *WalletItemsCreate) SaveX(ctx context.Context) *WalletItems {
	v, err := wic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wic *WalletItemsCreate) Exec(ctx context.Context) error {
	_, err := wic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wic *WalletItemsCreate) ExecX(ctx context.Context) {
	if err := wic.Exec(ctx); err != nil {
		panic(err)
	}
}

	// defaults sets the default values of the builder before save.
	func (wic *WalletItemsCreate) defaults() {
				if _, ok := wic.mutation.Balance(); !ok {
					v := walletitems.DefaultBalance()
					wic.mutation.SetBalance(v)
				}
	}


// check runs all checks and user-defined validators on the builder.
func (wic *WalletItemsCreate) check() error {
			if _, ok := wic.mutation.Balance(); !ok {
				return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "WalletItems.balance"`)}
			}
	return nil
}


	
	




func (wic *WalletItemsCreate) sqlSave(ctx context.Context) (*WalletItems, error) {
	_node, _spec := wic.createSpec()
	if err := sqlgraph.CreateNode(ctx, wic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
		if _spec.ID.Value != nil {
				if id, ok := _spec.ID.Value.(string); ok {
					_node.ID = id
				} else {
					return nil, fmt.Errorf("unexpected WalletItems.ID type: %T", _spec.ID.Value)
				}
		}
	return _node, nil
}

func (wic *WalletItemsCreate) createSpec() (*WalletItems, *sqlgraph.CreateSpec) {
	var (
		_node = &WalletItems{config: wic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: walletitems.Table,
			ID: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: walletitems.FieldID,
			},
		}
	)
		_spec.OnConflict = wic.conflict
		if id, ok := wic.mutation.ID(); ok {
			_node.ID = id
			_spec.ID.Value = id
		}
		if value, ok := wic.mutation.Balance(); ok {
			_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
				Type: field.TypeInt,
				Value: value,
				Column: walletitems.FieldBalance,
			})
			_node.Balance = value
		}
		if nodes := wic.mutation.WalletIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.M2O,
		Inverse: true,
		Table: walletitems.WalletTable,
		Columns: []string{ walletitems.WalletColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: wallet.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
				_node.wallet_items = &nodes[0]
			_spec.Edges = append(_spec.Edges, edge)
		}
		if nodes := wic.mutation.ItemIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.M2O,
		Inverse: true,
		Table: walletitems.ItemTable,
		Columns: []string{ walletitems.ItemColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: item.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
				_node.item_wallets = &nodes[0]
			_spec.Edges = append(_spec.Edges, edge)
		}
	return _node, _spec
}
	
		






// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WalletItems.Create().
//		SetBalance(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WalletItemsUpsert) {
//			SetBalance(v+v).
//		}).
//		Exec(ctx)
//
func (wic *WalletItemsCreate) OnConflict(opts ...sql.ConflictOption) *WalletItemsUpsertOne {
	wic.conflict = opts
	return &WalletItemsUpsertOne{
		create: wic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WalletItems.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wic *WalletItemsCreate) OnConflictColumns(columns ...string) *WalletItemsUpsertOne {
	wic.conflict = append(wic.conflict, sql.ConflictColumns(columns...))
	return &WalletItemsUpsertOne{
		create: wic,
	}
}

type (
	// WalletItemsUpsertOne is the builder for "upsert"-ing
	//  one WalletItems node.
	WalletItemsUpsertOne struct {
		create *WalletItemsCreate
	}

	// WalletItemsUpsert is the "OnConflict" setter.
	WalletItemsUpsert struct {
		*sql.UpdateSet
	}
)


	
	// SetBalance sets the "balance" field.
	func (u *WalletItemsUpsert) SetBalance(v schema.BigInt) *WalletItemsUpsert {
		u.Set(walletitems.FieldBalance, v)
		return u
	}

	
	// UpdateBalance sets the "balance" field to the value that was provided on create.
	func (u *WalletItemsUpsert) UpdateBalance() *WalletItemsUpsert {
		u.SetExcluded(walletitems.FieldBalance)
		return u
	}

	
		
		// AddBalance adds v to the "balance" field.
		func (u *WalletItemsUpsert) AddBalance(v schema.BigInt) *WalletItemsUpsert {
			u.Add(walletitems.FieldBalance, v)
			return u
		}
	

	



// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WalletItems.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(walletitems.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WalletItemsUpsertOne) UpdateNewValues() *WalletItemsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
		u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
				if _, exists := u.create.mutation.ID(); exists {
					s.SetIgnore(walletitems.FieldID)
				}
		}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.WalletItems.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *WalletItemsUpsertOne) Ignore() *WalletItemsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WalletItemsUpsertOne) DoNothing() *WalletItemsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WalletItemsCreate.OnConflict
// documentation for more info.
func (u *WalletItemsUpsertOne) Update(set func(*WalletItemsUpsert)) *WalletItemsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WalletItemsUpsert{UpdateSet: update})
	}))
	return u
}


	




    
    // SetBalance sets the "balance" field.
	func (u *WalletItemsUpsertOne) SetBalance(v schema.BigInt) *WalletItemsUpsertOne {
		return u.Update(func(s *WalletItemsUpsert) {
			s.SetBalance(v)
		})
	}

	
		
		// AddBalance adds v to the "balance" field.
		func (u *WalletItemsUpsertOne) AddBalance(v schema.BigInt) *WalletItemsUpsertOne {
			return u.Update(func(s *WalletItemsUpsert) {
				s.AddBalance(v)
			})
		}
	

    
    // UpdateBalance sets the "balance" field to the value that was provided on create.
    func (u *WalletItemsUpsertOne) UpdateBalance() *WalletItemsUpsertOne {
        return u.Update(func(s *WalletItemsUpsert) {
            s.UpdateBalance()
        })
    }

    




// Exec executes the query.
func (u *WalletItemsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WalletItemsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WalletItemsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WalletItemsUpsertOne) ID(ctx context.Context) (id string, err error) {
		if u.create.driver.Dialect() == dialect.MySQL {
			// In case of "ON CONFLICT", there is no way to get back non-numeric ID
			// fields from the database since MySQL does not support the RETURNING clause.
			return id, errors.New("ent: WalletItemsUpsertOne.ID is not supported by MySQL driver. Use WalletItemsUpsertOne.Exec instead")
		}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}


// IDX is like ID, but panics if an error occurs.
func (u *WalletItemsUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}
	








// WalletItemsCreateBulk is the builder for creating many WalletItems entities in bulk.
type WalletItemsCreateBulk struct {
	config
	builders []*WalletItemsCreate
		conflict []sql.ConflictOption
}




	
		



// Save creates the WalletItems entities in the database.
func (wicb *WalletItemsCreateBulk) Save(ctx context.Context) ([]*WalletItems, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wicb.builders))
	nodes := make([]*WalletItems, len(wicb.builders))
	mutators := make([]Mutator, len(wicb.builders))
	for i := range wicb.builders {
		func(i int, root context.Context) {
			builder := wicb.builders[i]
				builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WalletItemsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
		spec.OnConflict = wicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wicb *WalletItemsCreateBulk) SaveX(ctx context.Context) []*WalletItems {
	v, err := wicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wicb *WalletItemsCreateBulk) Exec(ctx context.Context) error {
	_, err := wicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wicb *WalletItemsCreateBulk) ExecX(ctx context.Context) {
	if err := wicb.Exec(ctx); err != nil {
		panic(err)
	}
}
	
		






// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WalletItems.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WalletItemsUpsert) {
//			SetBalance(v+v).
//		}).
//		Exec(ctx)
//
func (wicb *WalletItemsCreateBulk) OnConflict(opts ...sql.ConflictOption) *WalletItemsUpsertBulk {
	wicb.conflict = opts
	return &WalletItemsUpsertBulk{
		create: wicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WalletItems.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wicb *WalletItemsCreateBulk) OnConflictColumns(columns ...string) *WalletItemsUpsertBulk {
	wicb.conflict = append(wicb.conflict, sql.ConflictColumns(columns...))
	return &WalletItemsUpsertBulk{
		create: wicb,
	}
}

// WalletItemsUpsertBulk is the builder for "upsert"-ing
// a bulk of WalletItems nodes.
type WalletItemsUpsertBulk struct {
	create *WalletItemsCreateBulk
}


// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WalletItems.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(walletitems.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WalletItemsUpsertBulk) UpdateNewValues() *WalletItemsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
		u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
			for _, b := range u.create.builders {
					if _, exists := b.mutation.ID(); exists {
						s.SetIgnore(walletitems.FieldID)
						return
					}
			}
		}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WalletItems.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *WalletItemsUpsertBulk) Ignore() *WalletItemsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WalletItemsUpsertBulk) DoNothing() *WalletItemsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WalletItemsCreateBulk.OnConflict
// documentation for more info.
func (u *WalletItemsUpsertBulk) Update(set func(*WalletItemsUpsert)) *WalletItemsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WalletItemsUpsert{UpdateSet: update})
	}))
	return u
}


	




    
    // SetBalance sets the "balance" field.
	func (u *WalletItemsUpsertBulk) SetBalance(v schema.BigInt) *WalletItemsUpsertBulk {
		return u.Update(func(s *WalletItemsUpsert) {
			s.SetBalance(v)
		})
	}

	
		
		// AddBalance adds v to the "balance" field.
		func (u *WalletItemsUpsertBulk) AddBalance(v schema.BigInt) *WalletItemsUpsertBulk {
			return u.Update(func(s *WalletItemsUpsert) {
				s.AddBalance(v)
			})
		}
	

    
    // UpdateBalance sets the "balance" field to the value that was provided on create.
    func (u *WalletItemsUpsertBulk) UpdateBalance() *WalletItemsUpsertBulk {
        return u.Update(func(s *WalletItemsUpsert) {
            s.UpdateBalance()
        })
    }

    




// Exec executes the query.
func (u *WalletItemsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WalletItemsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WalletItemsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WalletItemsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
	


	

