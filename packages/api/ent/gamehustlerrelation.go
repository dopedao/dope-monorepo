// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/ent/gamehustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/gamehustlerrelation"
)

// GameHustlerRelation is the model entity for the GameHustlerRelation schema.
type GameHustlerRelation struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Citizen holds the value of the "citizen" field.
	Citizen string `json:"citizen,omitempty"`
	// Conversation holds the value of the "conversation" field.
	Conversation string `json:"conversation,omitempty"`
	// Text holds the value of the "text" field.
	Text uint `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameHustlerRelationQuery when eager-loading is set.
	Edges                  GameHustlerRelationEdges `json:"edges"`
	game_hustler_relations *string
}

// GameHustlerRelationEdges holds the relations/edges for other nodes in the graph.
type GameHustlerRelationEdges struct {
	// Hustler holds the value of the hustler edge.
	Hustler *GameHustler `json:"hustler,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HustlerOrErr returns the Hustler value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameHustlerRelationEdges) HustlerOrErr() (*GameHustler, error) {
	if e.loadedTypes[0] {
		if e.Hustler == nil {
			// The edge hustler was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gamehustler.Label}
		}
		return e.Hustler, nil
	}
	return nil, &NotLoadedError{edge: "hustler"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameHustlerRelation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case gamehustlerrelation.FieldText:
			values[i] = new(sql.NullInt64)
		case gamehustlerrelation.FieldID, gamehustlerrelation.FieldCitizen, gamehustlerrelation.FieldConversation:
			values[i] = new(sql.NullString)
		case gamehustlerrelation.ForeignKeys[0]: // game_hustler_relations
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GameHustlerRelation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameHustlerRelation fields.
func (ghr *GameHustlerRelation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gamehustlerrelation.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ghr.ID = value.String
			}
		case gamehustlerrelation.FieldCitizen:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field citizen", values[i])
			} else if value.Valid {
				ghr.Citizen = value.String
			}
		case gamehustlerrelation.FieldConversation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conversation", values[i])
			} else if value.Valid {
				ghr.Conversation = value.String
			}
		case gamehustlerrelation.FieldText:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				ghr.Text = uint(value.Int64)
			}
		case gamehustlerrelation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field game_hustler_relations", values[i])
			} else if value.Valid {
				ghr.game_hustler_relations = new(string)
				*ghr.game_hustler_relations = value.String
			}
		}
	}
	return nil
}

// QueryHustler queries the "hustler" edge of the GameHustlerRelation entity.
func (ghr *GameHustlerRelation) QueryHustler() *GameHustlerQuery {
	return (&GameHustlerRelationClient{config: ghr.config}).QueryHustler(ghr)
}

// Update returns a builder for updating this GameHustlerRelation.
// Note that you need to call GameHustlerRelation.Unwrap() before calling this method if this GameHustlerRelation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ghr *GameHustlerRelation) Update() *GameHustlerRelationUpdateOne {
	return (&GameHustlerRelationClient{config: ghr.config}).UpdateOne(ghr)
}

// Unwrap unwraps the GameHustlerRelation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ghr *GameHustlerRelation) Unwrap() *GameHustlerRelation {
	tx, ok := ghr.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameHustlerRelation is not a transactional entity")
	}
	ghr.config.driver = tx.drv
	return ghr
}

// String implements the fmt.Stringer.
func (ghr *GameHustlerRelation) String() string {
	var builder strings.Builder
	builder.WriteString("GameHustlerRelation(")
	builder.WriteString(fmt.Sprintf("id=%v", ghr.ID))
	builder.WriteString(", citizen=")
	builder.WriteString(ghr.Citizen)
	builder.WriteString(", conversation=")
	builder.WriteString(ghr.Conversation)
	builder.WriteString(", text=")
	builder.WriteString(fmt.Sprintf("%v", ghr.Text))
	builder.WriteByte(')')
	return builder.String()
}

// GameHustlerRelations is a parsable slice of GameHustlerRelation.
type GameHustlerRelations []*GameHustlerRelation

func (ghr GameHustlerRelations) config(cfg config) {
	for _i := range ghr {
		ghr[_i].config = cfg
	}
}
