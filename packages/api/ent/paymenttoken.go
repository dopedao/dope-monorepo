// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/ent/paymenttoken"
)

// PaymentToken is the model entity for the PaymentToken schema.
type PaymentToken struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentTokenQuery when eager-loading is set.
	Edges PaymentTokenEdges `json:"edges"`
}

// PaymentTokenEdges holds the relations/edges for other nodes in the graph.
type PaymentTokenEdges struct {
	// Asset holds the value of the asset edge.
	Asset []*Asset `json:"asset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentTokenEdges) AssetOrErr() ([]*Asset, error) {
	if e.loadedTypes[0] {
		return e.Asset, nil
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentToken) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymenttoken.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case paymenttoken.FieldID, paymenttoken.FieldAddress, paymenttoken.FieldType, paymenttoken.FieldSymbol:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PaymentToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentToken fields.
func (pt *PaymentToken) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymenttoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pt.ID = value.String
			}
		case paymenttoken.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				pt.Address = value.String
			}
		case paymenttoken.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pt.Type = value.String
			}
		case paymenttoken.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				pt.Symbol = value.String
			}
		case paymenttoken.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pt.Price = value.Float64
			}
		}
	}
	return nil
}

// QueryAsset queries the "asset" edge of the PaymentToken entity.
func (pt *PaymentToken) QueryAsset() *AssetQuery {
	return (&PaymentTokenClient{config: pt.config}).QueryAsset(pt)
}

// Update returns a builder for updating this PaymentToken.
// Note that you need to call PaymentToken.Unwrap() before calling this method if this PaymentToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PaymentToken) Update() *PaymentTokenUpdateOne {
	return (&PaymentTokenClient{config: pt.config}).UpdateOne(pt)
}

// Unwrap unwraps the PaymentToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PaymentToken) Unwrap() *PaymentToken {
	tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentToken is not a transactional entity")
	}
	pt.config.driver = tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PaymentToken) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentToken(")
	builder.WriteString(fmt.Sprintf("id=%v", pt.ID))
	builder.WriteString(", address=")
	builder.WriteString(pt.Address)
	builder.WriteString(", type=")
	builder.WriteString(pt.Type)
	builder.WriteString(", symbol=")
	builder.WriteString(pt.Symbol)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", pt.Price))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentTokens is a parsable slice of PaymentToken.
type PaymentTokens []*PaymentToken

func (pt PaymentTokens) config(cfg config) {
	for _i := range pt {
		pt[_i].config = cfg
	}
}
