



// Code generated by entc, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
			"encoding/json"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/schema/field"

)


import (
		"github.com/dopedao/dope-monorepo/packages/api/ent/listing"
		"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
		"github.com/dopedao/dope-monorepo/packages/api/ent/amount"
)




// ListingQuery is the builder for querying Listing entities.
type ListingQuery struct {
	config
	limit		*int
	offset		*int
	unique		*bool
	order		[]OrderFunc
	fields		[]string
	predicates 	[]predicate.Listing
		// eager-loading edges.
			withDope *DopeQuery
			withDopeLastsales *DopeQuery
			withInputs *AmountQuery
			withOutputs *AmountQuery
		withFKs bool
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ListingQuery builder.
func (lq *ListingQuery) Where(ps ...predicate.Listing) *ListingQuery {
	lq.predicates = append(lq.predicates, ps...)
	return lq
}

// Limit adds a limit step to the query.
func (lq *ListingQuery) Limit(limit int) *ListingQuery {
	lq.limit = &limit
	return lq
}

// Offset adds an offset step to the query.
func (lq *ListingQuery) Offset(offset int) *ListingQuery {
	lq.offset = &offset
	return lq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lq *ListingQuery) Unique(unique bool) *ListingQuery {
	lq.unique = &unique
	return lq
}

// Order adds an order step to the query.
func (lq *ListingQuery) Order(o ...OrderFunc) *ListingQuery {
	lq.order = append(lq.order, o...)
	return lq
}



	
	// QueryDope chains the current query on the "dope" edge.
	func (lq *ListingQuery) QueryDope() *DopeQuery {
		query := &DopeQuery{config: lq.config}
		query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
			if err := lq.prepareQuery(ctx); err != nil {
				return nil, err
			}  
	selector := lq.sqlQuery(ctx)
	if err := selector.Err(); err != nil {
		return nil, err
	}
	step := sqlgraph.NewStep(
		sqlgraph.From(listing.Table, listing.FieldID, selector),
		sqlgraph.To(dope.Table, dope.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, listing.DopeTable,listing.DopeColumn),
	)
	fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
return fromU, nil
		}
		return query
	}

	
	// QueryDopeLastsales chains the current query on the "dope_lastsales" edge.
	func (lq *ListingQuery) QueryDopeLastsales() *DopeQuery {
		query := &DopeQuery{config: lq.config}
		query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
			if err := lq.prepareQuery(ctx); err != nil {
				return nil, err
			}  
	selector := lq.sqlQuery(ctx)
	if err := selector.Err(); err != nil {
		return nil, err
	}
	step := sqlgraph.NewStep(
		sqlgraph.From(listing.Table, listing.FieldID, selector),
		sqlgraph.To(dope.Table, dope.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, listing.DopeLastsalesTable,listing.DopeLastsalesColumn),
	)
	fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
return fromU, nil
		}
		return query
	}

	
	// QueryInputs chains the current query on the "inputs" edge.
	func (lq *ListingQuery) QueryInputs() *AmountQuery {
		query := &AmountQuery{config: lq.config}
		query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
			if err := lq.prepareQuery(ctx); err != nil {
				return nil, err
			}  
	selector := lq.sqlQuery(ctx)
	if err := selector.Err(); err != nil {
		return nil, err
	}
	step := sqlgraph.NewStep(
		sqlgraph.From(listing.Table, listing.FieldID, selector),
		sqlgraph.To(amount.Table, amount.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, listing.InputsTable,listing.InputsColumn),
	)
	fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
return fromU, nil
		}
		return query
	}

	
	// QueryOutputs chains the current query on the "outputs" edge.
	func (lq *ListingQuery) QueryOutputs() *AmountQuery {
		query := &AmountQuery{config: lq.config}
		query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
			if err := lq.prepareQuery(ctx); err != nil {
				return nil, err
			}  
	selector := lq.sqlQuery(ctx)
	if err := selector.Err(); err != nil {
		return nil, err
	}
	step := sqlgraph.NewStep(
		sqlgraph.From(listing.Table, listing.FieldID, selector),
		sqlgraph.To(amount.Table, amount.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, listing.OutputsTable,listing.OutputsColumn),
	)
	fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
return fromU, nil
		}
		return query
	}


// First returns the first Listing entity from the query. 
// Returns a *NotFoundError when no Listing was found.
func (lq *ListingQuery) First(ctx context.Context) (*Listing, error) {
	nodes, err := lq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ listing.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lq *ListingQuery) FirstX(ctx context.Context) *Listing {
	node, err := lq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Listing ID from the query. 
// Returns a *NotFoundError when no Listing ID was found.
func (lq *ListingQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = lq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ listing.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lq *ListingQuery) FirstIDX(ctx context.Context) string {
	id, err := lq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Listing entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Listing entity is not found.
// Returns a *NotFoundError when no Listing entities are found.
func (lq *ListingQuery) Only(ctx context.Context) (*Listing, error) {
	nodes, err := lq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ listing.Label}
	default:
		return nil, &NotSingularError{ listing.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lq *ListingQuery) OnlyX(ctx context.Context) *Listing {
	node, err := lq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Listing ID in the query.
// Returns a *NotSingularError when exactly one Listing ID is not found.
// Returns a *NotFoundError when no entities are found.
func (lq *ListingQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = lq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ listing.Label}
	default:
		err = &NotSingularError{ listing.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lq *ListingQuery) OnlyIDX(ctx context.Context) string {
	id, err := lq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Listings.
func (lq *ListingQuery) All(ctx context.Context) ([]*Listing, error) {
	if err := lq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return lq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (lq *ListingQuery) AllX(ctx context.Context) []*Listing {
	nodes, err := lq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Listing IDs.
func (lq *ListingQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := lq.Select(listing.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lq *ListingQuery) IDsX(ctx context.Context) []string {
	ids, err := lq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lq *ListingQuery) Count(ctx context.Context) (int, error) {
	if err := lq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return lq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (lq *ListingQuery) CountX(ctx context.Context) int {
	count, err := lq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lq *ListingQuery) Exist(ctx context.Context) (bool, error) {
	if err := lq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return lq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (lq *ListingQuery) ExistX(ctx context.Context) bool {
	exist, err := lq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ListingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lq *ListingQuery) Clone() *ListingQuery {
	if lq == nil {
		return nil
	}
	return &ListingQuery{
		config: 	lq.config,
		limit: 		lq.limit,
		offset: 	lq.offset,
		order: 		append([]OrderFunc{}, lq.order...),
		predicates: append([]predicate.Listing{}, lq.predicates...),
			withDope: lq.withDope.Clone(),
			withDopeLastsales: lq.withDopeLastsales.Clone(),
			withInputs: lq.withInputs.Clone(),
			withOutputs: lq.withOutputs.Clone(),
		// clone intermediate query.
		sql: lq.sql.Clone(),
		path: lq.path,
	}
}
	
	// WithDope tells the query-builder to eager-load the nodes that are connected to
	// the "dope" edge. The optional arguments are used to configure the query builder of the edge.
	func (lq *ListingQuery) WithDope(opts ...func(*DopeQuery)) *ListingQuery {
		query := &DopeQuery{config: lq.config}
		for _, opt := range opts {
			opt(query)
		}
		lq.withDope = query
		return lq
	}
	
	// WithDopeLastsales tells the query-builder to eager-load the nodes that are connected to
	// the "dope_lastsales" edge. The optional arguments are used to configure the query builder of the edge.
	func (lq *ListingQuery) WithDopeLastsales(opts ...func(*DopeQuery)) *ListingQuery {
		query := &DopeQuery{config: lq.config}
		for _, opt := range opts {
			opt(query)
		}
		lq.withDopeLastsales = query
		return lq
	}
	
	// WithInputs tells the query-builder to eager-load the nodes that are connected to
	// the "inputs" edge. The optional arguments are used to configure the query builder of the edge.
	func (lq *ListingQuery) WithInputs(opts ...func(*AmountQuery)) *ListingQuery {
		query := &AmountQuery{config: lq.config}
		for _, opt := range opts {
			opt(query)
		}
		lq.withInputs = query
		return lq
	}
	
	// WithOutputs tells the query-builder to eager-load the nodes that are connected to
	// the "outputs" edge. The optional arguments are used to configure the query builder of the edge.
	func (lq *ListingQuery) WithOutputs(opts ...func(*AmountQuery)) *ListingQuery {
		query := &AmountQuery{config: lq.config}
		for _, opt := range opts {
			opt(query)
		}
		lq.withOutputs = query
		return lq
	}



// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Active bool `json:"active,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Listing.Query().
//		GroupBy(listing.FieldActive).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (lq *ListingQuery) GroupBy(field string, fields ...string) *ListingGroupBy {
	group := &ListingGroupBy{config: lq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return lq.sqlQuery(ctx), nil
	}
	return group
}



// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Active bool `json:"active,omitempty"`
//	}
//
//	client.Listing.Query().
//		Select(listing.FieldActive).
//		Scan(ctx, &v)
//
func (lq *ListingQuery) Select(fields ...string) *ListingSelect {
	lq.fields = append(lq.fields, fields...)
	return &ListingSelect{ ListingQuery: lq }
}

func (lq *ListingQuery) prepareQuery(ctx context.Context) error {
	for _, f := range lq.fields {
		if !listing.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lq.path != nil {
		prev, err := lq.path(ctx)
		if err != nil {
			return err
		}
		lq.sql = prev
	}
	return nil
}


	
	




func (lq *ListingQuery) sqlAll(ctx context.Context) ([]*Listing, error) {
	var (
		nodes = []*Listing{}
			withFKs = lq.withFKs
		_spec = lq.querySpec()
			loadedTypes = [4]bool{
					lq.withDope != nil,
					lq.withDopeLastsales != nil,
					lq.withInputs != nil,
					lq.withOutputs != nil,
			}
	)
				if lq.withDope != nil {
					withFKs = true
				}
			if withFKs {
				_spec.Node.Columns = append(_spec.Node.Columns, listing.ForeignKeys...)
			}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Listing{config: lq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
			node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, lq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
			
	if query := lq.withDope; query != nil {
			ids := make([]string, 0, len(nodes))
			nodeids := make(map[string][]*Listing)
			for i := range nodes {
					if nodes[i].dope_listings == nil {
						continue
					}
				fk := *nodes[i].dope_listings
				if _, ok := nodeids[fk]; !ok {
					ids = append(ids, fk)
				}
				nodeids[fk] = append(nodeids[fk], nodes[i])
			}
			query.Where(dope.IDIn(ids...))
			neighbors, err := query.All(ctx)
			if err != nil {
				return nil, err
			}
			for _, n := range neighbors {
				nodes, ok := nodeids[n.ID]
				if !ok {
					return nil, fmt.Errorf(`unexpected foreign-key "dope_listings" returned %v`, n.ID)
				}
				for i := range nodes {
					nodes[i].Edges.Dope = n
				}
			}
	}

			
	if query := lq.withDopeLastsales; query != nil {
			fks := make([]driver.Value, 0, len(nodes))
			nodeids := make(map[string]*Listing)
			for i := range nodes {
				fks = append(fks, nodes[i].ID)
				nodeids[nodes[i].ID] = nodes[i]
			}
				query.withFKs = true
			query.Where(predicate.Dope(func(s *sql.Selector) {
				s.Where(sql.InValues(listing.DopeLastsalesColumn, fks...))
			}))
			neighbors, err := query.All(ctx)
			if err != nil {
				return nil, err
			}
			for _, n := range neighbors {
				fk := n.listing_dope_lastsales
					if fk == nil {
						return nil, fmt.Errorf(`foreign-key "listing_dope_lastsales" is nil for node %v`, n.ID)
					}
				node, ok := nodeids[*fk]
				if !ok {
					return nil, fmt.Errorf(`unexpected foreign-key "listing_dope_lastsales" returned %v for node %v`, *fk, n.ID)
				}
				node.Edges.DopeLastsales = n
			}
	}

			
	if query := lq.withInputs; query != nil {
			fks := make([]driver.Value, 0, len(nodes))
			nodeids := make(map[string]*Listing)
			for i := range nodes {
				fks = append(fks, nodes[i].ID)
				nodeids[nodes[i].ID] = nodes[i]
					nodes[i].Edges.Inputs = []*Amount{}
			}
				query.withFKs = true
			query.Where(predicate.Amount(func(s *sql.Selector) {
				s.Where(sql.InValues(listing.InputsColumn, fks...))
			}))
			neighbors, err := query.All(ctx)
			if err != nil {
				return nil, err
			}
			for _, n := range neighbors {
				fk := n.listing_inputs
					if fk == nil {
						return nil, fmt.Errorf(`foreign-key "listing_inputs" is nil for node %v`, n.ID)
					}
				node, ok := nodeids[*fk]
				if !ok {
					return nil, fmt.Errorf(`unexpected foreign-key "listing_inputs" returned %v for node %v`, *fk, n.ID)
				}
				node.Edges.Inputs = append(node.Edges.Inputs, n)
			}
	}

			
	if query := lq.withOutputs; query != nil {
			fks := make([]driver.Value, 0, len(nodes))
			nodeids := make(map[string]*Listing)
			for i := range nodes {
				fks = append(fks, nodes[i].ID)
				nodeids[nodes[i].ID] = nodes[i]
					nodes[i].Edges.Outputs = []*Amount{}
			}
				query.withFKs = true
			query.Where(predicate.Amount(func(s *sql.Selector) {
				s.Where(sql.InValues(listing.OutputsColumn, fks...))
			}))
			neighbors, err := query.All(ctx)
			if err != nil {
				return nil, err
			}
			for _, n := range neighbors {
				fk := n.listing_outputs
					if fk == nil {
						return nil, fmt.Errorf(`foreign-key "listing_outputs" is nil for node %v`, n.ID)
					}
				node, ok := nodeids[*fk]
				if !ok {
					return nil, fmt.Errorf(`unexpected foreign-key "listing_outputs" returned %v for node %v`, *fk, n.ID)
				}
				node.Edges.Outputs = append(node.Edges.Outputs, n)
			}
	}

	return nodes, nil
}

func (lq *ListingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lq.querySpec()
	_spec.Node.Columns = lq.fields
	if len(lq.fields) > 0 {
		_spec.Unique = lq.unique != nil && *lq.unique
	}
	return sqlgraph.CountNodes(ctx, lq.driver, _spec)
}

func (lq *ListingQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := lq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (lq *ListingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table: listing.Table,
			Columns: listing.Columns,
			ID: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: listing.FieldID,
			},
		},
		From: lq.sql,
		Unique: true,
	}
	if unique := lq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := lq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, listing.FieldID)
		for i := range fields {
			if fields[i] != listing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}





func (lq *ListingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lq.driver.Dialect())
	t1 := builder.Table(listing.Table)
	columns := lq.fields
	if len(columns) == 0 {
		columns = listing.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lq.sql != nil {
		selector = lq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lq.unique != nil && *lq.unique {
		selector.Distinct()
	}
	for _, p := range lq.predicates {
		p(selector)
	}
	for _, p := range lq.order {
		p(selector)
	}
	if offset := lq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

    

    










// ListingGroupBy is the group-by builder for Listing entities.
type ListingGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lgb *ListingGroupBy) Aggregate(fns ...AggregateFunc) *ListingGroupBy {
	lgb.fns = append(lgb.fns, fns...)
	return lgb
}

// Scan applies the group-by query and scans the result into the given value.
func (lgb *ListingGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := lgb.path(ctx)
	if err != nil {
		return err
	}
	lgb.sql = query
	return lgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (lgb *ListingGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := lgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}


	
	// Strings returns list of strings from group-by. 
	// It is only allowed when executing a group-by query with one field.
	func (lgb *ListingGroupBy) Strings(ctx context.Context) ([]string, error) {
		if len(lgb.fields) > 1 {
			return nil, errors.New("ent: ListingGroupBy.Strings is not achievable when grouping more than 1 field")
		}
		var v []string
		if err := lgb.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// StringsX is like Strings, but panics if an error occurs.
	func (lgb *ListingGroupBy) StringsX(ctx context.Context) []string {
		v, err := lgb.Strings(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// String returns a single string from a group-by query.
	// It is only allowed when executing a group-by query with one field.
	func (lgb *ListingGroupBy) String(ctx context.Context) (_ string, err error) {
		var v []string
		if v, err = lgb.Strings(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ listing.Label}
		default:
			err = fmt.Errorf("ent: ListingGroupBy.Strings returned %d results when one was expected", len(v))
		}
		return
	}

	// StringX is like String, but panics if an error occurs.
	func (lgb *ListingGroupBy) StringX(ctx context.Context) string {
		v, err := lgb.String(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Ints returns list of ints from group-by. 
	// It is only allowed when executing a group-by query with one field.
	func (lgb *ListingGroupBy) Ints(ctx context.Context) ([]int, error) {
		if len(lgb.fields) > 1 {
			return nil, errors.New("ent: ListingGroupBy.Ints is not achievable when grouping more than 1 field")
		}
		var v []int
		if err := lgb.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// IntsX is like Ints, but panics if an error occurs.
	func (lgb *ListingGroupBy) IntsX(ctx context.Context) []int {
		v, err := lgb.Ints(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Int returns a single int from a group-by query.
	// It is only allowed when executing a group-by query with one field.
	func (lgb *ListingGroupBy) Int(ctx context.Context) (_ int, err error) {
		var v []int
		if v, err = lgb.Ints(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ listing.Label}
		default:
			err = fmt.Errorf("ent: ListingGroupBy.Ints returned %d results when one was expected", len(v))
		}
		return
	}

	// IntX is like Int, but panics if an error occurs.
	func (lgb *ListingGroupBy) IntX(ctx context.Context) int {
		v, err := lgb.Int(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Float64s returns list of float64s from group-by. 
	// It is only allowed when executing a group-by query with one field.
	func (lgb *ListingGroupBy) Float64s(ctx context.Context) ([]float64, error) {
		if len(lgb.fields) > 1 {
			return nil, errors.New("ent: ListingGroupBy.Float64s is not achievable when grouping more than 1 field")
		}
		var v []float64
		if err := lgb.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// Float64sX is like Float64s, but panics if an error occurs.
	func (lgb *ListingGroupBy) Float64sX(ctx context.Context) []float64 {
		v, err := lgb.Float64s(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Float64 returns a single float64 from a group-by query.
	// It is only allowed when executing a group-by query with one field.
	func (lgb *ListingGroupBy) Float64(ctx context.Context) (_ float64, err error) {
		var v []float64
		if v, err = lgb.Float64s(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ listing.Label}
		default:
			err = fmt.Errorf("ent: ListingGroupBy.Float64s returned %d results when one was expected", len(v))
		}
		return
	}

	// Float64X is like Float64, but panics if an error occurs.
	func (lgb *ListingGroupBy) Float64X(ctx context.Context) float64 {
		v, err := lgb.Float64(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Bools returns list of bools from group-by. 
	// It is only allowed when executing a group-by query with one field.
	func (lgb *ListingGroupBy) Bools(ctx context.Context) ([]bool, error) {
		if len(lgb.fields) > 1 {
			return nil, errors.New("ent: ListingGroupBy.Bools is not achievable when grouping more than 1 field")
		}
		var v []bool
		if err := lgb.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// BoolsX is like Bools, but panics if an error occurs.
	func (lgb *ListingGroupBy) BoolsX(ctx context.Context) []bool {
		v, err := lgb.Bools(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Bool returns a single bool from a group-by query.
	// It is only allowed when executing a group-by query with one field.
	func (lgb *ListingGroupBy) Bool(ctx context.Context) (_ bool, err error) {
		var v []bool
		if v, err = lgb.Bools(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ listing.Label}
		default:
			err = fmt.Errorf("ent: ListingGroupBy.Bools returned %d results when one was expected", len(v))
		}
		return
	}

	// BoolX is like Bool, but panics if an error occurs.
	func (lgb *ListingGroupBy) BoolX(ctx context.Context) bool {
		v, err := lgb.Bool(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}



	
	



func (lgb *ListingGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range lgb.fields {
		if !listing.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := lgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}


func (lgb *ListingGroupBy) sqlQuery() *sql.Selector {
	selector := lgb.sql.Select()
	aggregation := make([]string, 0, len(lgb.fns))
	for _, fn := range lgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(lgb.fields) + len(lgb.fns))
		for _, f := range lgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(lgb.fields...)...)
}







// ListingSelect is the builder for selecting fields of Listing entities.
type ListingSelect struct {
	*ListingQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}


// Scan applies the selector query and scans the result into the given value.
func (ls *ListingSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ls.prepareQuery(ctx); err != nil {
		return err
	}
	ls.sql = ls.ListingQuery.sqlQuery(ctx)
	return ls.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ls *ListingSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ls.Scan(ctx, v); err != nil {
		panic(err)
	}
}


	
	// Strings returns list of strings from a selector. It is only allowed when selecting one field.
	func (ls *ListingSelect) Strings(ctx context.Context) ([]string, error) {
		if len(ls.fields) > 1 {
			return nil, errors.New("ent: ListingSelect.Strings is not achievable when selecting more than 1 field")
		}
		var v []string
		if err := ls.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// StringsX is like Strings, but panics if an error occurs.
	func (ls *ListingSelect) StringsX(ctx context.Context) []string {
		v, err := ls.Strings(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// String returns a single string from a selector. It is only allowed when selecting one field.
	func (ls *ListingSelect) String(ctx context.Context) (_ string, err error) {
		var v []string
		if v, err = ls.Strings(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ listing.Label}
		default:
			err = fmt.Errorf("ent: ListingSelect.Strings returned %d results when one was expected", len(v))
		}
		return
	}

	// StringX is like String, but panics if an error occurs.
	func (ls *ListingSelect) StringX(ctx context.Context) string {
		v, err := ls.String(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Ints returns list of ints from a selector. It is only allowed when selecting one field.
	func (ls *ListingSelect) Ints(ctx context.Context) ([]int, error) {
		if len(ls.fields) > 1 {
			return nil, errors.New("ent: ListingSelect.Ints is not achievable when selecting more than 1 field")
		}
		var v []int
		if err := ls.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// IntsX is like Ints, but panics if an error occurs.
	func (ls *ListingSelect) IntsX(ctx context.Context) []int {
		v, err := ls.Ints(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Int returns a single int from a selector. It is only allowed when selecting one field.
	func (ls *ListingSelect) Int(ctx context.Context) (_ int, err error) {
		var v []int
		if v, err = ls.Ints(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ listing.Label}
		default:
			err = fmt.Errorf("ent: ListingSelect.Ints returned %d results when one was expected", len(v))
		}
		return
	}

	// IntX is like Int, but panics if an error occurs.
	func (ls *ListingSelect) IntX(ctx context.Context) int {
		v, err := ls.Int(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
	func (ls *ListingSelect) Float64s(ctx context.Context) ([]float64, error) {
		if len(ls.fields) > 1 {
			return nil, errors.New("ent: ListingSelect.Float64s is not achievable when selecting more than 1 field")
		}
		var v []float64
		if err := ls.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// Float64sX is like Float64s, but panics if an error occurs.
	func (ls *ListingSelect) Float64sX(ctx context.Context) []float64 {
		v, err := ls.Float64s(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
	func (ls *ListingSelect) Float64(ctx context.Context) (_ float64, err error) {
		var v []float64
		if v, err = ls.Float64s(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ listing.Label}
		default:
			err = fmt.Errorf("ent: ListingSelect.Float64s returned %d results when one was expected", len(v))
		}
		return
	}

	// Float64X is like Float64, but panics if an error occurs.
	func (ls *ListingSelect) Float64X(ctx context.Context) float64 {
		v, err := ls.Float64(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Bools returns list of bools from a selector. It is only allowed when selecting one field.
	func (ls *ListingSelect) Bools(ctx context.Context) ([]bool, error) {
		if len(ls.fields) > 1 {
			return nil, errors.New("ent: ListingSelect.Bools is not achievable when selecting more than 1 field")
		}
		var v []bool
		if err := ls.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// BoolsX is like Bools, but panics if an error occurs.
	func (ls *ListingSelect) BoolsX(ctx context.Context) []bool {
		v, err := ls.Bools(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Bool returns a single bool from a selector. It is only allowed when selecting one field.
	func (ls *ListingSelect) Bool(ctx context.Context) (_ bool, err error) {
		var v []bool
		if v, err = ls.Bools(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ listing.Label}
		default:
			err = fmt.Errorf("ent: ListingSelect.Bools returned %d results when one was expected", len(v))
		}
		return
	}

	// BoolX is like Bool, but panics if an error occurs.
	func (ls *ListingSelect) BoolX(ctx context.Context) bool {
		v, err := ls.Bool(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}



	
	



func (ls *ListingSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ls.sql.Query()
	if err := ls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}



    






