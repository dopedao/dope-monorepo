



// Code generated by entc, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/schema/field"

)


import (
		"github.com/dopedao/dope-monorepo/packages/api/ent/syncstate"
)






// SyncStateUpdate is the builder for updating SyncState entities.
type SyncStateUpdate struct {
	config
	hooks []Hook
	mutation *SyncStateMutation
}

// Where appends a list predicates to the SyncStateUpdate builder.
func (ssu *SyncStateUpdate) Where(ps ...predicate.SyncState) *SyncStateUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}


	




	
	


	
	
	// SetStartBlock sets the "start_block" field.
	func (ssu *SyncStateUpdate) SetStartBlock(u uint64) *SyncStateUpdate {
			ssu.mutation.ResetStartBlock()
		ssu.mutation.SetStartBlock(u)
		return ssu
	}

	
	

	
		
		// AddStartBlock adds u to the "start_block" field.
		func (ssu *SyncStateUpdate) AddStartBlock(u int64) *SyncStateUpdate {
			ssu.mutation.AddStartBlock(u)
			return ssu
		}
	

	




// Mutation returns the SyncStateMutation object of the builder.
func (ssu *SyncStateUpdate) Mutation() *SyncStateMutation {
	return ssu.mutation
}





	








// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SyncStateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err error
		affected int
	)
	if len(ssu.hooks) == 0 {
		affected, err = ssu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SyncStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ssu.mutation = mutation
			affected, err = ssu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ssu.hooks) - 1; i >= 0; i-- {
			if ssu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SyncStateUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SyncStateUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SyncStateUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}


	














	
	






func (ssu *SyncStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table: syncstate.Table,
			Columns: syncstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: syncstate.FieldID,
			},
		},
	}
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
				if value, ok := ssu.mutation.StartBlock(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeUint64,
						Value: value,
						Column: syncstate.FieldStartBlock,
					})
				}
					if value, ok := ssu.mutation.AddedStartBlock(); ok {
						_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
							Type: field.TypeUint64,
							Value: value,
							Column: syncstate.FieldStartBlock,
						})
					}
		if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ syncstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}







// SyncStateUpdateOne is the builder for updating a single SyncState entity.
type SyncStateUpdateOne struct {
	config
	fields []string
	hooks []Hook
	mutation *SyncStateMutation

}


	




	
	


	
	
	// SetStartBlock sets the "start_block" field.
	func (ssuo *SyncStateUpdateOne) SetStartBlock(u uint64) *SyncStateUpdateOne {
			ssuo.mutation.ResetStartBlock()
		ssuo.mutation.SetStartBlock(u)
		return ssuo
	}

	
	

	
		
		// AddStartBlock adds u to the "start_block" field.
		func (ssuo *SyncStateUpdateOne) AddStartBlock(u int64) *SyncStateUpdateOne {
			ssuo.mutation.AddStartBlock(u)
			return ssuo
		}
	

	




// Mutation returns the SyncStateMutation object of the builder.
func (ssuo *SyncStateUpdateOne) Mutation() *SyncStateMutation {
	return ssuo.mutation
}






	








// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SyncStateUpdateOne) Select(field string, fields ...string) *SyncStateUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SyncState entity.
func (ssuo *SyncStateUpdateOne ) Save(ctx context.Context) (*SyncState, error) {
	var (
		err error
		node *SyncState
	)
	if len(ssuo.hooks) == 0 {
		node, err = ssuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SyncStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ssuo.mutation = mutation
			node, err = ssuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ssuo.hooks) - 1; i >= 0; i-- {
			if ssuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SyncStateUpdateOne) SaveX(ctx context.Context) *SyncState {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SyncStateUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SyncStateUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}


	














	
	






func (ssuo *SyncStateUpdateOne) sqlSave(ctx context.Context) (_node *SyncState, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table: syncstate.Table,
			Columns: syncstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: syncstate.FieldID,
			},
		},
	}
		id, ok := ssuo.mutation.ID()
		if !ok {
			return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SyncState.id" for update`)}
		}
		_spec.Node.ID.Value = id
		if fields := ssuo.fields; len(fields) > 0 {
			_spec.Node.Columns = make([]string, 0, len(fields))
			_spec.Node.Columns = append(_spec.Node.Columns, syncstate.FieldID)
			for _, f := range fields {
				if !syncstate.ValidColumn(f) {
					return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
				}
				if f != syncstate.FieldID {
					_spec.Node.Columns = append(_spec.Node.Columns, f)
				}
			}
		}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
				if value, ok := ssuo.mutation.StartBlock(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeUint64,
						Value: value,
						Column: syncstate.FieldStartBlock,
					})
				}
					if value, ok := ssuo.mutation.AddedStartBlock(); ok {
						_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
							Type: field.TypeUint64,
							Value: value,
							Column: syncstate.FieldStartBlock,
						})
					}
		_node = &SyncState{config: ssuo.config}
		_spec.Assign = _node.assignValues
		_spec.ScanValues = _node.scanValues
		if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ syncstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}



