// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
	"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDope   = "Dope"
	TypeItem   = "Item"
	TypeWallet = "Wallet"
)

// DopeMutation represents an operation that mutates the Dope nodes in the graph.
type DopeMutation struct {
	config
	op            Op
	typ           string
	id            *string
	claimed       *bool
	opened        *bool
	clearedFields map[string]struct{}
	wallet        *string
	clearedwallet bool
	items         map[string]struct{}
	removeditems  map[string]struct{}
	cleareditems  bool
	done          bool
	oldValue      func(context.Context) (*Dope, error)
	predicates    []predicate.Dope
}

var _ ent.Mutation = (*DopeMutation)(nil)

// dopeOption allows management of the mutation configuration using functional options.
type dopeOption func(*DopeMutation)

// newDopeMutation creates new mutation for the Dope entity.
func newDopeMutation(c config, op Op, opts ...dopeOption) *DopeMutation {
	m := &DopeMutation{
		config:        c,
		op:            op,
		typ:           TypeDope,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDopeID sets the ID field of the mutation.
func withDopeID(id string) dopeOption {
	return func(m *DopeMutation) {
		var (
			err   error
			once  sync.Once
			value *Dope
		)
		m.oldValue = func(ctx context.Context) (*Dope, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dope.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDope sets the old Dope of the mutation.
func withDope(node *Dope) dopeOption {
	return func(m *DopeMutation) {
		m.oldValue = func(context.Context) (*Dope, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DopeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DopeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Dope entities.
func (m *DopeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DopeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetClaimed sets the "claimed" field.
func (m *DopeMutation) SetClaimed(b bool) {
	m.claimed = &b
}

// Claimed returns the value of the "claimed" field in the mutation.
func (m *DopeMutation) Claimed() (r bool, exists bool) {
	v := m.claimed
	if v == nil {
		return
	}
	return *v, true
}

// OldClaimed returns the old "claimed" field's value of the Dope entity.
// If the Dope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DopeMutation) OldClaimed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClaimed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClaimed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClaimed: %w", err)
	}
	return oldValue.Claimed, nil
}

// ResetClaimed resets all changes to the "claimed" field.
func (m *DopeMutation) ResetClaimed() {
	m.claimed = nil
}

// SetOpened sets the "opened" field.
func (m *DopeMutation) SetOpened(b bool) {
	m.opened = &b
}

// Opened returns the value of the "opened" field in the mutation.
func (m *DopeMutation) Opened() (r bool, exists bool) {
	v := m.opened
	if v == nil {
		return
	}
	return *v, true
}

// OldOpened returns the old "opened" field's value of the Dope entity.
// If the Dope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DopeMutation) OldOpened(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOpened is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOpened requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpened: %w", err)
	}
	return oldValue.Opened, nil
}

// ResetOpened resets all changes to the "opened" field.
func (m *DopeMutation) ResetOpened() {
	m.opened = nil
}

// SetWalletID sets the "wallet" edge to the Wallet entity by id.
func (m *DopeMutation) SetWalletID(id string) {
	m.wallet = &id
}

// ClearWallet clears the "wallet" edge to the Wallet entity.
func (m *DopeMutation) ClearWallet() {
	m.clearedwallet = true
}

// WalletCleared reports if the "wallet" edge to the Wallet entity was cleared.
func (m *DopeMutation) WalletCleared() bool {
	return m.clearedwallet
}

// WalletID returns the "wallet" edge ID in the mutation.
func (m *DopeMutation) WalletID() (id string, exists bool) {
	if m.wallet != nil {
		return *m.wallet, true
	}
	return
}

// WalletIDs returns the "wallet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WalletID instead. It exists only for internal usage by the builders.
func (m *DopeMutation) WalletIDs() (ids []string) {
	if id := m.wallet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWallet resets all changes to the "wallet" edge.
func (m *DopeMutation) ResetWallet() {
	m.wallet = nil
	m.clearedwallet = false
}

// AddItemIDs adds the "items" edge to the Item entity by ids.
func (m *DopeMutation) AddItemIDs(ids ...string) {
	if m.items == nil {
		m.items = make(map[string]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the Item entity.
func (m *DopeMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the Item entity was cleared.
func (m *DopeMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the Item entity by IDs.
func (m *DopeMutation) RemoveItemIDs(ids ...string) {
	if m.removeditems == nil {
		m.removeditems = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the Item entity.
func (m *DopeMutation) RemovedItemsIDs() (ids []string) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *DopeMutation) ItemsIDs() (ids []string) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *DopeMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// Where appends a list predicates to the DopeMutation builder.
func (m *DopeMutation) Where(ps ...predicate.Dope) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DopeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Dope).
func (m *DopeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DopeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.claimed != nil {
		fields = append(fields, dope.FieldClaimed)
	}
	if m.opened != nil {
		fields = append(fields, dope.FieldOpened)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DopeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dope.FieldClaimed:
		return m.Claimed()
	case dope.FieldOpened:
		return m.Opened()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DopeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dope.FieldClaimed:
		return m.OldClaimed(ctx)
	case dope.FieldOpened:
		return m.OldOpened(ctx)
	}
	return nil, fmt.Errorf("unknown Dope field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DopeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dope.FieldClaimed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClaimed(v)
		return nil
	case dope.FieldOpened:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpened(v)
		return nil
	}
	return fmt.Errorf("unknown Dope field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DopeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DopeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DopeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dope numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DopeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DopeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DopeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dope nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DopeMutation) ResetField(name string) error {
	switch name {
	case dope.FieldClaimed:
		m.ResetClaimed()
		return nil
	case dope.FieldOpened:
		m.ResetOpened()
		return nil
	}
	return fmt.Errorf("unknown Dope field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DopeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.wallet != nil {
		edges = append(edges, dope.EdgeWallet)
	}
	if m.items != nil {
		edges = append(edges, dope.EdgeItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DopeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dope.EdgeWallet:
		if id := m.wallet; id != nil {
			return []ent.Value{*id}
		}
	case dope.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DopeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeditems != nil {
		edges = append(edges, dope.EdgeItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DopeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dope.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DopeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedwallet {
		edges = append(edges, dope.EdgeWallet)
	}
	if m.cleareditems {
		edges = append(edges, dope.EdgeItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DopeMutation) EdgeCleared(name string) bool {
	switch name {
	case dope.EdgeWallet:
		return m.clearedwallet
	case dope.EdgeItems:
		return m.cleareditems
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DopeMutation) ClearEdge(name string) error {
	switch name {
	case dope.EdgeWallet:
		m.ClearWallet()
		return nil
	}
	return fmt.Errorf("unknown Dope unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DopeMutation) ResetEdge(name string) error {
	switch name {
	case dope.EdgeWallet:
		m.ResetWallet()
		return nil
	case dope.EdgeItems:
		m.ResetItems()
		return nil
	}
	return fmt.Errorf("unknown Dope edge %s", name)
}

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op            Op
	typ           string
	id            *string
	_type         *item.Type
	name_prefix   *string
	name_suffix   *string
	name          *string
	suffix        *string
	augmented     *bool
	clearedFields map[string]struct{}
	dopes         map[string]struct{}
	removeddopes  map[string]struct{}
	cleareddopes  bool
	done          bool
	oldValue      func(context.Context) (*Item, error)
	predicates    []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id string) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Item entities.
func (m *ItemMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetType sets the "type" field.
func (m *ItemMutation) SetType(i item.Type) {
	m._type = &i
}

// GetType returns the value of the "type" field in the mutation.
func (m *ItemMutation) GetType() (r item.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldType(ctx context.Context) (v item.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ItemMutation) ResetType() {
	m._type = nil
}

// SetNamePrefix sets the "name_prefix" field.
func (m *ItemMutation) SetNamePrefix(s string) {
	m.name_prefix = &s
}

// NamePrefix returns the value of the "name_prefix" field in the mutation.
func (m *ItemMutation) NamePrefix() (r string, exists bool) {
	v := m.name_prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldNamePrefix returns the old "name_prefix" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldNamePrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNamePrefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNamePrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamePrefix: %w", err)
	}
	return oldValue.NamePrefix, nil
}

// ClearNamePrefix clears the value of the "name_prefix" field.
func (m *ItemMutation) ClearNamePrefix() {
	m.name_prefix = nil
	m.clearedFields[item.FieldNamePrefix] = struct{}{}
}

// NamePrefixCleared returns if the "name_prefix" field was cleared in this mutation.
func (m *ItemMutation) NamePrefixCleared() bool {
	_, ok := m.clearedFields[item.FieldNamePrefix]
	return ok
}

// ResetNamePrefix resets all changes to the "name_prefix" field.
func (m *ItemMutation) ResetNamePrefix() {
	m.name_prefix = nil
	delete(m.clearedFields, item.FieldNamePrefix)
}

// SetNameSuffix sets the "name_suffix" field.
func (m *ItemMutation) SetNameSuffix(s string) {
	m.name_suffix = &s
}

// NameSuffix returns the value of the "name_suffix" field in the mutation.
func (m *ItemMutation) NameSuffix() (r string, exists bool) {
	v := m.name_suffix
	if v == nil {
		return
	}
	return *v, true
}

// OldNameSuffix returns the old "name_suffix" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldNameSuffix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNameSuffix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNameSuffix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameSuffix: %w", err)
	}
	return oldValue.NameSuffix, nil
}

// ClearNameSuffix clears the value of the "name_suffix" field.
func (m *ItemMutation) ClearNameSuffix() {
	m.name_suffix = nil
	m.clearedFields[item.FieldNameSuffix] = struct{}{}
}

// NameSuffixCleared returns if the "name_suffix" field was cleared in this mutation.
func (m *ItemMutation) NameSuffixCleared() bool {
	_, ok := m.clearedFields[item.FieldNameSuffix]
	return ok
}

// ResetNameSuffix resets all changes to the "name_suffix" field.
func (m *ItemMutation) ResetNameSuffix() {
	m.name_suffix = nil
	delete(m.clearedFields, item.FieldNameSuffix)
}

// SetName sets the "name" field.
func (m *ItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ItemMutation) ResetName() {
	m.name = nil
}

// SetSuffix sets the "suffix" field.
func (m *ItemMutation) SetSuffix(s string) {
	m.suffix = &s
}

// Suffix returns the value of the "suffix" field in the mutation.
func (m *ItemMutation) Suffix() (r string, exists bool) {
	v := m.suffix
	if v == nil {
		return
	}
	return *v, true
}

// OldSuffix returns the old "suffix" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSuffix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSuffix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSuffix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuffix: %w", err)
	}
	return oldValue.Suffix, nil
}

// ClearSuffix clears the value of the "suffix" field.
func (m *ItemMutation) ClearSuffix() {
	m.suffix = nil
	m.clearedFields[item.FieldSuffix] = struct{}{}
}

// SuffixCleared returns if the "suffix" field was cleared in this mutation.
func (m *ItemMutation) SuffixCleared() bool {
	_, ok := m.clearedFields[item.FieldSuffix]
	return ok
}

// ResetSuffix resets all changes to the "suffix" field.
func (m *ItemMutation) ResetSuffix() {
	m.suffix = nil
	delete(m.clearedFields, item.FieldSuffix)
}

// SetAugmented sets the "augmented" field.
func (m *ItemMutation) SetAugmented(b bool) {
	m.augmented = &b
}

// Augmented returns the value of the "augmented" field in the mutation.
func (m *ItemMutation) Augmented() (r bool, exists bool) {
	v := m.augmented
	if v == nil {
		return
	}
	return *v, true
}

// OldAugmented returns the old "augmented" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldAugmented(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAugmented is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAugmented requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAugmented: %w", err)
	}
	return oldValue.Augmented, nil
}

// ClearAugmented clears the value of the "augmented" field.
func (m *ItemMutation) ClearAugmented() {
	m.augmented = nil
	m.clearedFields[item.FieldAugmented] = struct{}{}
}

// AugmentedCleared returns if the "augmented" field was cleared in this mutation.
func (m *ItemMutation) AugmentedCleared() bool {
	_, ok := m.clearedFields[item.FieldAugmented]
	return ok
}

// ResetAugmented resets all changes to the "augmented" field.
func (m *ItemMutation) ResetAugmented() {
	m.augmented = nil
	delete(m.clearedFields, item.FieldAugmented)
}

// AddDopeIDs adds the "dopes" edge to the Dope entity by ids.
func (m *ItemMutation) AddDopeIDs(ids ...string) {
	if m.dopes == nil {
		m.dopes = make(map[string]struct{})
	}
	for i := range ids {
		m.dopes[ids[i]] = struct{}{}
	}
}

// ClearDopes clears the "dopes" edge to the Dope entity.
func (m *ItemMutation) ClearDopes() {
	m.cleareddopes = true
}

// DopesCleared reports if the "dopes" edge to the Dope entity was cleared.
func (m *ItemMutation) DopesCleared() bool {
	return m.cleareddopes
}

// RemoveDopeIDs removes the "dopes" edge to the Dope entity by IDs.
func (m *ItemMutation) RemoveDopeIDs(ids ...string) {
	if m.removeddopes == nil {
		m.removeddopes = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.dopes, ids[i])
		m.removeddopes[ids[i]] = struct{}{}
	}
}

// RemovedDopes returns the removed IDs of the "dopes" edge to the Dope entity.
func (m *ItemMutation) RemovedDopesIDs() (ids []string) {
	for id := range m.removeddopes {
		ids = append(ids, id)
	}
	return
}

// DopesIDs returns the "dopes" edge IDs in the mutation.
func (m *ItemMutation) DopesIDs() (ids []string) {
	for id := range m.dopes {
		ids = append(ids, id)
	}
	return
}

// ResetDopes resets all changes to the "dopes" edge.
func (m *ItemMutation) ResetDopes() {
	m.dopes = nil
	m.cleareddopes = false
	m.removeddopes = nil
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._type != nil {
		fields = append(fields, item.FieldType)
	}
	if m.name_prefix != nil {
		fields = append(fields, item.FieldNamePrefix)
	}
	if m.name_suffix != nil {
		fields = append(fields, item.FieldNameSuffix)
	}
	if m.name != nil {
		fields = append(fields, item.FieldName)
	}
	if m.suffix != nil {
		fields = append(fields, item.FieldSuffix)
	}
	if m.augmented != nil {
		fields = append(fields, item.FieldAugmented)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldType:
		return m.GetType()
	case item.FieldNamePrefix:
		return m.NamePrefix()
	case item.FieldNameSuffix:
		return m.NameSuffix()
	case item.FieldName:
		return m.Name()
	case item.FieldSuffix:
		return m.Suffix()
	case item.FieldAugmented:
		return m.Augmented()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldType:
		return m.OldType(ctx)
	case item.FieldNamePrefix:
		return m.OldNamePrefix(ctx)
	case item.FieldNameSuffix:
		return m.OldNameSuffix(ctx)
	case item.FieldName:
		return m.OldName(ctx)
	case item.FieldSuffix:
		return m.OldSuffix(ctx)
	case item.FieldAugmented:
		return m.OldAugmented(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldType:
		v, ok := value.(item.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case item.FieldNamePrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamePrefix(v)
		return nil
	case item.FieldNameSuffix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameSuffix(v)
		return nil
	case item.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case item.FieldSuffix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuffix(v)
		return nil
	case item.FieldAugmented:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAugmented(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(item.FieldNamePrefix) {
		fields = append(fields, item.FieldNamePrefix)
	}
	if m.FieldCleared(item.FieldNameSuffix) {
		fields = append(fields, item.FieldNameSuffix)
	}
	if m.FieldCleared(item.FieldSuffix) {
		fields = append(fields, item.FieldSuffix)
	}
	if m.FieldCleared(item.FieldAugmented) {
		fields = append(fields, item.FieldAugmented)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	switch name {
	case item.FieldNamePrefix:
		m.ClearNamePrefix()
		return nil
	case item.FieldNameSuffix:
		m.ClearNameSuffix()
		return nil
	case item.FieldSuffix:
		m.ClearSuffix()
		return nil
	case item.FieldAugmented:
		m.ClearAugmented()
		return nil
	}
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldType:
		m.ResetType()
		return nil
	case item.FieldNamePrefix:
		m.ResetNamePrefix()
		return nil
	case item.FieldNameSuffix:
		m.ResetNameSuffix()
		return nil
	case item.FieldName:
		m.ResetName()
		return nil
	case item.FieldSuffix:
		m.ResetSuffix()
		return nil
	case item.FieldAugmented:
		m.ResetAugmented()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dopes != nil {
		edges = append(edges, item.EdgeDopes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeDopes:
		ids := make([]ent.Value, 0, len(m.dopes))
		for id := range m.dopes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddopes != nil {
		edges = append(edges, item.EdgeDopes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeDopes:
		ids := make([]ent.Value, 0, len(m.removeddopes))
		for id := range m.removeddopes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddopes {
		edges = append(edges, item.EdgeDopes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgeDopes:
		return m.cleareddopes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgeDopes:
		m.ResetDopes()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// WalletMutation represents an operation that mutates the Wallet nodes in the graph.
type WalletMutation struct {
	config
	op            Op
	typ           string
	id            *string
	paper         *schema.BigInt
	addpaper      *schema.BigInt
	clearedFields map[string]struct{}
	dopes         map[string]struct{}
	removeddopes  map[string]struct{}
	cleareddopes  bool
	done          bool
	oldValue      func(context.Context) (*Wallet, error)
	predicates    []predicate.Wallet
}

var _ ent.Mutation = (*WalletMutation)(nil)

// walletOption allows management of the mutation configuration using functional options.
type walletOption func(*WalletMutation)

// newWalletMutation creates new mutation for the Wallet entity.
func newWalletMutation(c config, op Op, opts ...walletOption) *WalletMutation {
	m := &WalletMutation{
		config:        c,
		op:            op,
		typ:           TypeWallet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWalletID sets the ID field of the mutation.
func withWalletID(id string) walletOption {
	return func(m *WalletMutation) {
		var (
			err   error
			once  sync.Once
			value *Wallet
		)
		m.oldValue = func(ctx context.Context) (*Wallet, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Wallet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWallet sets the old Wallet of the mutation.
func withWallet(node *Wallet) walletOption {
	return func(m *WalletMutation) {
		m.oldValue = func(context.Context) (*Wallet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WalletMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WalletMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Wallet entities.
func (m *WalletMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WalletMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPaper sets the "paper" field.
func (m *WalletMutation) SetPaper(si schema.BigInt) {
	m.paper = &si
	m.addpaper = nil
}

// Paper returns the value of the "paper" field in the mutation.
func (m *WalletMutation) Paper() (r schema.BigInt, exists bool) {
	v := m.paper
	if v == nil {
		return
	}
	return *v, true
}

// OldPaper returns the old "paper" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldPaper(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaper is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaper requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaper: %w", err)
	}
	return oldValue.Paper, nil
}

// AddPaper adds si to the "paper" field.
func (m *WalletMutation) AddPaper(si schema.BigInt) {
	if m.addpaper != nil {
		*m.addpaper = m.addpaper.Add(si)
	} else {
		m.addpaper = &si
	}
}

// AddedPaper returns the value that was added to the "paper" field in this mutation.
func (m *WalletMutation) AddedPaper() (r schema.BigInt, exists bool) {
	v := m.addpaper
	if v == nil {
		return
	}
	return *v, true
}

// ResetPaper resets all changes to the "paper" field.
func (m *WalletMutation) ResetPaper() {
	m.paper = nil
	m.addpaper = nil
}

// AddDopeIDs adds the "dopes" edge to the Dope entity by ids.
func (m *WalletMutation) AddDopeIDs(ids ...string) {
	if m.dopes == nil {
		m.dopes = make(map[string]struct{})
	}
	for i := range ids {
		m.dopes[ids[i]] = struct{}{}
	}
}

// ClearDopes clears the "dopes" edge to the Dope entity.
func (m *WalletMutation) ClearDopes() {
	m.cleareddopes = true
}

// DopesCleared reports if the "dopes" edge to the Dope entity was cleared.
func (m *WalletMutation) DopesCleared() bool {
	return m.cleareddopes
}

// RemoveDopeIDs removes the "dopes" edge to the Dope entity by IDs.
func (m *WalletMutation) RemoveDopeIDs(ids ...string) {
	if m.removeddopes == nil {
		m.removeddopes = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.dopes, ids[i])
		m.removeddopes[ids[i]] = struct{}{}
	}
}

// RemovedDopes returns the removed IDs of the "dopes" edge to the Dope entity.
func (m *WalletMutation) RemovedDopesIDs() (ids []string) {
	for id := range m.removeddopes {
		ids = append(ids, id)
	}
	return
}

// DopesIDs returns the "dopes" edge IDs in the mutation.
func (m *WalletMutation) DopesIDs() (ids []string) {
	for id := range m.dopes {
		ids = append(ids, id)
	}
	return
}

// ResetDopes resets all changes to the "dopes" edge.
func (m *WalletMutation) ResetDopes() {
	m.dopes = nil
	m.cleareddopes = false
	m.removeddopes = nil
}

// Where appends a list predicates to the WalletMutation builder.
func (m *WalletMutation) Where(ps ...predicate.Wallet) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WalletMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Wallet).
func (m *WalletMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WalletMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.paper != nil {
		fields = append(fields, wallet.FieldPaper)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WalletMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wallet.FieldPaper:
		return m.Paper()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WalletMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wallet.FieldPaper:
		return m.OldPaper(ctx)
	}
	return nil, fmt.Errorf("unknown Wallet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wallet.FieldPaper:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaper(v)
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WalletMutation) AddedFields() []string {
	var fields []string
	if m.addpaper != nil {
		fields = append(fields, wallet.FieldPaper)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WalletMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case wallet.FieldPaper:
		return m.AddedPaper()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) AddField(name string, value ent.Value) error {
	switch name {
	case wallet.FieldPaper:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaper(v)
		return nil
	}
	return fmt.Errorf("unknown Wallet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WalletMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WalletMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WalletMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Wallet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WalletMutation) ResetField(name string) error {
	switch name {
	case wallet.FieldPaper:
		m.ResetPaper()
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WalletMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dopes != nil {
		edges = append(edges, wallet.EdgeDopes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WalletMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case wallet.EdgeDopes:
		ids := make([]ent.Value, 0, len(m.dopes))
		for id := range m.dopes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WalletMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddopes != nil {
		edges = append(edges, wallet.EdgeDopes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WalletMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case wallet.EdgeDopes:
		ids := make([]ent.Value, 0, len(m.removeddopes))
		for id := range m.removeddopes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WalletMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddopes {
		edges = append(edges, wallet.EdgeDopes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WalletMutation) EdgeCleared(name string) bool {
	switch name {
	case wallet.EdgeDopes:
		return m.cleareddopes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WalletMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Wallet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WalletMutation) ResetEdge(name string) error {
	switch name {
	case wallet.EdgeDopes:
		m.ResetDopes()
		return nil
	}
	return fmt.Errorf("unknown Wallet edge %s", name)
}
