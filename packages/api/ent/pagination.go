// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    string `msgpack:"i"`
	Value Value  `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// DopeEdge is the edge representation of Dope.
type DopeEdge struct {
	Node   *Dope  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// DopeConnection is the connection containing edges to Dope.
type DopeConnection struct {
	Edges      []*DopeEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// DopePaginateOption enables pagination customization.
type DopePaginateOption func(*dopePager) error

// WithDopeOrder configures pagination ordering.
func WithDopeOrder(order *DopeOrder) DopePaginateOption {
	if order == nil {
		order = DefaultDopeOrder
	}
	o := *order
	return func(pager *dopePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDopeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDopeFilter configures pagination filter.
func WithDopeFilter(filter func(*DopeQuery) (*DopeQuery, error)) DopePaginateOption {
	return func(pager *dopePager) error {
		if filter == nil {
			return errors.New("DopeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dopePager struct {
	order  *DopeOrder
	filter func(*DopeQuery) (*DopeQuery, error)
}

func newDopePager(opts []DopePaginateOption) (*dopePager, error) {
	pager := &dopePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDopeOrder
	}
	return pager, nil
}

func (p *dopePager) applyFilter(query *DopeQuery) (*DopeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dopePager) toCursor(d *Dope) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *dopePager) applyCursors(query *DopeQuery, after, before *Cursor) *DopeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDopeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *dopePager) applyOrder(query *DopeQuery, reverse bool) *DopeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDopeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultDopeOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Dope.
func (d *DopeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DopePaginateOption,
) (*DopeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDopePager(opts)
	if err != nil {
		return nil, err
	}

	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}

	conn := &DopeConnection{Edges: []*DopeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := d.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := d.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	d = pager.applyCursors(d, after, before)
	d = pager.applyOrder(d, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		d = d.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		d = d.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := d.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Dope
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Dope {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Dope {
			return nodes[i]
		}
	}

	conn.Edges = make([]*DopeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &DopeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// DopeOrderField defines the ordering field of Dope.
type DopeOrderField struct {
	field    string
	toCursor func(*Dope) Cursor
}

// DopeOrder defines the ordering of Dope.
type DopeOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *DopeOrderField `json:"field"`
}

// DefaultDopeOrder is the default ordering of Dope.
var DefaultDopeOrder = &DopeOrder{
	Direction: OrderDirectionAsc,
	Field: &DopeOrderField{
		field: dope.FieldID,
		toCursor: func(d *Dope) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Dope into DopeEdge.
func (d *Dope) ToEdge(order *DopeOrder) *DopeEdge {
	if order == nil {
		order = DefaultDopeOrder
	}
	return &DopeEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// HustlerEdge is the edge representation of Hustler.
type HustlerEdge struct {
	Node   *Hustler `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// HustlerConnection is the connection containing edges to Hustler.
type HustlerConnection struct {
	Edges      []*HustlerEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// HustlerPaginateOption enables pagination customization.
type HustlerPaginateOption func(*hustlerPager) error

// WithHustlerOrder configures pagination ordering.
func WithHustlerOrder(order *HustlerOrder) HustlerPaginateOption {
	if order == nil {
		order = DefaultHustlerOrder
	}
	o := *order
	return func(pager *hustlerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHustlerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHustlerFilter configures pagination filter.
func WithHustlerFilter(filter func(*HustlerQuery) (*HustlerQuery, error)) HustlerPaginateOption {
	return func(pager *hustlerPager) error {
		if filter == nil {
			return errors.New("HustlerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type hustlerPager struct {
	order  *HustlerOrder
	filter func(*HustlerQuery) (*HustlerQuery, error)
}

func newHustlerPager(opts []HustlerPaginateOption) (*hustlerPager, error) {
	pager := &hustlerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHustlerOrder
	}
	return pager, nil
}

func (p *hustlerPager) applyFilter(query *HustlerQuery) (*HustlerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *hustlerPager) toCursor(h *Hustler) Cursor {
	return p.order.Field.toCursor(h)
}

func (p *hustlerPager) applyCursors(query *HustlerQuery, after, before *Cursor) *HustlerQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultHustlerOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *hustlerPager) applyOrder(query *HustlerQuery, reverse bool) *HustlerQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultHustlerOrder.Field {
		query = query.Order(direction.orderFunc(DefaultHustlerOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Hustler.
func (h *HustlerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HustlerPaginateOption,
) (*HustlerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHustlerPager(opts)
	if err != nil {
		return nil, err
	}

	if h, err = pager.applyFilter(h); err != nil {
		return nil, err
	}

	conn := &HustlerConnection{Edges: []*HustlerEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := h.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := h.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	h = pager.applyCursors(h, after, before)
	h = pager.applyOrder(h, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		h = h.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		h = h.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := h.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Hustler
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Hustler {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Hustler {
			return nodes[i]
		}
	}

	conn.Edges = make([]*HustlerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &HustlerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// HustlerOrderField defines the ordering field of Hustler.
type HustlerOrderField struct {
	field    string
	toCursor func(*Hustler) Cursor
}

// HustlerOrder defines the ordering of Hustler.
type HustlerOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *HustlerOrderField `json:"field"`
}

// DefaultHustlerOrder is the default ordering of Hustler.
var DefaultHustlerOrder = &HustlerOrder{
	Direction: OrderDirectionAsc,
	Field: &HustlerOrderField{
		field: hustler.FieldID,
		toCursor: func(h *Hustler) Cursor {
			return Cursor{ID: h.ID}
		},
	},
}

// ToEdge converts Hustler into HustlerEdge.
func (h *Hustler) ToEdge(order *HustlerOrder) *HustlerEdge {
	if order == nil {
		order = DefaultHustlerOrder
	}
	return &HustlerEdge{
		Node:   h,
		Cursor: order.Field.toCursor(h),
	}
}

// ItemEdge is the edge representation of Item.
type ItemEdge struct {
	Node   *Item  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ItemConnection is the connection containing edges to Item.
type ItemConnection struct {
	Edges      []*ItemEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// ItemPaginateOption enables pagination customization.
type ItemPaginateOption func(*itemPager) error

// WithItemOrder configures pagination ordering.
func WithItemOrder(order *ItemOrder) ItemPaginateOption {
	if order == nil {
		order = DefaultItemOrder
	}
	o := *order
	return func(pager *itemPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultItemOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithItemFilter configures pagination filter.
func WithItemFilter(filter func(*ItemQuery) (*ItemQuery, error)) ItemPaginateOption {
	return func(pager *itemPager) error {
		if filter == nil {
			return errors.New("ItemQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type itemPager struct {
	order  *ItemOrder
	filter func(*ItemQuery) (*ItemQuery, error)
}

func newItemPager(opts []ItemPaginateOption) (*itemPager, error) {
	pager := &itemPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultItemOrder
	}
	return pager, nil
}

func (p *itemPager) applyFilter(query *ItemQuery) (*ItemQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *itemPager) toCursor(i *Item) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *itemPager) applyCursors(query *ItemQuery, after, before *Cursor) *ItemQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultItemOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *itemPager) applyOrder(query *ItemQuery, reverse bool) *ItemQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultItemOrder.Field {
		query = query.Order(direction.orderFunc(DefaultItemOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Item.
func (i *ItemQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ItemPaginateOption,
) (*ItemConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newItemPager(opts)
	if err != nil {
		return nil, err
	}

	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}

	conn := &ItemConnection{Edges: []*ItemEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := i.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := i.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	i = pager.applyCursors(i, after, before)
	i = pager.applyOrder(i, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		i = i.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := i.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Item
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Item {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Item {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ItemEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ItemEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ItemOrderField defines the ordering field of Item.
type ItemOrderField struct {
	field    string
	toCursor func(*Item) Cursor
}

// ItemOrder defines the ordering of Item.
type ItemOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *ItemOrderField `json:"field"`
}

// DefaultItemOrder is the default ordering of Item.
var DefaultItemOrder = &ItemOrder{
	Direction: OrderDirectionAsc,
	Field: &ItemOrderField{
		field: item.FieldID,
		toCursor: func(i *Item) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}

// ToEdge converts Item into ItemEdge.
func (i *Item) ToEdge(order *ItemOrder) *ItemEdge {
	if order == nil {
		order = DefaultItemOrder
	}
	return &ItemEdge{
		Node:   i,
		Cursor: order.Field.toCursor(i),
	}
}

// WalletEdge is the edge representation of Wallet.
type WalletEdge struct {
	Node   *Wallet `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// WalletConnection is the connection containing edges to Wallet.
type WalletConnection struct {
	Edges      []*WalletEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

// WalletPaginateOption enables pagination customization.
type WalletPaginateOption func(*walletPager) error

// WithWalletOrder configures pagination ordering.
func WithWalletOrder(order *WalletOrder) WalletPaginateOption {
	if order == nil {
		order = DefaultWalletOrder
	}
	o := *order
	return func(pager *walletPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWalletOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWalletFilter configures pagination filter.
func WithWalletFilter(filter func(*WalletQuery) (*WalletQuery, error)) WalletPaginateOption {
	return func(pager *walletPager) error {
		if filter == nil {
			return errors.New("WalletQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type walletPager struct {
	order  *WalletOrder
	filter func(*WalletQuery) (*WalletQuery, error)
}

func newWalletPager(opts []WalletPaginateOption) (*walletPager, error) {
	pager := &walletPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWalletOrder
	}
	return pager, nil
}

func (p *walletPager) applyFilter(query *WalletQuery) (*WalletQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *walletPager) toCursor(w *Wallet) Cursor {
	return p.order.Field.toCursor(w)
}

func (p *walletPager) applyCursors(query *WalletQuery, after, before *Cursor) *WalletQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWalletOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *walletPager) applyOrder(query *WalletQuery, reverse bool) *WalletQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWalletOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWalletOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Wallet.
func (w *WalletQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WalletPaginateOption,
) (*WalletConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWalletPager(opts)
	if err != nil {
		return nil, err
	}

	if w, err = pager.applyFilter(w); err != nil {
		return nil, err
	}

	conn := &WalletConnection{Edges: []*WalletEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := w.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := w.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	w = pager.applyCursors(w, after, before)
	w = pager.applyOrder(w, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		w = w.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := w.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Wallet
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Wallet {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Wallet {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WalletEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WalletEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WalletOrderField defines the ordering field of Wallet.
type WalletOrderField struct {
	field    string
	toCursor func(*Wallet) Cursor
}

// WalletOrder defines the ordering of Wallet.
type WalletOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *WalletOrderField `json:"field"`
}

// DefaultWalletOrder is the default ordering of Wallet.
var DefaultWalletOrder = &WalletOrder{
	Direction: OrderDirectionAsc,
	Field: &WalletOrderField{
		field: wallet.FieldID,
		toCursor: func(w *Wallet) Cursor {
			return Cursor{ID: w.ID}
		},
	},
}

// ToEdge converts Wallet into WalletEdge.
func (w *Wallet) ToEdge(order *WalletOrder) *WalletEdge {
	if order == nil {
		order = DefaultWalletOrder
	}
	return &WalletEdge{
		Node:   w,
		Cursor: order.Field.toCursor(w),
	}
}
