




// Code generated by entc, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/schema/field"

)


import (
		"github.com/dopedao/dope-monorepo/packages/api/ent/search"
		"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
		"github.com/dopedao/dope-monorepo/packages/api/ent/item"
		"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
)





// SearchCreate is the builder for creating a Search entity.
type SearchCreate struct {
	config
	mutation *SearchMutation
	hooks []Hook
		conflict []sql.ConflictOption
}


	




	


	
	
	// SetType sets the "type" field.
	func (sc *SearchCreate) SetType(s search.Type) *SearchCreate {
		sc.mutation.SetType(s)
		return sc
	}

	
	

	

	

	
	
	// SetGreatness sets the "greatness" field.
	func (sc *SearchCreate) SetGreatness(i int) *SearchCreate {
		sc.mutation.SetGreatness(i)
		return sc
	}

	
	
		
		// SetNillableGreatness sets the "greatness" field if the given value is not nil.
		func (sc *SearchCreate) SetNillableGreatness(i *int) *SearchCreate {
			if i != nil {
				sc.SetGreatness(*i)
			}
			return sc
		}
	

	

	

	
	
	// SetClaimed sets the "claimed" field.
	func (sc *SearchCreate) SetClaimed(b bool) *SearchCreate {
		sc.mutation.SetClaimed(b)
		return sc
	}

	
	

	

	

	
	
	// SetOpened sets the "opened" field.
	func (sc *SearchCreate) SetOpened(b bool) *SearchCreate {
		sc.mutation.SetOpened(b)
		return sc
	}

	
	

	

	

	
	
	// SetSaleActive sets the "sale_active" field.
	func (sc *SearchCreate) SetSaleActive(b bool) *SearchCreate {
		sc.mutation.SetSaleActive(b)
		return sc
	}

	
	

	

	

	
	
	// SetSalePrice sets the "sale_price" field.
	func (sc *SearchCreate) SetSalePrice(si schema.BigInt) *SearchCreate {
		sc.mutation.SetSalePrice(si)
		return sc
	}

	
	
		
		// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
		func (sc *SearchCreate) SetNillableSalePrice(si *schema.BigInt) *SearchCreate {
			if si != nil {
				sc.SetSalePrice(*si)
			}
			return sc
		}
	

	

	

	
	
	// SetLastSalePrice sets the "last_sale_price" field.
	func (sc *SearchCreate) SetLastSalePrice(si schema.BigInt) *SearchCreate {
		sc.mutation.SetLastSalePrice(si)
		return sc
	}

	
	
		
		// SetNillableLastSalePrice sets the "last_sale_price" field if the given value is not nil.
		func (sc *SearchCreate) SetNillableLastSalePrice(si *schema.BigInt) *SearchCreate {
			if si != nil {
				sc.SetLastSalePrice(*si)
			}
			return sc
		}
	

	

	

	
	
	// SetID sets the "id" field.
	func (sc *SearchCreate) SetID(s string) *SearchCreate {
		sc.mutation.SetID(s)
		return sc
	}

	
	

	

	



	
	
	
	
		// SetDopeID sets the "dope" edge to the Dope entity by ID.
		func (sc *SearchCreate) SetDopeID(id string) *SearchCreate {
			sc.mutation.SetDopeID(id)
			return sc
		}
	
	
		
		// SetNillableDopeID sets the "dope" edge to the Dope entity by ID if the given value is not nil.
		func (sc *SearchCreate) SetNillableDopeID(id *string) *SearchCreate {
			if id != nil {
				sc = sc.SetDopeID(*id)
			}
			return sc
		}
	
	
	
	
	// SetDope sets the "dope" edge to the Dope entity.
	func (sc *SearchCreate) SetDope(d *Dope) *SearchCreate {
		return sc.SetDopeID(d.ID)
	}

	
	
	
	
		// SetItemID sets the "item" edge to the Item entity by ID.
		func (sc *SearchCreate) SetItemID(id string) *SearchCreate {
			sc.mutation.SetItemID(id)
			return sc
		}
	
	
		
		// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
		func (sc *SearchCreate) SetNillableItemID(id *string) *SearchCreate {
			if id != nil {
				sc = sc.SetItemID(*id)
			}
			return sc
		}
	
	
	
	
	// SetItem sets the "item" edge to the Item entity.
	func (sc *SearchCreate) SetItem(i *Item) *SearchCreate {
		return sc.SetItemID(i.ID)
	}

	
	
	
	
		// SetHustlerID sets the "hustler" edge to the Hustler entity by ID.
		func (sc *SearchCreate) SetHustlerID(id string) *SearchCreate {
			sc.mutation.SetHustlerID(id)
			return sc
		}
	
	
		
		// SetNillableHustlerID sets the "hustler" edge to the Hustler entity by ID if the given value is not nil.
		func (sc *SearchCreate) SetNillableHustlerID(id *string) *SearchCreate {
			if id != nil {
				sc = sc.SetHustlerID(*id)
			}
			return sc
		}
	
	
	
	
	// SetHustler sets the "hustler" edge to the Hustler entity.
	func (sc *SearchCreate) SetHustler(h *Hustler) *SearchCreate {
		return sc.SetHustlerID(h.ID)
	}


// Mutation returns the SearchMutation object of the builder.
func (sc *SearchCreate) Mutation() *SearchMutation {
	return sc.mutation
}




// Save creates the Search in the database.
func (sc *SearchCreate) Save(ctx context.Context) (*Search, error) {
	var (
		err error
		node *Search
	)
			sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SearchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx) ; err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SearchCreate) SaveX(ctx context.Context) *Search {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SearchCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SearchCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

	// defaults sets the default values of the builder before save.
	func (sc *SearchCreate) defaults() {
				if _, ok := sc.mutation.SalePrice(); !ok {
					v := search.DefaultSalePrice()
					sc.mutation.SetSalePrice(v)
				}
				if _, ok := sc.mutation.LastSalePrice(); !ok {
					v := search.DefaultLastSalePrice()
					sc.mutation.SetLastSalePrice(v)
				}
	}


// check runs all checks and user-defined validators on the builder.
func (sc *SearchCreate) check() error {
			if _, ok := sc.mutation.GetType(); !ok {
				return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Search.type"`)}
			}
			if v, ok := sc.mutation.GetType(); ok {
				if err := search.TypeValidator(v); err != nil {
					return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Search.type": %w`, err)}
				}
			}
			if _, ok := sc.mutation.Claimed(); !ok {
				return &ValidationError{Name: "claimed", err: errors.New(`ent: missing required field "Search.claimed"`)}
			}
			if _, ok := sc.mutation.Opened(); !ok {
				return &ValidationError{Name: "opened", err: errors.New(`ent: missing required field "Search.opened"`)}
			}
			if _, ok := sc.mutation.SaleActive(); !ok {
				return &ValidationError{Name: "sale_active", err: errors.New(`ent: missing required field "Search.sale_active"`)}
			}
			if _, ok := sc.mutation.SalePrice(); !ok {
				return &ValidationError{Name: "sale_price", err: errors.New(`ent: missing required field "Search.sale_price"`)}
			}
			if _, ok := sc.mutation.LastSalePrice(); !ok {
				return &ValidationError{Name: "last_sale_price", err: errors.New(`ent: missing required field "Search.last_sale_price"`)}
			}
	return nil
}


	
	




func (sc *SearchCreate) sqlSave(ctx context.Context) (*Search, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
		if _spec.ID.Value != nil {
				if id, ok := _spec.ID.Value.(string); ok {
					_node.ID = id
				} else {
					return nil, fmt.Errorf("unexpected Search.ID type: %T", _spec.ID.Value)
				}
		}
	return _node, nil
}

func (sc *SearchCreate) createSpec() (*Search, *sqlgraph.CreateSpec) {
	var (
		_node = &Search{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: search.Table,
			ID: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: search.FieldID,
			},
		}
	)
		_spec.OnConflict = sc.conflict
		if id, ok := sc.mutation.ID(); ok {
			_node.ID = id
			_spec.ID.Value = id
		}
		if value, ok := sc.mutation.GetType(); ok {
			_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
				Type: field.TypeEnum,
				Value: value,
				Column: search.FieldType,
			})
			_node.Type = value
		}
		if value, ok := sc.mutation.Greatness(); ok {
			_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
				Type: field.TypeInt,
				Value: value,
				Column: search.FieldGreatness,
			})
			_node.Greatness = value
		}
		if value, ok := sc.mutation.Claimed(); ok {
			_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
				Type: field.TypeBool,
				Value: value,
				Column: search.FieldClaimed,
			})
			_node.Claimed = value
		}
		if value, ok := sc.mutation.Opened(); ok {
			_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
				Type: field.TypeBool,
				Value: value,
				Column: search.FieldOpened,
			})
			_node.Opened = value
		}
		if value, ok := sc.mutation.SaleActive(); ok {
			_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
				Type: field.TypeBool,
				Value: value,
				Column: search.FieldSaleActive,
			})
			_node.SaleActive = value
		}
		if value, ok := sc.mutation.SalePrice(); ok {
			_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
				Type: field.TypeInt,
				Value: value,
				Column: search.FieldSalePrice,
			})
			_node.SalePrice = value
		}
		if value, ok := sc.mutation.LastSalePrice(); ok {
			_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
				Type: field.TypeInt,
				Value: value,
				Column: search.FieldLastSalePrice,
			})
			_node.LastSalePrice = value
		}
		if nodes := sc.mutation.DopeIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.DopeTable,
		Columns: []string{ search.DopeColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: dope.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
				_node.dope_index = &nodes[0]
			_spec.Edges = append(_spec.Edges, edge)
		}
		if nodes := sc.mutation.ItemIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.ItemTable,
		Columns: []string{ search.ItemColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: item.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
				_node.item_index = &nodes[0]
			_spec.Edges = append(_spec.Edges, edge)
		}
		if nodes := sc.mutation.HustlerIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.HustlerTable,
		Columns: []string{ search.HustlerColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: hustler.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
				_node.hustler_index = &nodes[0]
			_spec.Edges = append(_spec.Edges, edge)
		}
	return _node, _spec
}
	
		






// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Search.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SearchUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
//
func (sc *SearchCreate) OnConflict(opts ...sql.ConflictOption) *SearchUpsertOne {
	sc.conflict = opts
	return &SearchUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Search.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *SearchCreate) OnConflictColumns(columns ...string) *SearchUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SearchUpsertOne{
		create: sc,
	}
}

type (
	// SearchUpsertOne is the builder for "upsert"-ing
	//  one Search node.
	SearchUpsertOne struct {
		create *SearchCreate
	}

	// SearchUpsert is the "OnConflict" setter.
	SearchUpsert struct {
		*sql.UpdateSet
	}
)


	
	// SetType sets the "type" field.
	func (u *SearchUpsert) SetType(v search.Type) *SearchUpsert {
		u.Set(search.FieldType, v)
		return u
	}

	
	// UpdateType sets the "type" field to the value that was provided on create.
	func (u *SearchUpsert) UpdateType() *SearchUpsert {
		u.SetExcluded(search.FieldType)
		return u
	}

	

	

	
	// SetGreatness sets the "greatness" field.
	func (u *SearchUpsert) SetGreatness(v int) *SearchUpsert {
		u.Set(search.FieldGreatness, v)
		return u
	}

	
	// UpdateGreatness sets the "greatness" field to the value that was provided on create.
	func (u *SearchUpsert) UpdateGreatness() *SearchUpsert {
		u.SetExcluded(search.FieldGreatness)
		return u
	}

	
		
		// AddGreatness adds v to the "greatness" field.
		func (u *SearchUpsert) AddGreatness(v int) *SearchUpsert {
			u.Add(search.FieldGreatness, v)
			return u
		}
	

	
		
		// ClearGreatness clears the value of the "greatness" field.
		func (u *SearchUpsert) ClearGreatness() *SearchUpsert {
			u.SetNull(search.FieldGreatness)
			return u
		}
	

	
	// SetClaimed sets the "claimed" field.
	func (u *SearchUpsert) SetClaimed(v bool) *SearchUpsert {
		u.Set(search.FieldClaimed, v)
		return u
	}

	
	// UpdateClaimed sets the "claimed" field to the value that was provided on create.
	func (u *SearchUpsert) UpdateClaimed() *SearchUpsert {
		u.SetExcluded(search.FieldClaimed)
		return u
	}

	

	

	
	// SetOpened sets the "opened" field.
	func (u *SearchUpsert) SetOpened(v bool) *SearchUpsert {
		u.Set(search.FieldOpened, v)
		return u
	}

	
	// UpdateOpened sets the "opened" field to the value that was provided on create.
	func (u *SearchUpsert) UpdateOpened() *SearchUpsert {
		u.SetExcluded(search.FieldOpened)
		return u
	}

	

	

	
	// SetSaleActive sets the "sale_active" field.
	func (u *SearchUpsert) SetSaleActive(v bool) *SearchUpsert {
		u.Set(search.FieldSaleActive, v)
		return u
	}

	
	// UpdateSaleActive sets the "sale_active" field to the value that was provided on create.
	func (u *SearchUpsert) UpdateSaleActive() *SearchUpsert {
		u.SetExcluded(search.FieldSaleActive)
		return u
	}

	

	

	
	// SetSalePrice sets the "sale_price" field.
	func (u *SearchUpsert) SetSalePrice(v schema.BigInt) *SearchUpsert {
		u.Set(search.FieldSalePrice, v)
		return u
	}

	
	// UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
	func (u *SearchUpsert) UpdateSalePrice() *SearchUpsert {
		u.SetExcluded(search.FieldSalePrice)
		return u
	}

	
		
		// AddSalePrice adds v to the "sale_price" field.
		func (u *SearchUpsert) AddSalePrice(v schema.BigInt) *SearchUpsert {
			u.Add(search.FieldSalePrice, v)
			return u
		}
	

	

	
	// SetLastSalePrice sets the "last_sale_price" field.
	func (u *SearchUpsert) SetLastSalePrice(v schema.BigInt) *SearchUpsert {
		u.Set(search.FieldLastSalePrice, v)
		return u
	}

	
	// UpdateLastSalePrice sets the "last_sale_price" field to the value that was provided on create.
	func (u *SearchUpsert) UpdateLastSalePrice() *SearchUpsert {
		u.SetExcluded(search.FieldLastSalePrice)
		return u
	}

	
		
		// AddLastSalePrice adds v to the "last_sale_price" field.
		func (u *SearchUpsert) AddLastSalePrice(v schema.BigInt) *SearchUpsert {
			u.Add(search.FieldLastSalePrice, v)
			return u
		}
	

	



// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Search.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(search.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SearchUpsertOne) UpdateNewValues() *SearchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
		u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
				if _, exists := u.create.mutation.ID(); exists {
					s.SetIgnore(search.FieldID)
				}
				if _, exists := u.create.mutation.GetType(); exists {
					s.SetIgnore(search.FieldType)
				}
		}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Search.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SearchUpsertOne) Ignore() *SearchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SearchUpsertOne) DoNothing() *SearchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SearchCreate.OnConflict
// documentation for more info.
func (u *SearchUpsertOne) Update(set func(*SearchUpsert)) *SearchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SearchUpsert{UpdateSet: update})
	}))
	return u
}


	




    
    // SetType sets the "type" field.
	func (u *SearchUpsertOne) SetType(v search.Type) *SearchUpsertOne {
		return u.Update(func(s *SearchUpsert) {
			s.SetType(v)
		})
	}

	

    
    // UpdateType sets the "type" field to the value that was provided on create.
    func (u *SearchUpsertOne) UpdateType() *SearchUpsertOne {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateType()
        })
    }

    

    
    // SetGreatness sets the "greatness" field.
	func (u *SearchUpsertOne) SetGreatness(v int) *SearchUpsertOne {
		return u.Update(func(s *SearchUpsert) {
			s.SetGreatness(v)
		})
	}

	
		
		// AddGreatness adds v to the "greatness" field.
		func (u *SearchUpsertOne) AddGreatness(v int) *SearchUpsertOne {
			return u.Update(func(s *SearchUpsert) {
				s.AddGreatness(v)
			})
		}
	

    
    // UpdateGreatness sets the "greatness" field to the value that was provided on create.
    func (u *SearchUpsertOne) UpdateGreatness() *SearchUpsertOne {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateGreatness()
        })
    }

    
        
        // ClearGreatness clears the value of the "greatness" field.
        func (u *SearchUpsertOne) ClearGreatness() *SearchUpsertOne {
            return u.Update(func(s *SearchUpsert) {
                s.ClearGreatness()
            })
        }
    

    
    // SetClaimed sets the "claimed" field.
	func (u *SearchUpsertOne) SetClaimed(v bool) *SearchUpsertOne {
		return u.Update(func(s *SearchUpsert) {
			s.SetClaimed(v)
		})
	}

	

    
    // UpdateClaimed sets the "claimed" field to the value that was provided on create.
    func (u *SearchUpsertOne) UpdateClaimed() *SearchUpsertOne {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateClaimed()
        })
    }

    

    
    // SetOpened sets the "opened" field.
	func (u *SearchUpsertOne) SetOpened(v bool) *SearchUpsertOne {
		return u.Update(func(s *SearchUpsert) {
			s.SetOpened(v)
		})
	}

	

    
    // UpdateOpened sets the "opened" field to the value that was provided on create.
    func (u *SearchUpsertOne) UpdateOpened() *SearchUpsertOne {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateOpened()
        })
    }

    

    
    // SetSaleActive sets the "sale_active" field.
	func (u *SearchUpsertOne) SetSaleActive(v bool) *SearchUpsertOne {
		return u.Update(func(s *SearchUpsert) {
			s.SetSaleActive(v)
		})
	}

	

    
    // UpdateSaleActive sets the "sale_active" field to the value that was provided on create.
    func (u *SearchUpsertOne) UpdateSaleActive() *SearchUpsertOne {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateSaleActive()
        })
    }

    

    
    // SetSalePrice sets the "sale_price" field.
	func (u *SearchUpsertOne) SetSalePrice(v schema.BigInt) *SearchUpsertOne {
		return u.Update(func(s *SearchUpsert) {
			s.SetSalePrice(v)
		})
	}

	
		
		// AddSalePrice adds v to the "sale_price" field.
		func (u *SearchUpsertOne) AddSalePrice(v schema.BigInt) *SearchUpsertOne {
			return u.Update(func(s *SearchUpsert) {
				s.AddSalePrice(v)
			})
		}
	

    
    // UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
    func (u *SearchUpsertOne) UpdateSalePrice() *SearchUpsertOne {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateSalePrice()
        })
    }

    

    
    // SetLastSalePrice sets the "last_sale_price" field.
	func (u *SearchUpsertOne) SetLastSalePrice(v schema.BigInt) *SearchUpsertOne {
		return u.Update(func(s *SearchUpsert) {
			s.SetLastSalePrice(v)
		})
	}

	
		
		// AddLastSalePrice adds v to the "last_sale_price" field.
		func (u *SearchUpsertOne) AddLastSalePrice(v schema.BigInt) *SearchUpsertOne {
			return u.Update(func(s *SearchUpsert) {
				s.AddLastSalePrice(v)
			})
		}
	

    
    // UpdateLastSalePrice sets the "last_sale_price" field to the value that was provided on create.
    func (u *SearchUpsertOne) UpdateLastSalePrice() *SearchUpsertOne {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateLastSalePrice()
        })
    }

    




// Exec executes the query.
func (u *SearchUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SearchCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SearchUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SearchUpsertOne) ID(ctx context.Context) (id string, err error) {
		if u.create.driver.Dialect() == dialect.MySQL {
			// In case of "ON CONFLICT", there is no way to get back non-numeric ID
			// fields from the database since MySQL does not support the RETURNING clause.
			return id, errors.New("ent: SearchUpsertOne.ID is not supported by MySQL driver. Use SearchUpsertOne.Exec instead")
		}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}


// IDX is like ID, but panics if an error occurs.
func (u *SearchUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}
	








// SearchCreateBulk is the builder for creating many Search entities in bulk.
type SearchCreateBulk struct {
	config
	builders []*SearchCreate
		conflict []sql.ConflictOption
}




	
		



// Save creates the Search entities in the database.
func (scb *SearchCreateBulk) Save(ctx context.Context) ([]*Search, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Search, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
				builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SearchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
		spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SearchCreateBulk) SaveX(ctx context.Context) []*Search {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SearchCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SearchCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
	
		






// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Search.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SearchUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
//
func (scb *SearchCreateBulk) OnConflict(opts ...sql.ConflictOption) *SearchUpsertBulk {
	scb.conflict = opts
	return &SearchUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Search.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *SearchCreateBulk) OnConflictColumns(columns ...string) *SearchUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SearchUpsertBulk{
		create: scb,
	}
}

// SearchUpsertBulk is the builder for "upsert"-ing
// a bulk of Search nodes.
type SearchUpsertBulk struct {
	create *SearchCreateBulk
}


// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Search.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(search.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SearchUpsertBulk) UpdateNewValues() *SearchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
		u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
			for _, b := range u.create.builders {
					if _, exists := b.mutation.ID(); exists {
						s.SetIgnore(search.FieldID)
						return
					}
					if _, exists := b.mutation.GetType(); exists {
						s.SetIgnore(search.FieldType)
					}
			}
		}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Search.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SearchUpsertBulk) Ignore() *SearchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SearchUpsertBulk) DoNothing() *SearchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SearchCreateBulk.OnConflict
// documentation for more info.
func (u *SearchUpsertBulk) Update(set func(*SearchUpsert)) *SearchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SearchUpsert{UpdateSet: update})
	}))
	return u
}


	




    
    // SetType sets the "type" field.
	func (u *SearchUpsertBulk) SetType(v search.Type) *SearchUpsertBulk {
		return u.Update(func(s *SearchUpsert) {
			s.SetType(v)
		})
	}

	

    
    // UpdateType sets the "type" field to the value that was provided on create.
    func (u *SearchUpsertBulk) UpdateType() *SearchUpsertBulk {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateType()
        })
    }

    

    
    // SetGreatness sets the "greatness" field.
	func (u *SearchUpsertBulk) SetGreatness(v int) *SearchUpsertBulk {
		return u.Update(func(s *SearchUpsert) {
			s.SetGreatness(v)
		})
	}

	
		
		// AddGreatness adds v to the "greatness" field.
		func (u *SearchUpsertBulk) AddGreatness(v int) *SearchUpsertBulk {
			return u.Update(func(s *SearchUpsert) {
				s.AddGreatness(v)
			})
		}
	

    
    // UpdateGreatness sets the "greatness" field to the value that was provided on create.
    func (u *SearchUpsertBulk) UpdateGreatness() *SearchUpsertBulk {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateGreatness()
        })
    }

    
        
        // ClearGreatness clears the value of the "greatness" field.
        func (u *SearchUpsertBulk) ClearGreatness() *SearchUpsertBulk {
            return u.Update(func(s *SearchUpsert) {
                s.ClearGreatness()
            })
        }
    

    
    // SetClaimed sets the "claimed" field.
	func (u *SearchUpsertBulk) SetClaimed(v bool) *SearchUpsertBulk {
		return u.Update(func(s *SearchUpsert) {
			s.SetClaimed(v)
		})
	}

	

    
    // UpdateClaimed sets the "claimed" field to the value that was provided on create.
    func (u *SearchUpsertBulk) UpdateClaimed() *SearchUpsertBulk {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateClaimed()
        })
    }

    

    
    // SetOpened sets the "opened" field.
	func (u *SearchUpsertBulk) SetOpened(v bool) *SearchUpsertBulk {
		return u.Update(func(s *SearchUpsert) {
			s.SetOpened(v)
		})
	}

	

    
    // UpdateOpened sets the "opened" field to the value that was provided on create.
    func (u *SearchUpsertBulk) UpdateOpened() *SearchUpsertBulk {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateOpened()
        })
    }

    

    
    // SetSaleActive sets the "sale_active" field.
	func (u *SearchUpsertBulk) SetSaleActive(v bool) *SearchUpsertBulk {
		return u.Update(func(s *SearchUpsert) {
			s.SetSaleActive(v)
		})
	}

	

    
    // UpdateSaleActive sets the "sale_active" field to the value that was provided on create.
    func (u *SearchUpsertBulk) UpdateSaleActive() *SearchUpsertBulk {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateSaleActive()
        })
    }

    

    
    // SetSalePrice sets the "sale_price" field.
	func (u *SearchUpsertBulk) SetSalePrice(v schema.BigInt) *SearchUpsertBulk {
		return u.Update(func(s *SearchUpsert) {
			s.SetSalePrice(v)
		})
	}

	
		
		// AddSalePrice adds v to the "sale_price" field.
		func (u *SearchUpsertBulk) AddSalePrice(v schema.BigInt) *SearchUpsertBulk {
			return u.Update(func(s *SearchUpsert) {
				s.AddSalePrice(v)
			})
		}
	

    
    // UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
    func (u *SearchUpsertBulk) UpdateSalePrice() *SearchUpsertBulk {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateSalePrice()
        })
    }

    

    
    // SetLastSalePrice sets the "last_sale_price" field.
	func (u *SearchUpsertBulk) SetLastSalePrice(v schema.BigInt) *SearchUpsertBulk {
		return u.Update(func(s *SearchUpsert) {
			s.SetLastSalePrice(v)
		})
	}

	
		
		// AddLastSalePrice adds v to the "last_sale_price" field.
		func (u *SearchUpsertBulk) AddLastSalePrice(v schema.BigInt) *SearchUpsertBulk {
			return u.Update(func(s *SearchUpsert) {
				s.AddLastSalePrice(v)
			})
		}
	

    
    // UpdateLastSalePrice sets the "last_sale_price" field to the value that was provided on create.
    func (u *SearchUpsertBulk) UpdateLastSalePrice() *SearchUpsertBulk {
        return u.Update(func(s *SearchUpsert) {
            s.UpdateLastSalePrice()
        })
    }

    




// Exec executes the query.
func (u *SearchUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SearchCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SearchCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SearchUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
	


	

