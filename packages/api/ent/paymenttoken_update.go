// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/ent/asset"
	"github.com/dopedao/dope-monorepo/packages/api/ent/paymenttoken"
	"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
)

// PaymentTokenUpdate is the builder for updating PaymentToken entities.
type PaymentTokenUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentTokenMutation
}

// Where appends a list predicates to the PaymentTokenUpdate builder.
func (ptu *PaymentTokenUpdate) Where(ps ...predicate.PaymentToken) *PaymentTokenUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetAddress sets the "address" field.
func (ptu *PaymentTokenUpdate) SetAddress(s string) *PaymentTokenUpdate {
	ptu.mutation.SetAddress(s)
	return ptu
}

// SetType sets the "type" field.
func (ptu *PaymentTokenUpdate) SetType(s string) *PaymentTokenUpdate {
	ptu.mutation.SetType(s)
	return ptu
}

// SetSymbol sets the "symbol" field.
func (ptu *PaymentTokenUpdate) SetSymbol(s string) *PaymentTokenUpdate {
	ptu.mutation.SetSymbol(s)
	return ptu
}

// SetPrice sets the "price" field.
func (ptu *PaymentTokenUpdate) SetPrice(f float64) *PaymentTokenUpdate {
	ptu.mutation.ResetPrice()
	ptu.mutation.SetPrice(f)
	return ptu
}

// AddPrice adds f to the "price" field.
func (ptu *PaymentTokenUpdate) AddPrice(f float64) *PaymentTokenUpdate {
	ptu.mutation.AddPrice(f)
	return ptu
}

// AddAssetIDs adds the "asset" edge to the Asset entity by IDs.
func (ptu *PaymentTokenUpdate) AddAssetIDs(ids ...string) *PaymentTokenUpdate {
	ptu.mutation.AddAssetIDs(ids...)
	return ptu
}

// AddAsset adds the "asset" edges to the Asset entity.
func (ptu *PaymentTokenUpdate) AddAsset(a ...*Asset) *PaymentTokenUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ptu.AddAssetIDs(ids...)
}

// Mutation returns the PaymentTokenMutation object of the builder.
func (ptu *PaymentTokenUpdate) Mutation() *PaymentTokenMutation {
	return ptu.mutation
}

// ClearAsset clears all "asset" edges to the Asset entity.
func (ptu *PaymentTokenUpdate) ClearAsset() *PaymentTokenUpdate {
	ptu.mutation.ClearAsset()
	return ptu
}

// RemoveAssetIDs removes the "asset" edge to Asset entities by IDs.
func (ptu *PaymentTokenUpdate) RemoveAssetIDs(ids ...string) *PaymentTokenUpdate {
	ptu.mutation.RemoveAssetIDs(ids...)
	return ptu
}

// RemoveAsset removes "asset" edges to Asset entities.
func (ptu *PaymentTokenUpdate) RemoveAsset(a ...*Asset) *PaymentTokenUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ptu.RemoveAssetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PaymentTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ptu.hooks) == 0 {
		affected, err = ptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ptu.mutation = mutation
			affected, err = ptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ptu.hooks) - 1; i >= 0; i-- {
			if ptu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PaymentTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PaymentTokenUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PaymentTokenUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptu *PaymentTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymenttoken.Table,
			Columns: paymenttoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: paymenttoken.FieldID,
			},
		},
	}
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttoken.FieldAddress,
		})
	}
	if value, ok := ptu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttoken.FieldType,
		})
	}
	if value, ok := ptu.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttoken.FieldSymbol,
		})
	}
	if value, ok := ptu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymenttoken.FieldPrice,
		})
	}
	if value, ok := ptu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymenttoken.FieldPrice,
		})
	}
	if ptu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   paymenttoken.AssetTable,
			Columns: paymenttoken.AssetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedAssetIDs(); len(nodes) > 0 && !ptu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   paymenttoken.AssetTable,
			Columns: paymenttoken.AssetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   paymenttoken.AssetTable,
			Columns: paymenttoken.AssetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymenttoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PaymentTokenUpdateOne is the builder for updating a single PaymentToken entity.
type PaymentTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentTokenMutation
}

// SetAddress sets the "address" field.
func (ptuo *PaymentTokenUpdateOne) SetAddress(s string) *PaymentTokenUpdateOne {
	ptuo.mutation.SetAddress(s)
	return ptuo
}

// SetType sets the "type" field.
func (ptuo *PaymentTokenUpdateOne) SetType(s string) *PaymentTokenUpdateOne {
	ptuo.mutation.SetType(s)
	return ptuo
}

// SetSymbol sets the "symbol" field.
func (ptuo *PaymentTokenUpdateOne) SetSymbol(s string) *PaymentTokenUpdateOne {
	ptuo.mutation.SetSymbol(s)
	return ptuo
}

// SetPrice sets the "price" field.
func (ptuo *PaymentTokenUpdateOne) SetPrice(f float64) *PaymentTokenUpdateOne {
	ptuo.mutation.ResetPrice()
	ptuo.mutation.SetPrice(f)
	return ptuo
}

// AddPrice adds f to the "price" field.
func (ptuo *PaymentTokenUpdateOne) AddPrice(f float64) *PaymentTokenUpdateOne {
	ptuo.mutation.AddPrice(f)
	return ptuo
}

// AddAssetIDs adds the "asset" edge to the Asset entity by IDs.
func (ptuo *PaymentTokenUpdateOne) AddAssetIDs(ids ...string) *PaymentTokenUpdateOne {
	ptuo.mutation.AddAssetIDs(ids...)
	return ptuo
}

// AddAsset adds the "asset" edges to the Asset entity.
func (ptuo *PaymentTokenUpdateOne) AddAsset(a ...*Asset) *PaymentTokenUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ptuo.AddAssetIDs(ids...)
}

// Mutation returns the PaymentTokenMutation object of the builder.
func (ptuo *PaymentTokenUpdateOne) Mutation() *PaymentTokenMutation {
	return ptuo.mutation
}

// ClearAsset clears all "asset" edges to the Asset entity.
func (ptuo *PaymentTokenUpdateOne) ClearAsset() *PaymentTokenUpdateOne {
	ptuo.mutation.ClearAsset()
	return ptuo
}

// RemoveAssetIDs removes the "asset" edge to Asset entities by IDs.
func (ptuo *PaymentTokenUpdateOne) RemoveAssetIDs(ids ...string) *PaymentTokenUpdateOne {
	ptuo.mutation.RemoveAssetIDs(ids...)
	return ptuo
}

// RemoveAsset removes "asset" edges to Asset entities.
func (ptuo *PaymentTokenUpdateOne) RemoveAsset(a ...*Asset) *PaymentTokenUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ptuo.RemoveAssetIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PaymentTokenUpdateOne) Select(field string, fields ...string) *PaymentTokenUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PaymentToken entity.
func (ptuo *PaymentTokenUpdateOne) Save(ctx context.Context) (*PaymentToken, error) {
	var (
		err  error
		node *PaymentToken
	)
	if len(ptuo.hooks) == 0 {
		node, err = ptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ptuo.mutation = mutation
			node, err = ptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptuo.hooks) - 1; i >= 0; i-- {
			if ptuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PaymentTokenUpdateOne) SaveX(ctx context.Context) *PaymentToken {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PaymentTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PaymentTokenUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptuo *PaymentTokenUpdateOne) sqlSave(ctx context.Context) (_node *PaymentToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymenttoken.Table,
			Columns: paymenttoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: paymenttoken.FieldID,
			},
		},
	}
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymenttoken.FieldID)
		for _, f := range fields {
			if !paymenttoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymenttoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttoken.FieldAddress,
		})
	}
	if value, ok := ptuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttoken.FieldType,
		})
	}
	if value, ok := ptuo.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttoken.FieldSymbol,
		})
	}
	if value, ok := ptuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymenttoken.FieldPrice,
		})
	}
	if value, ok := ptuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymenttoken.FieldPrice,
		})
	}
	if ptuo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   paymenttoken.AssetTable,
			Columns: paymenttoken.AssetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedAssetIDs(); len(nodes) > 0 && !ptuo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   paymenttoken.AssetTable,
			Columns: paymenttoken.AssetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   paymenttoken.AssetTable,
			Columns: paymenttoken.AssetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentToken{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymenttoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
