// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/ent/asset"
	"github.com/dopedao/dope-monorepo/packages/api/ent/paymenttoken"
)

// PaymentTokenCreate is the builder for creating a PaymentToken entity.
type PaymentTokenCreate struct {
	config
	mutation *PaymentTokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAddress sets the "address" field.
func (ptc *PaymentTokenCreate) SetAddress(s string) *PaymentTokenCreate {
	ptc.mutation.SetAddress(s)
	return ptc
}

// SetType sets the "type" field.
func (ptc *PaymentTokenCreate) SetType(s string) *PaymentTokenCreate {
	ptc.mutation.SetType(s)
	return ptc
}

// SetSymbol sets the "symbol" field.
func (ptc *PaymentTokenCreate) SetSymbol(s string) *PaymentTokenCreate {
	ptc.mutation.SetSymbol(s)
	return ptc
}

// SetPrice sets the "price" field.
func (ptc *PaymentTokenCreate) SetPrice(f float64) *PaymentTokenCreate {
	ptc.mutation.SetPrice(f)
	return ptc
}

// SetID sets the "id" field.
func (ptc *PaymentTokenCreate) SetID(s string) *PaymentTokenCreate {
	ptc.mutation.SetID(s)
	return ptc
}

// AddAssetIDs adds the "asset" edge to the Asset entity by IDs.
func (ptc *PaymentTokenCreate) AddAssetIDs(ids ...string) *PaymentTokenCreate {
	ptc.mutation.AddAssetIDs(ids...)
	return ptc
}

// AddAsset adds the "asset" edges to the Asset entity.
func (ptc *PaymentTokenCreate) AddAsset(a ...*Asset) *PaymentTokenCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ptc.AddAssetIDs(ids...)
}

// Mutation returns the PaymentTokenMutation object of the builder.
func (ptc *PaymentTokenCreate) Mutation() *PaymentTokenMutation {
	return ptc.mutation
}

// Save creates the PaymentToken in the database.
func (ptc *PaymentTokenCreate) Save(ctx context.Context) (*PaymentToken, error) {
	var (
		err  error
		node *PaymentToken
	)
	if len(ptc.hooks) == 0 {
		if err = ptc.check(); err != nil {
			return nil, err
		}
		node, err = ptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptc.check(); err != nil {
				return nil, err
			}
			ptc.mutation = mutation
			if node, err = ptc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ptc.hooks) - 1; i >= 0; i-- {
			if ptc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PaymentTokenCreate) SaveX(ctx context.Context) *PaymentToken {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PaymentTokenCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PaymentTokenCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PaymentTokenCreate) check() error {
	if _, ok := ptc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "PaymentToken.address"`)}
	}
	if _, ok := ptc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PaymentToken.type"`)}
	}
	if _, ok := ptc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "PaymentToken.symbol"`)}
	}
	if _, ok := ptc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "PaymentToken.price"`)}
	}
	return nil
}

func (ptc *PaymentTokenCreate) sqlSave(ctx context.Context) (*PaymentToken, error) {
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PaymentToken.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (ptc *PaymentTokenCreate) createSpec() (*PaymentToken, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentToken{config: ptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: paymenttoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: paymenttoken.FieldID,
			},
		}
	)
	_spec.OnConflict = ptc.conflict
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttoken.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := ptc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttoken.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ptc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttoken.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := ptc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymenttoken.FieldPrice,
		})
		_node.Price = value
	}
	if nodes := ptc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   paymenttoken.AssetTable,
			Columns: paymenttoken.AssetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentToken.Create().
//		SetAddress(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentTokenUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
//
func (ptc *PaymentTokenCreate) OnConflict(opts ...sql.ConflictOption) *PaymentTokenUpsertOne {
	ptc.conflict = opts
	return &PaymentTokenUpsertOne{
		create: ptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptc *PaymentTokenCreate) OnConflictColumns(columns ...string) *PaymentTokenUpsertOne {
	ptc.conflict = append(ptc.conflict, sql.ConflictColumns(columns...))
	return &PaymentTokenUpsertOne{
		create: ptc,
	}
}

type (
	// PaymentTokenUpsertOne is the builder for "upsert"-ing
	//  one PaymentToken node.
	PaymentTokenUpsertOne struct {
		create *PaymentTokenCreate
	}

	// PaymentTokenUpsert is the "OnConflict" setter.
	PaymentTokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetAddress sets the "address" field.
func (u *PaymentTokenUpsert) SetAddress(v string) *PaymentTokenUpsert {
	u.Set(paymenttoken.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *PaymentTokenUpsert) UpdateAddress() *PaymentTokenUpsert {
	u.SetExcluded(paymenttoken.FieldAddress)
	return u
}

// SetType sets the "type" field.
func (u *PaymentTokenUpsert) SetType(v string) *PaymentTokenUpsert {
	u.Set(paymenttoken.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PaymentTokenUpsert) UpdateType() *PaymentTokenUpsert {
	u.SetExcluded(paymenttoken.FieldType)
	return u
}

// SetSymbol sets the "symbol" field.
func (u *PaymentTokenUpsert) SetSymbol(v string) *PaymentTokenUpsert {
	u.Set(paymenttoken.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *PaymentTokenUpsert) UpdateSymbol() *PaymentTokenUpsert {
	u.SetExcluded(paymenttoken.FieldSymbol)
	return u
}

// SetPrice sets the "price" field.
func (u *PaymentTokenUpsert) SetPrice(v float64) *PaymentTokenUpsert {
	u.Set(paymenttoken.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PaymentTokenUpsert) UpdatePrice() *PaymentTokenUpsert {
	u.SetExcluded(paymenttoken.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *PaymentTokenUpsert) AddPrice(v float64) *PaymentTokenUpsert {
	u.Add(paymenttoken.FieldPrice, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaymentToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymenttoken.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentTokenUpsertOne) UpdateNewValues() *PaymentTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(paymenttoken.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PaymentToken.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PaymentTokenUpsertOne) Ignore() *PaymentTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentTokenUpsertOne) DoNothing() *PaymentTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentTokenCreate.OnConflict
// documentation for more info.
func (u *PaymentTokenUpsertOne) Update(set func(*PaymentTokenUpsert)) *PaymentTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *PaymentTokenUpsertOne) SetAddress(v string) *PaymentTokenUpsertOne {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *PaymentTokenUpsertOne) UpdateAddress() *PaymentTokenUpsertOne {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.UpdateAddress()
	})
}

// SetType sets the "type" field.
func (u *PaymentTokenUpsertOne) SetType(v string) *PaymentTokenUpsertOne {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PaymentTokenUpsertOne) UpdateType() *PaymentTokenUpsertOne {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.UpdateType()
	})
}

// SetSymbol sets the "symbol" field.
func (u *PaymentTokenUpsertOne) SetSymbol(v string) *PaymentTokenUpsertOne {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *PaymentTokenUpsertOne) UpdateSymbol() *PaymentTokenUpsertOne {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.UpdateSymbol()
	})
}

// SetPrice sets the "price" field.
func (u *PaymentTokenUpsertOne) SetPrice(v float64) *PaymentTokenUpsertOne {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *PaymentTokenUpsertOne) AddPrice(v float64) *PaymentTokenUpsertOne {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PaymentTokenUpsertOne) UpdatePrice() *PaymentTokenUpsertOne {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.UpdatePrice()
	})
}

// Exec executes the query.
func (u *PaymentTokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentTokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentTokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentTokenUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PaymentTokenUpsertOne.ID is not supported by MySQL driver. Use PaymentTokenUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentTokenUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentTokenCreateBulk is the builder for creating many PaymentToken entities in bulk.
type PaymentTokenCreateBulk struct {
	config
	builders []*PaymentTokenCreate
	conflict []sql.ConflictOption
}

// Save creates the PaymentToken entities in the database.
func (ptcb *PaymentTokenCreateBulk) Save(ctx context.Context) ([]*PaymentToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PaymentToken, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PaymentTokenCreateBulk) SaveX(ctx context.Context) []*PaymentToken {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PaymentTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PaymentTokenCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentToken.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentTokenUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
//
func (ptcb *PaymentTokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentTokenUpsertBulk {
	ptcb.conflict = opts
	return &PaymentTokenUpsertBulk{
		create: ptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptcb *PaymentTokenCreateBulk) OnConflictColumns(columns ...string) *PaymentTokenUpsertBulk {
	ptcb.conflict = append(ptcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentTokenUpsertBulk{
		create: ptcb,
	}
}

// PaymentTokenUpsertBulk is the builder for "upsert"-ing
// a bulk of PaymentToken nodes.
type PaymentTokenUpsertBulk struct {
	create *PaymentTokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaymentToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymenttoken.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentTokenUpsertBulk) UpdateNewValues() *PaymentTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(paymenttoken.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentToken.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PaymentTokenUpsertBulk) Ignore() *PaymentTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentTokenUpsertBulk) DoNothing() *PaymentTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentTokenCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentTokenUpsertBulk) Update(set func(*PaymentTokenUpsert)) *PaymentTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *PaymentTokenUpsertBulk) SetAddress(v string) *PaymentTokenUpsertBulk {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *PaymentTokenUpsertBulk) UpdateAddress() *PaymentTokenUpsertBulk {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.UpdateAddress()
	})
}

// SetType sets the "type" field.
func (u *PaymentTokenUpsertBulk) SetType(v string) *PaymentTokenUpsertBulk {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PaymentTokenUpsertBulk) UpdateType() *PaymentTokenUpsertBulk {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.UpdateType()
	})
}

// SetSymbol sets the "symbol" field.
func (u *PaymentTokenUpsertBulk) SetSymbol(v string) *PaymentTokenUpsertBulk {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *PaymentTokenUpsertBulk) UpdateSymbol() *PaymentTokenUpsertBulk {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.UpdateSymbol()
	})
}

// SetPrice sets the "price" field.
func (u *PaymentTokenUpsertBulk) SetPrice(v float64) *PaymentTokenUpsertBulk {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *PaymentTokenUpsertBulk) AddPrice(v float64) *PaymentTokenUpsertBulk {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PaymentTokenUpsertBulk) UpdatePrice() *PaymentTokenUpsertBulk {
	return u.Update(func(s *PaymentTokenUpsert) {
		s.UpdatePrice()
	})
}

// Exec executes the query.
func (u *PaymentTokenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaymentTokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentTokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentTokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
