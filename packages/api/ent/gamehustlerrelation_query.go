// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/ent/gamehustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/gamehustlerrelation"
	"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
)

// GameHustlerRelationQuery is the builder for querying GameHustlerRelation entities.
type GameHustlerRelationQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GameHustlerRelation
	// eager-loading edges.
	withHustler *GameHustlerQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameHustlerRelationQuery builder.
func (ghrq *GameHustlerRelationQuery) Where(ps ...predicate.GameHustlerRelation) *GameHustlerRelationQuery {
	ghrq.predicates = append(ghrq.predicates, ps...)
	return ghrq
}

// Limit adds a limit step to the query.
func (ghrq *GameHustlerRelationQuery) Limit(limit int) *GameHustlerRelationQuery {
	ghrq.limit = &limit
	return ghrq
}

// Offset adds an offset step to the query.
func (ghrq *GameHustlerRelationQuery) Offset(offset int) *GameHustlerRelationQuery {
	ghrq.offset = &offset
	return ghrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ghrq *GameHustlerRelationQuery) Unique(unique bool) *GameHustlerRelationQuery {
	ghrq.unique = &unique
	return ghrq
}

// Order adds an order step to the query.
func (ghrq *GameHustlerRelationQuery) Order(o ...OrderFunc) *GameHustlerRelationQuery {
	ghrq.order = append(ghrq.order, o...)
	return ghrq
}

// QueryHustler chains the current query on the "hustler" edge.
func (ghrq *GameHustlerRelationQuery) QueryHustler() *GameHustlerQuery {
	query := &GameHustlerQuery{config: ghrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ghrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ghrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamehustlerrelation.Table, gamehustlerrelation.FieldID, selector),
			sqlgraph.To(gamehustler.Table, gamehustler.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gamehustlerrelation.HustlerTable, gamehustlerrelation.HustlerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ghrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameHustlerRelation entity from the query.
// Returns a *NotFoundError when no GameHustlerRelation was found.
func (ghrq *GameHustlerRelationQuery) First(ctx context.Context) (*GameHustlerRelation, error) {
	nodes, err := ghrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gamehustlerrelation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ghrq *GameHustlerRelationQuery) FirstX(ctx context.Context) *GameHustlerRelation {
	node, err := ghrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameHustlerRelation ID from the query.
// Returns a *NotFoundError when no GameHustlerRelation ID was found.
func (ghrq *GameHustlerRelationQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ghrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gamehustlerrelation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ghrq *GameHustlerRelationQuery) FirstIDX(ctx context.Context) string {
	id, err := ghrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameHustlerRelation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one GameHustlerRelation entity is not found.
// Returns a *NotFoundError when no GameHustlerRelation entities are found.
func (ghrq *GameHustlerRelationQuery) Only(ctx context.Context) (*GameHustlerRelation, error) {
	nodes, err := ghrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gamehustlerrelation.Label}
	default:
		return nil, &NotSingularError{gamehustlerrelation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ghrq *GameHustlerRelationQuery) OnlyX(ctx context.Context) *GameHustlerRelation {
	node, err := ghrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameHustlerRelation ID in the query.
// Returns a *NotSingularError when exactly one GameHustlerRelation ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ghrq *GameHustlerRelationQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ghrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gamehustlerrelation.Label}
	default:
		err = &NotSingularError{gamehustlerrelation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ghrq *GameHustlerRelationQuery) OnlyIDX(ctx context.Context) string {
	id, err := ghrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameHustlerRelations.
func (ghrq *GameHustlerRelationQuery) All(ctx context.Context) ([]*GameHustlerRelation, error) {
	if err := ghrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ghrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ghrq *GameHustlerRelationQuery) AllX(ctx context.Context) []*GameHustlerRelation {
	nodes, err := ghrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameHustlerRelation IDs.
func (ghrq *GameHustlerRelationQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := ghrq.Select(gamehustlerrelation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ghrq *GameHustlerRelationQuery) IDsX(ctx context.Context) []string {
	ids, err := ghrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ghrq *GameHustlerRelationQuery) Count(ctx context.Context) (int, error) {
	if err := ghrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ghrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ghrq *GameHustlerRelationQuery) CountX(ctx context.Context) int {
	count, err := ghrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ghrq *GameHustlerRelationQuery) Exist(ctx context.Context) (bool, error) {
	if err := ghrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ghrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ghrq *GameHustlerRelationQuery) ExistX(ctx context.Context) bool {
	exist, err := ghrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameHustlerRelationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ghrq *GameHustlerRelationQuery) Clone() *GameHustlerRelationQuery {
	if ghrq == nil {
		return nil
	}
	return &GameHustlerRelationQuery{
		config:      ghrq.config,
		limit:       ghrq.limit,
		offset:      ghrq.offset,
		order:       append([]OrderFunc{}, ghrq.order...),
		predicates:  append([]predicate.GameHustlerRelation{}, ghrq.predicates...),
		withHustler: ghrq.withHustler.Clone(),
		// clone intermediate query.
		sql:  ghrq.sql.Clone(),
		path: ghrq.path,
	}
}

// WithHustler tells the query-builder to eager-load the nodes that are connected to
// the "hustler" edge. The optional arguments are used to configure the query builder of the edge.
func (ghrq *GameHustlerRelationQuery) WithHustler(opts ...func(*GameHustlerQuery)) *GameHustlerRelationQuery {
	query := &GameHustlerQuery{config: ghrq.config}
	for _, opt := range opts {
		opt(query)
	}
	ghrq.withHustler = query
	return ghrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Citizen string `json:"citizen,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameHustlerRelation.Query().
//		GroupBy(gamehustlerrelation.FieldCitizen).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ghrq *GameHustlerRelationQuery) GroupBy(field string, fields ...string) *GameHustlerRelationGroupBy {
	group := &GameHustlerRelationGroupBy{config: ghrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ghrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ghrq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Citizen string `json:"citizen,omitempty"`
//	}
//
//	client.GameHustlerRelation.Query().
//		Select(gamehustlerrelation.FieldCitizen).
//		Scan(ctx, &v)
//
func (ghrq *GameHustlerRelationQuery) Select(fields ...string) *GameHustlerRelationSelect {
	ghrq.fields = append(ghrq.fields, fields...)
	return &GameHustlerRelationSelect{GameHustlerRelationQuery: ghrq}
}

func (ghrq *GameHustlerRelationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ghrq.fields {
		if !gamehustlerrelation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ghrq.path != nil {
		prev, err := ghrq.path(ctx)
		if err != nil {
			return err
		}
		ghrq.sql = prev
	}
	return nil
}

func (ghrq *GameHustlerRelationQuery) sqlAll(ctx context.Context) ([]*GameHustlerRelation, error) {
	var (
		nodes       = []*GameHustlerRelation{}
		withFKs     = ghrq.withFKs
		_spec       = ghrq.querySpec()
		loadedTypes = [1]bool{
			ghrq.withHustler != nil,
		}
	)
	if ghrq.withHustler != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gamehustlerrelation.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &GameHustlerRelation{config: ghrq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ghrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ghrq.withHustler; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*GameHustlerRelation)
		for i := range nodes {
			if nodes[i].game_hustler_relations == nil {
				continue
			}
			fk := *nodes[i].game_hustler_relations
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(gamehustler.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "game_hustler_relations" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Hustler = n
			}
		}
	}

	return nodes, nil
}

func (ghrq *GameHustlerRelationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ghrq.querySpec()
	_spec.Node.Columns = ghrq.fields
	if len(ghrq.fields) > 0 {
		_spec.Unique = ghrq.unique != nil && *ghrq.unique
	}
	return sqlgraph.CountNodes(ctx, ghrq.driver, _spec)
}

func (ghrq *GameHustlerRelationQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ghrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ghrq *GameHustlerRelationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gamehustlerrelation.Table,
			Columns: gamehustlerrelation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: gamehustlerrelation.FieldID,
			},
		},
		From:   ghrq.sql,
		Unique: true,
	}
	if unique := ghrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ghrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamehustlerrelation.FieldID)
		for i := range fields {
			if fields[i] != gamehustlerrelation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ghrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ghrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ghrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ghrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ghrq *GameHustlerRelationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ghrq.driver.Dialect())
	t1 := builder.Table(gamehustlerrelation.Table)
	columns := ghrq.fields
	if len(columns) == 0 {
		columns = gamehustlerrelation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ghrq.sql != nil {
		selector = ghrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ghrq.unique != nil && *ghrq.unique {
		selector.Distinct()
	}
	for _, p := range ghrq.predicates {
		p(selector)
	}
	for _, p := range ghrq.order {
		p(selector)
	}
	if offset := ghrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ghrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameHustlerRelationGroupBy is the group-by builder for GameHustlerRelation entities.
type GameHustlerRelationGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ghrgb *GameHustlerRelationGroupBy) Aggregate(fns ...AggregateFunc) *GameHustlerRelationGroupBy {
	ghrgb.fns = append(ghrgb.fns, fns...)
	return ghrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ghrgb *GameHustlerRelationGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ghrgb.path(ctx)
	if err != nil {
		return err
	}
	ghrgb.sql = query
	return ghrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ghrgb *GameHustlerRelationGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ghrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghrgb *GameHustlerRelationGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ghrgb.fields) > 1 {
		return nil, errors.New("ent: GameHustlerRelationGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ghrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ghrgb *GameHustlerRelationGroupBy) StringsX(ctx context.Context) []string {
	v, err := ghrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghrgb *GameHustlerRelationGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ghrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustlerrelation.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerRelationGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ghrgb *GameHustlerRelationGroupBy) StringX(ctx context.Context) string {
	v, err := ghrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghrgb *GameHustlerRelationGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ghrgb.fields) > 1 {
		return nil, errors.New("ent: GameHustlerRelationGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ghrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ghrgb *GameHustlerRelationGroupBy) IntsX(ctx context.Context) []int {
	v, err := ghrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghrgb *GameHustlerRelationGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ghrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustlerrelation.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerRelationGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ghrgb *GameHustlerRelationGroupBy) IntX(ctx context.Context) int {
	v, err := ghrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghrgb *GameHustlerRelationGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ghrgb.fields) > 1 {
		return nil, errors.New("ent: GameHustlerRelationGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ghrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ghrgb *GameHustlerRelationGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ghrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghrgb *GameHustlerRelationGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ghrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustlerrelation.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerRelationGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ghrgb *GameHustlerRelationGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ghrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghrgb *GameHustlerRelationGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ghrgb.fields) > 1 {
		return nil, errors.New("ent: GameHustlerRelationGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ghrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ghrgb *GameHustlerRelationGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ghrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghrgb *GameHustlerRelationGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ghrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustlerrelation.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerRelationGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ghrgb *GameHustlerRelationGroupBy) BoolX(ctx context.Context) bool {
	v, err := ghrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ghrgb *GameHustlerRelationGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ghrgb.fields {
		if !gamehustlerrelation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ghrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ghrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ghrgb *GameHustlerRelationGroupBy) sqlQuery() *sql.Selector {
	selector := ghrgb.sql.Select()
	aggregation := make([]string, 0, len(ghrgb.fns))
	for _, fn := range ghrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ghrgb.fields)+len(ghrgb.fns))
		for _, f := range ghrgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ghrgb.fields...)...)
}

// GameHustlerRelationSelect is the builder for selecting fields of GameHustlerRelation entities.
type GameHustlerRelationSelect struct {
	*GameHustlerRelationQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ghrs *GameHustlerRelationSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ghrs.prepareQuery(ctx); err != nil {
		return err
	}
	ghrs.sql = ghrs.GameHustlerRelationQuery.sqlQuery(ctx)
	return ghrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ghrs *GameHustlerRelationSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ghrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ghrs *GameHustlerRelationSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ghrs.fields) > 1 {
		return nil, errors.New("ent: GameHustlerRelationSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ghrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ghrs *GameHustlerRelationSelect) StringsX(ctx context.Context) []string {
	v, err := ghrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ghrs *GameHustlerRelationSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ghrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustlerrelation.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerRelationSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ghrs *GameHustlerRelationSelect) StringX(ctx context.Context) string {
	v, err := ghrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ghrs *GameHustlerRelationSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ghrs.fields) > 1 {
		return nil, errors.New("ent: GameHustlerRelationSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ghrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ghrs *GameHustlerRelationSelect) IntsX(ctx context.Context) []int {
	v, err := ghrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ghrs *GameHustlerRelationSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ghrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustlerrelation.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerRelationSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ghrs *GameHustlerRelationSelect) IntX(ctx context.Context) int {
	v, err := ghrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ghrs *GameHustlerRelationSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ghrs.fields) > 1 {
		return nil, errors.New("ent: GameHustlerRelationSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ghrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ghrs *GameHustlerRelationSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ghrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ghrs *GameHustlerRelationSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ghrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustlerrelation.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerRelationSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ghrs *GameHustlerRelationSelect) Float64X(ctx context.Context) float64 {
	v, err := ghrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ghrs *GameHustlerRelationSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ghrs.fields) > 1 {
		return nil, errors.New("ent: GameHustlerRelationSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ghrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ghrs *GameHustlerRelationSelect) BoolsX(ctx context.Context) []bool {
	v, err := ghrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ghrs *GameHustlerRelationSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ghrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustlerrelation.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerRelationSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ghrs *GameHustlerRelationSelect) BoolX(ctx context.Context) bool {
	v, err := ghrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ghrs *GameHustlerRelationSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ghrs.sql.Query()
	if err := ghrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
