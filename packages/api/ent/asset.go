// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/ent/asset"
	"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
)

// Asset is the model entity for the Asset schema.
type Asset struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Type holds the value of the "type" field.
	Type asset.Type `json:"type,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount schema.BigInt `json:"amount,omitempty"`
	// AssetId holds the value of the "assetId" field.
	AssetId schema.BigInt `json:"assetId,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetQuery when eager-loading is set.
	Edges           AssetEdges `json:"edges"`
	listing_inputs  *string
	listing_outputs *string
}

// AssetEdges holds the relations/edges for other nodes in the graph.
type AssetEdges struct {
	// PaymentToken holds the value of the paymentToken edge.
	PaymentToken []*PaymentToken `json:"paymentToken,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PaymentTokenOrErr returns the PaymentToken value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) PaymentTokenOrErr() ([]*PaymentToken, error) {
	if e.loadedTypes[0] {
		return e.PaymentToken, nil
	}
	return nil, &NotLoadedError{edge: "paymentToken"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Asset) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asset.FieldAmount, asset.FieldAssetId:
			values[i] = new(schema.BigInt)
		case asset.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case asset.FieldID, asset.FieldAddress, asset.FieldType, asset.FieldSymbol:
			values[i] = new(sql.NullString)
		case asset.ForeignKeys[0]: // listing_inputs
			values[i] = new(sql.NullString)
		case asset.ForeignKeys[1]: // listing_outputs
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Asset", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Asset fields.
func (a *Asset) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asset.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case asset.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				a.Address = value.String
			}
		case asset.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = asset.Type(value.String)
			}
		case asset.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				a.Symbol = value.String
			}
		case asset.FieldAmount:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				a.Amount = *value
			}
		case asset.FieldAssetId:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field assetId", values[i])
			} else if value != nil {
				a.AssetId = *value
			}
		case asset.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				a.Price = value.Float64
			}
		case asset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field listing_inputs", values[i])
			} else if value.Valid {
				a.listing_inputs = new(string)
				*a.listing_inputs = value.String
			}
		case asset.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field listing_outputs", values[i])
			} else if value.Valid {
				a.listing_outputs = new(string)
				*a.listing_outputs = value.String
			}
		}
	}
	return nil
}

// QueryPaymentToken queries the "paymentToken" edge of the Asset entity.
func (a *Asset) QueryPaymentToken() *PaymentTokenQuery {
	return (&AssetClient{config: a.config}).QueryPaymentToken(a)
}

// Update returns a builder for updating this Asset.
// Note that you need to call Asset.Unwrap() before calling this method if this Asset
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Asset) Update() *AssetUpdateOne {
	return (&AssetClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Asset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Asset) Unwrap() *Asset {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Asset is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Asset) String() string {
	var builder strings.Builder
	builder.WriteString("Asset(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", address=")
	builder.WriteString(a.Address)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", symbol=")
	builder.WriteString(a.Symbol)
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", a.Amount))
	builder.WriteString(", assetId=")
	builder.WriteString(fmt.Sprintf("%v", a.AssetId))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", a.Price))
	builder.WriteByte(')')
	return builder.String()
}

// Assets is a parsable slice of Asset.
type Assets []*Asset

func (a Assets) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
