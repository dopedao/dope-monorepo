// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"
)

// DopeCreate is the builder for creating a Dope entity.
type DopeCreate struct {
	config
	mutation *DopeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetClothes sets the "clothes" field.
func (dc *DopeCreate) SetClothes(s string) *DopeCreate {
	dc.mutation.SetClothes(s)
	return dc
}

// SetFoot sets the "foot" field.
func (dc *DopeCreate) SetFoot(s string) *DopeCreate {
	dc.mutation.SetFoot(s)
	return dc
}

// SetHand sets the "hand" field.
func (dc *DopeCreate) SetHand(s string) *DopeCreate {
	dc.mutation.SetHand(s)
	return dc
}

// SetNeck sets the "neck" field.
func (dc *DopeCreate) SetNeck(s string) *DopeCreate {
	dc.mutation.SetNeck(s)
	return dc
}

// SetRing sets the "ring" field.
func (dc *DopeCreate) SetRing(s string) *DopeCreate {
	dc.mutation.SetRing(s)
	return dc
}

// SetWaist sets the "waist" field.
func (dc *DopeCreate) SetWaist(s string) *DopeCreate {
	dc.mutation.SetWaist(s)
	return dc
}

// SetWeapon sets the "weapon" field.
func (dc *DopeCreate) SetWeapon(s string) *DopeCreate {
	dc.mutation.SetWeapon(s)
	return dc
}

// SetDrugs sets the "drugs" field.
func (dc *DopeCreate) SetDrugs(s string) *DopeCreate {
	dc.mutation.SetDrugs(s)
	return dc
}

// SetVehicle sets the "vehicle" field.
func (dc *DopeCreate) SetVehicle(s string) *DopeCreate {
	dc.mutation.SetVehicle(s)
	return dc
}

// SetClaimed sets the "claimed" field.
func (dc *DopeCreate) SetClaimed(b bool) *DopeCreate {
	dc.mutation.SetClaimed(b)
	return dc
}

// SetOpened sets the "opened" field.
func (dc *DopeCreate) SetOpened(b bool) *DopeCreate {
	dc.mutation.SetOpened(b)
	return dc
}

// SetID sets the "id" field.
func (dc *DopeCreate) SetID(s string) *DopeCreate {
	dc.mutation.SetID(s)
	return dc
}

// SetWalletID sets the "wallet" edge to the Wallet entity by ID.
func (dc *DopeCreate) SetWalletID(id string) *DopeCreate {
	dc.mutation.SetWalletID(id)
	return dc
}

// SetNillableWalletID sets the "wallet" edge to the Wallet entity by ID if the given value is not nil.
func (dc *DopeCreate) SetNillableWalletID(id *string) *DopeCreate {
	if id != nil {
		dc = dc.SetWalletID(*id)
	}
	return dc
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (dc *DopeCreate) SetWallet(w *Wallet) *DopeCreate {
	return dc.SetWalletID(w.ID)
}

// Mutation returns the DopeMutation object of the builder.
func (dc *DopeCreate) Mutation() *DopeMutation {
	return dc.mutation
}

// Save creates the Dope in the database.
func (dc *DopeCreate) Save(ctx context.Context) (*Dope, error) {
	var (
		err  error
		node *Dope
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DopeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DopeCreate) SaveX(ctx context.Context) *Dope {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DopeCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DopeCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DopeCreate) check() error {
	if _, ok := dc.mutation.Clothes(); !ok {
		return &ValidationError{Name: "clothes", err: errors.New(`ent: missing required field "clothes"`)}
	}
	if v, ok := dc.mutation.Clothes(); ok {
		if err := dope.ClothesValidator(v); err != nil {
			return &ValidationError{Name: "clothes", err: fmt.Errorf(`ent: validator failed for field "clothes": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Foot(); !ok {
		return &ValidationError{Name: "foot", err: errors.New(`ent: missing required field "foot"`)}
	}
	if v, ok := dc.mutation.Foot(); ok {
		if err := dope.FootValidator(v); err != nil {
			return &ValidationError{Name: "foot", err: fmt.Errorf(`ent: validator failed for field "foot": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Hand(); !ok {
		return &ValidationError{Name: "hand", err: errors.New(`ent: missing required field "hand"`)}
	}
	if v, ok := dc.mutation.Hand(); ok {
		if err := dope.HandValidator(v); err != nil {
			return &ValidationError{Name: "hand", err: fmt.Errorf(`ent: validator failed for field "hand": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Neck(); !ok {
		return &ValidationError{Name: "neck", err: errors.New(`ent: missing required field "neck"`)}
	}
	if v, ok := dc.mutation.Neck(); ok {
		if err := dope.NeckValidator(v); err != nil {
			return &ValidationError{Name: "neck", err: fmt.Errorf(`ent: validator failed for field "neck": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Ring(); !ok {
		return &ValidationError{Name: "ring", err: errors.New(`ent: missing required field "ring"`)}
	}
	if v, ok := dc.mutation.Ring(); ok {
		if err := dope.RingValidator(v); err != nil {
			return &ValidationError{Name: "ring", err: fmt.Errorf(`ent: validator failed for field "ring": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Waist(); !ok {
		return &ValidationError{Name: "waist", err: errors.New(`ent: missing required field "waist"`)}
	}
	if v, ok := dc.mutation.Waist(); ok {
		if err := dope.WaistValidator(v); err != nil {
			return &ValidationError{Name: "waist", err: fmt.Errorf(`ent: validator failed for field "waist": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Weapon(); !ok {
		return &ValidationError{Name: "weapon", err: errors.New(`ent: missing required field "weapon"`)}
	}
	if v, ok := dc.mutation.Weapon(); ok {
		if err := dope.WeaponValidator(v); err != nil {
			return &ValidationError{Name: "weapon", err: fmt.Errorf(`ent: validator failed for field "weapon": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Drugs(); !ok {
		return &ValidationError{Name: "drugs", err: errors.New(`ent: missing required field "drugs"`)}
	}
	if v, ok := dc.mutation.Drugs(); ok {
		if err := dope.DrugsValidator(v); err != nil {
			return &ValidationError{Name: "drugs", err: fmt.Errorf(`ent: validator failed for field "drugs": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Vehicle(); !ok {
		return &ValidationError{Name: "vehicle", err: errors.New(`ent: missing required field "vehicle"`)}
	}
	if v, ok := dc.mutation.Vehicle(); ok {
		if err := dope.VehicleValidator(v); err != nil {
			return &ValidationError{Name: "vehicle", err: fmt.Errorf(`ent: validator failed for field "vehicle": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Claimed(); !ok {
		return &ValidationError{Name: "claimed", err: errors.New(`ent: missing required field "claimed"`)}
	}
	if _, ok := dc.mutation.Opened(); !ok {
		return &ValidationError{Name: "opened", err: errors.New(`ent: missing required field "opened"`)}
	}
	return nil
}

func (dc *DopeCreate) sqlSave(ctx context.Context) (*Dope, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(string)
	}
	return _node, nil
}

func (dc *DopeCreate) createSpec() (*Dope, *sqlgraph.CreateSpec) {
	var (
		_node = &Dope{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dope.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dope.FieldID,
			},
		}
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Clothes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldClothes,
		})
		_node.Clothes = value
	}
	if value, ok := dc.mutation.Foot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldFoot,
		})
		_node.Foot = value
	}
	if value, ok := dc.mutation.Hand(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldHand,
		})
		_node.Hand = value
	}
	if value, ok := dc.mutation.Neck(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldNeck,
		})
		_node.Neck = value
	}
	if value, ok := dc.mutation.Ring(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldRing,
		})
		_node.Ring = value
	}
	if value, ok := dc.mutation.Waist(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldWaist,
		})
		_node.Waist = value
	}
	if value, ok := dc.mutation.Weapon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldWeapon,
		})
		_node.Weapon = value
	}
	if value, ok := dc.mutation.Drugs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldDrugs,
		})
		_node.Drugs = value
	}
	if value, ok := dc.mutation.Vehicle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldVehicle,
		})
		_node.Vehicle = value
	}
	if value, ok := dc.mutation.Claimed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dope.FieldClaimed,
		})
		_node.Claimed = value
	}
	if value, ok := dc.mutation.Opened(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dope.FieldOpened,
		})
		_node.Opened = value
	}
	if nodes := dc.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dope.WalletTable,
			Columns: []string{dope.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.wallet_dopes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Dope.Create().
//		SetClothes(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DopeUpsert) {
//			SetClothes(v+v).
//		}).
//		Exec(ctx)
//
func (dc *DopeCreate) OnConflict(opts ...sql.ConflictOption) *DopeUpsertOne {
	dc.conflict = opts
	return &DopeUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Dope.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dc *DopeCreate) OnConflictColumns(columns ...string) *DopeUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DopeUpsertOne{
		create: dc,
	}
}

type (
	// DopeUpsertOne is the builder for "upsert"-ing
	//  one Dope node.
	DopeUpsertOne struct {
		create *DopeCreate
	}

	// DopeUpsert is the "OnConflict" setter.
	DopeUpsert struct {
		*sql.UpdateSet
	}
)

// SetClothes sets the "clothes" field.
func (u *DopeUpsert) SetClothes(v string) *DopeUpsert {
	u.Set(dope.FieldClothes, v)
	return u
}

// UpdateClothes sets the "clothes" field to the value that was provided on create.
func (u *DopeUpsert) UpdateClothes() *DopeUpsert {
	u.SetExcluded(dope.FieldClothes)
	return u
}

// SetFoot sets the "foot" field.
func (u *DopeUpsert) SetFoot(v string) *DopeUpsert {
	u.Set(dope.FieldFoot, v)
	return u
}

// UpdateFoot sets the "foot" field to the value that was provided on create.
func (u *DopeUpsert) UpdateFoot() *DopeUpsert {
	u.SetExcluded(dope.FieldFoot)
	return u
}

// SetHand sets the "hand" field.
func (u *DopeUpsert) SetHand(v string) *DopeUpsert {
	u.Set(dope.FieldHand, v)
	return u
}

// UpdateHand sets the "hand" field to the value that was provided on create.
func (u *DopeUpsert) UpdateHand() *DopeUpsert {
	u.SetExcluded(dope.FieldHand)
	return u
}

// SetNeck sets the "neck" field.
func (u *DopeUpsert) SetNeck(v string) *DopeUpsert {
	u.Set(dope.FieldNeck, v)
	return u
}

// UpdateNeck sets the "neck" field to the value that was provided on create.
func (u *DopeUpsert) UpdateNeck() *DopeUpsert {
	u.SetExcluded(dope.FieldNeck)
	return u
}

// SetRing sets the "ring" field.
func (u *DopeUpsert) SetRing(v string) *DopeUpsert {
	u.Set(dope.FieldRing, v)
	return u
}

// UpdateRing sets the "ring" field to the value that was provided on create.
func (u *DopeUpsert) UpdateRing() *DopeUpsert {
	u.SetExcluded(dope.FieldRing)
	return u
}

// SetWaist sets the "waist" field.
func (u *DopeUpsert) SetWaist(v string) *DopeUpsert {
	u.Set(dope.FieldWaist, v)
	return u
}

// UpdateWaist sets the "waist" field to the value that was provided on create.
func (u *DopeUpsert) UpdateWaist() *DopeUpsert {
	u.SetExcluded(dope.FieldWaist)
	return u
}

// SetWeapon sets the "weapon" field.
func (u *DopeUpsert) SetWeapon(v string) *DopeUpsert {
	u.Set(dope.FieldWeapon, v)
	return u
}

// UpdateWeapon sets the "weapon" field to the value that was provided on create.
func (u *DopeUpsert) UpdateWeapon() *DopeUpsert {
	u.SetExcluded(dope.FieldWeapon)
	return u
}

// SetDrugs sets the "drugs" field.
func (u *DopeUpsert) SetDrugs(v string) *DopeUpsert {
	u.Set(dope.FieldDrugs, v)
	return u
}

// UpdateDrugs sets the "drugs" field to the value that was provided on create.
func (u *DopeUpsert) UpdateDrugs() *DopeUpsert {
	u.SetExcluded(dope.FieldDrugs)
	return u
}

// SetVehicle sets the "vehicle" field.
func (u *DopeUpsert) SetVehicle(v string) *DopeUpsert {
	u.Set(dope.FieldVehicle, v)
	return u
}

// UpdateVehicle sets the "vehicle" field to the value that was provided on create.
func (u *DopeUpsert) UpdateVehicle() *DopeUpsert {
	u.SetExcluded(dope.FieldVehicle)
	return u
}

// SetClaimed sets the "claimed" field.
func (u *DopeUpsert) SetClaimed(v bool) *DopeUpsert {
	u.Set(dope.FieldClaimed, v)
	return u
}

// UpdateClaimed sets the "claimed" field to the value that was provided on create.
func (u *DopeUpsert) UpdateClaimed() *DopeUpsert {
	u.SetExcluded(dope.FieldClaimed)
	return u
}

// SetOpened sets the "opened" field.
func (u *DopeUpsert) SetOpened(v bool) *DopeUpsert {
	u.Set(dope.FieldOpened, v)
	return u
}

// UpdateOpened sets the "opened" field to the value that was provided on create.
func (u *DopeUpsert) UpdateOpened() *DopeUpsert {
	u.SetExcluded(dope.FieldOpened)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Dope.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dope.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DopeUpsertOne) UpdateNewValues() *DopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(dope.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Dope.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DopeUpsertOne) Ignore() *DopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DopeUpsertOne) DoNothing() *DopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DopeCreate.OnConflict
// documentation for more info.
func (u *DopeUpsertOne) Update(set func(*DopeUpsert)) *DopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DopeUpsert{UpdateSet: update})
	}))
	return u
}

// SetClothes sets the "clothes" field.
func (u *DopeUpsertOne) SetClothes(v string) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetClothes(v)
	})
}

// UpdateClothes sets the "clothes" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateClothes() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateClothes()
	})
}

// SetFoot sets the "foot" field.
func (u *DopeUpsertOne) SetFoot(v string) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetFoot(v)
	})
}

// UpdateFoot sets the "foot" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateFoot() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateFoot()
	})
}

// SetHand sets the "hand" field.
func (u *DopeUpsertOne) SetHand(v string) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetHand(v)
	})
}

// UpdateHand sets the "hand" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateHand() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateHand()
	})
}

// SetNeck sets the "neck" field.
func (u *DopeUpsertOne) SetNeck(v string) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetNeck(v)
	})
}

// UpdateNeck sets the "neck" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateNeck() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateNeck()
	})
}

// SetRing sets the "ring" field.
func (u *DopeUpsertOne) SetRing(v string) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetRing(v)
	})
}

// UpdateRing sets the "ring" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateRing() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateRing()
	})
}

// SetWaist sets the "waist" field.
func (u *DopeUpsertOne) SetWaist(v string) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetWaist(v)
	})
}

// UpdateWaist sets the "waist" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateWaist() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateWaist()
	})
}

// SetWeapon sets the "weapon" field.
func (u *DopeUpsertOne) SetWeapon(v string) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetWeapon(v)
	})
}

// UpdateWeapon sets the "weapon" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateWeapon() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateWeapon()
	})
}

// SetDrugs sets the "drugs" field.
func (u *DopeUpsertOne) SetDrugs(v string) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetDrugs(v)
	})
}

// UpdateDrugs sets the "drugs" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateDrugs() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateDrugs()
	})
}

// SetVehicle sets the "vehicle" field.
func (u *DopeUpsertOne) SetVehicle(v string) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetVehicle(v)
	})
}

// UpdateVehicle sets the "vehicle" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateVehicle() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateVehicle()
	})
}

// SetClaimed sets the "claimed" field.
func (u *DopeUpsertOne) SetClaimed(v bool) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetClaimed(v)
	})
}

// UpdateClaimed sets the "claimed" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateClaimed() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateClaimed()
	})
}

// SetOpened sets the "opened" field.
func (u *DopeUpsertOne) SetOpened(v bool) *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.SetOpened(v)
	})
}

// UpdateOpened sets the "opened" field to the value that was provided on create.
func (u *DopeUpsertOne) UpdateOpened() *DopeUpsertOne {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateOpened()
	})
}

// Exec executes the query.
func (u *DopeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DopeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DopeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DopeUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DopeUpsertOne.ID is not supported by MySQL driver. Use DopeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DopeUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DopeCreateBulk is the builder for creating many Dope entities in bulk.
type DopeCreateBulk struct {
	config
	builders []*DopeCreate
	conflict []sql.ConflictOption
}

// Save creates the Dope entities in the database.
func (dcb *DopeCreateBulk) Save(ctx context.Context) ([]*Dope, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dope, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DopeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DopeCreateBulk) SaveX(ctx context.Context) []*Dope {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DopeCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DopeCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Dope.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DopeUpsert) {
//			SetClothes(v+v).
//		}).
//		Exec(ctx)
//
func (dcb *DopeCreateBulk) OnConflict(opts ...sql.ConflictOption) *DopeUpsertBulk {
	dcb.conflict = opts
	return &DopeUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Dope.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dcb *DopeCreateBulk) OnConflictColumns(columns ...string) *DopeUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DopeUpsertBulk{
		create: dcb,
	}
}

// DopeUpsertBulk is the builder for "upsert"-ing
// a bulk of Dope nodes.
type DopeUpsertBulk struct {
	create *DopeCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Dope.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dope.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DopeUpsertBulk) UpdateNewValues() *DopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(dope.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Dope.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DopeUpsertBulk) Ignore() *DopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DopeUpsertBulk) DoNothing() *DopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DopeCreateBulk.OnConflict
// documentation for more info.
func (u *DopeUpsertBulk) Update(set func(*DopeUpsert)) *DopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DopeUpsert{UpdateSet: update})
	}))
	return u
}

// SetClothes sets the "clothes" field.
func (u *DopeUpsertBulk) SetClothes(v string) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetClothes(v)
	})
}

// UpdateClothes sets the "clothes" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateClothes() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateClothes()
	})
}

// SetFoot sets the "foot" field.
func (u *DopeUpsertBulk) SetFoot(v string) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetFoot(v)
	})
}

// UpdateFoot sets the "foot" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateFoot() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateFoot()
	})
}

// SetHand sets the "hand" field.
func (u *DopeUpsertBulk) SetHand(v string) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetHand(v)
	})
}

// UpdateHand sets the "hand" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateHand() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateHand()
	})
}

// SetNeck sets the "neck" field.
func (u *DopeUpsertBulk) SetNeck(v string) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetNeck(v)
	})
}

// UpdateNeck sets the "neck" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateNeck() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateNeck()
	})
}

// SetRing sets the "ring" field.
func (u *DopeUpsertBulk) SetRing(v string) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetRing(v)
	})
}

// UpdateRing sets the "ring" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateRing() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateRing()
	})
}

// SetWaist sets the "waist" field.
func (u *DopeUpsertBulk) SetWaist(v string) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetWaist(v)
	})
}

// UpdateWaist sets the "waist" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateWaist() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateWaist()
	})
}

// SetWeapon sets the "weapon" field.
func (u *DopeUpsertBulk) SetWeapon(v string) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetWeapon(v)
	})
}

// UpdateWeapon sets the "weapon" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateWeapon() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateWeapon()
	})
}

// SetDrugs sets the "drugs" field.
func (u *DopeUpsertBulk) SetDrugs(v string) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetDrugs(v)
	})
}

// UpdateDrugs sets the "drugs" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateDrugs() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateDrugs()
	})
}

// SetVehicle sets the "vehicle" field.
func (u *DopeUpsertBulk) SetVehicle(v string) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetVehicle(v)
	})
}

// UpdateVehicle sets the "vehicle" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateVehicle() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateVehicle()
	})
}

// SetClaimed sets the "claimed" field.
func (u *DopeUpsertBulk) SetClaimed(v bool) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetClaimed(v)
	})
}

// UpdateClaimed sets the "claimed" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateClaimed() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateClaimed()
	})
}

// SetOpened sets the "opened" field.
func (u *DopeUpsertBulk) SetOpened(v bool) *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.SetOpened(v)
	})
}

// UpdateOpened sets the "opened" field to the value that was provided on create.
func (u *DopeUpsertBulk) UpdateOpened() *DopeUpsertBulk {
	return u.Update(func(s *DopeUpsert) {
		s.UpdateOpened()
	})
}

// Exec executes the query.
func (u *DopeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DopeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DopeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DopeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
