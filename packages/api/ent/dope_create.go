// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"
)

// DopeCreate is the builder for creating a Dope entity.
type DopeCreate struct {
	config
	mutation *DopeMutation
	hooks    []Hook
}

// SetClothes sets the "clothes" field.
func (dc *DopeCreate) SetClothes(s string) *DopeCreate {
	dc.mutation.SetClothes(s)
	return dc
}

// SetFoot sets the "foot" field.
func (dc *DopeCreate) SetFoot(s string) *DopeCreate {
	dc.mutation.SetFoot(s)
	return dc
}

// SetHand sets the "hand" field.
func (dc *DopeCreate) SetHand(s string) *DopeCreate {
	dc.mutation.SetHand(s)
	return dc
}

// SetNeck sets the "neck" field.
func (dc *DopeCreate) SetNeck(s string) *DopeCreate {
	dc.mutation.SetNeck(s)
	return dc
}

// SetRing sets the "ring" field.
func (dc *DopeCreate) SetRing(s string) *DopeCreate {
	dc.mutation.SetRing(s)
	return dc
}

// SetWaist sets the "waist" field.
func (dc *DopeCreate) SetWaist(s string) *DopeCreate {
	dc.mutation.SetWaist(s)
	return dc
}

// SetWeapon sets the "weapon" field.
func (dc *DopeCreate) SetWeapon(s string) *DopeCreate {
	dc.mutation.SetWeapon(s)
	return dc
}

// SetDrugs sets the "drugs" field.
func (dc *DopeCreate) SetDrugs(s string) *DopeCreate {
	dc.mutation.SetDrugs(s)
	return dc
}

// SetVehicle sets the "vehicle" field.
func (dc *DopeCreate) SetVehicle(s string) *DopeCreate {
	dc.mutation.SetVehicle(s)
	return dc
}

// SetClaimed sets the "claimed" field.
func (dc *DopeCreate) SetClaimed(b bool) *DopeCreate {
	dc.mutation.SetClaimed(b)
	return dc
}

// SetOpened sets the "opened" field.
func (dc *DopeCreate) SetOpened(b bool) *DopeCreate {
	dc.mutation.SetOpened(b)
	return dc
}

// SetWalletID sets the "wallet" edge to the Wallet entity by ID.
func (dc *DopeCreate) SetWalletID(id string) *DopeCreate {
	dc.mutation.SetWalletID(id)
	return dc
}

// SetNillableWalletID sets the "wallet" edge to the Wallet entity by ID if the given value is not nil.
func (dc *DopeCreate) SetNillableWalletID(id *string) *DopeCreate {
	if id != nil {
		dc = dc.SetWalletID(*id)
	}
	return dc
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (dc *DopeCreate) SetWallet(w *Wallet) *DopeCreate {
	return dc.SetWalletID(w.ID)
}

// Mutation returns the DopeMutation object of the builder.
func (dc *DopeCreate) Mutation() *DopeMutation {
	return dc.mutation
}

// Save creates the Dope in the database.
func (dc *DopeCreate) Save(ctx context.Context) (*Dope, error) {
	var (
		err  error
		node *Dope
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DopeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DopeCreate) SaveX(ctx context.Context) *Dope {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DopeCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DopeCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DopeCreate) check() error {
	if _, ok := dc.mutation.Clothes(); !ok {
		return &ValidationError{Name: "clothes", err: errors.New(`ent: missing required field "clothes"`)}
	}
	if v, ok := dc.mutation.Clothes(); ok {
		if err := dope.ClothesValidator(v); err != nil {
			return &ValidationError{Name: "clothes", err: fmt.Errorf(`ent: validator failed for field "clothes": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Foot(); !ok {
		return &ValidationError{Name: "foot", err: errors.New(`ent: missing required field "foot"`)}
	}
	if v, ok := dc.mutation.Foot(); ok {
		if err := dope.FootValidator(v); err != nil {
			return &ValidationError{Name: "foot", err: fmt.Errorf(`ent: validator failed for field "foot": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Hand(); !ok {
		return &ValidationError{Name: "hand", err: errors.New(`ent: missing required field "hand"`)}
	}
	if v, ok := dc.mutation.Hand(); ok {
		if err := dope.HandValidator(v); err != nil {
			return &ValidationError{Name: "hand", err: fmt.Errorf(`ent: validator failed for field "hand": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Neck(); !ok {
		return &ValidationError{Name: "neck", err: errors.New(`ent: missing required field "neck"`)}
	}
	if v, ok := dc.mutation.Neck(); ok {
		if err := dope.NeckValidator(v); err != nil {
			return &ValidationError{Name: "neck", err: fmt.Errorf(`ent: validator failed for field "neck": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Ring(); !ok {
		return &ValidationError{Name: "ring", err: errors.New(`ent: missing required field "ring"`)}
	}
	if v, ok := dc.mutation.Ring(); ok {
		if err := dope.RingValidator(v); err != nil {
			return &ValidationError{Name: "ring", err: fmt.Errorf(`ent: validator failed for field "ring": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Waist(); !ok {
		return &ValidationError{Name: "waist", err: errors.New(`ent: missing required field "waist"`)}
	}
	if v, ok := dc.mutation.Waist(); ok {
		if err := dope.WaistValidator(v); err != nil {
			return &ValidationError{Name: "waist", err: fmt.Errorf(`ent: validator failed for field "waist": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Weapon(); !ok {
		return &ValidationError{Name: "weapon", err: errors.New(`ent: missing required field "weapon"`)}
	}
	if v, ok := dc.mutation.Weapon(); ok {
		if err := dope.WeaponValidator(v); err != nil {
			return &ValidationError{Name: "weapon", err: fmt.Errorf(`ent: validator failed for field "weapon": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Drugs(); !ok {
		return &ValidationError{Name: "drugs", err: errors.New(`ent: missing required field "drugs"`)}
	}
	if v, ok := dc.mutation.Drugs(); ok {
		if err := dope.DrugsValidator(v); err != nil {
			return &ValidationError{Name: "drugs", err: fmt.Errorf(`ent: validator failed for field "drugs": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Vehicle(); !ok {
		return &ValidationError{Name: "vehicle", err: errors.New(`ent: missing required field "vehicle"`)}
	}
	if v, ok := dc.mutation.Vehicle(); ok {
		if err := dope.VehicleValidator(v); err != nil {
			return &ValidationError{Name: "vehicle", err: fmt.Errorf(`ent: validator failed for field "vehicle": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Claimed(); !ok {
		return &ValidationError{Name: "claimed", err: errors.New(`ent: missing required field "claimed"`)}
	}
	if _, ok := dc.mutation.Opened(); !ok {
		return &ValidationError{Name: "opened", err: errors.New(`ent: missing required field "opened"`)}
	}
	return nil
}

func (dc *DopeCreate) sqlSave(ctx context.Context) (*Dope, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = string(id)
	return _node, nil
}

func (dc *DopeCreate) createSpec() (*Dope, *sqlgraph.CreateSpec) {
	var (
		_node = &Dope{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dope.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dope.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.Clothes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldClothes,
		})
		_node.Clothes = value
	}
	if value, ok := dc.mutation.Foot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldFoot,
		})
		_node.Foot = value
	}
	if value, ok := dc.mutation.Hand(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldHand,
		})
		_node.Hand = value
	}
	if value, ok := dc.mutation.Neck(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldNeck,
		})
		_node.Neck = value
	}
	if value, ok := dc.mutation.Ring(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldRing,
		})
		_node.Ring = value
	}
	if value, ok := dc.mutation.Waist(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldWaist,
		})
		_node.Waist = value
	}
	if value, ok := dc.mutation.Weapon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldWeapon,
		})
		_node.Weapon = value
	}
	if value, ok := dc.mutation.Drugs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldDrugs,
		})
		_node.Drugs = value
	}
	if value, ok := dc.mutation.Vehicle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dope.FieldVehicle,
		})
		_node.Vehicle = value
	}
	if value, ok := dc.mutation.Claimed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dope.FieldClaimed,
		})
		_node.Claimed = value
	}
	if value, ok := dc.mutation.Opened(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dope.FieldOpened,
		})
		_node.Opened = value
	}
	if nodes := dc.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dope.WalletTable,
			Columns: []string{dope.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.wallet_dopes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DopeCreateBulk is the builder for creating many Dope entities in bulk.
type DopeCreateBulk struct {
	config
	builders []*DopeCreate
}

// Save creates the Dope entities in the database.
func (dcb *DopeCreateBulk) Save(ctx context.Context) ([]*Dope, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dope, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DopeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = string(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DopeCreateBulk) SaveX(ctx context.Context) []*Dope {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DopeCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DopeCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
