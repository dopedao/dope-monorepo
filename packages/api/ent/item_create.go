// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
	"github.com/dopedao/dope-monorepo/packages/api/ent/search"
	"github.com/dopedao/dope-monorepo/packages/api/ent/walletitems"
)

// ItemCreate is the builder for creating a Item entity.
type ItemCreate struct {
	config
	mutation *ItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (ic *ItemCreate) SetType(i item.Type) *ItemCreate {
	ic.mutation.SetType(i)
	return ic
}

// SetNamePrefix sets the "name_prefix" field.
func (ic *ItemCreate) SetNamePrefix(s string) *ItemCreate {
	ic.mutation.SetNamePrefix(s)
	return ic
}

// SetNillableNamePrefix sets the "name_prefix" field if the given value is not nil.
func (ic *ItemCreate) SetNillableNamePrefix(s *string) *ItemCreate {
	if s != nil {
		ic.SetNamePrefix(*s)
	}
	return ic
}

// SetNameSuffix sets the "name_suffix" field.
func (ic *ItemCreate) SetNameSuffix(s string) *ItemCreate {
	ic.mutation.SetNameSuffix(s)
	return ic
}

// SetNillableNameSuffix sets the "name_suffix" field if the given value is not nil.
func (ic *ItemCreate) SetNillableNameSuffix(s *string) *ItemCreate {
	if s != nil {
		ic.SetNameSuffix(*s)
	}
	return ic
}

// SetName sets the "name" field.
func (ic *ItemCreate) SetName(s string) *ItemCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetSuffix sets the "suffix" field.
func (ic *ItemCreate) SetSuffix(s string) *ItemCreate {
	ic.mutation.SetSuffix(s)
	return ic
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (ic *ItemCreate) SetNillableSuffix(s *string) *ItemCreate {
	if s != nil {
		ic.SetSuffix(*s)
	}
	return ic
}

// SetAugmented sets the "augmented" field.
func (ic *ItemCreate) SetAugmented(b bool) *ItemCreate {
	ic.mutation.SetAugmented(b)
	return ic
}

// SetNillableAugmented sets the "augmented" field if the given value is not nil.
func (ic *ItemCreate) SetNillableAugmented(b *bool) *ItemCreate {
	if b != nil {
		ic.SetAugmented(*b)
	}
	return ic
}

// SetCount sets the "count" field.
func (ic *ItemCreate) SetCount(i int) *ItemCreate {
	ic.mutation.SetCount(i)
	return ic
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (ic *ItemCreate) SetNillableCount(i *int) *ItemCreate {
	if i != nil {
		ic.SetCount(*i)
	}
	return ic
}

// SetTier sets the "tier" field.
func (ic *ItemCreate) SetTier(i item.Tier) *ItemCreate {
	ic.mutation.SetTier(i)
	return ic
}

// SetNillableTier sets the "tier" field if the given value is not nil.
func (ic *ItemCreate) SetNillableTier(i *item.Tier) *ItemCreate {
	if i != nil {
		ic.SetTier(*i)
	}
	return ic
}

// SetGreatness sets the "greatness" field.
func (ic *ItemCreate) SetGreatness(i int) *ItemCreate {
	ic.mutation.SetGreatness(i)
	return ic
}

// SetNillableGreatness sets the "greatness" field if the given value is not nil.
func (ic *ItemCreate) SetNillableGreatness(i *int) *ItemCreate {
	if i != nil {
		ic.SetGreatness(*i)
	}
	return ic
}

// SetRles sets the "rles" field.
func (ic *ItemCreate) SetRles(se schema.RLEs) *ItemCreate {
	ic.mutation.SetRles(se)
	return ic
}

// SetNillableRles sets the "rles" field if the given value is not nil.
func (ic *ItemCreate) SetNillableRles(se *schema.RLEs) *ItemCreate {
	if se != nil {
		ic.SetRles(*se)
	}
	return ic
}

// SetSvg sets the "svg" field.
func (ic *ItemCreate) SetSvg(s string) *ItemCreate {
	ic.mutation.SetSvg(s)
	return ic
}

// SetNillableSvg sets the "svg" field if the given value is not nil.
func (ic *ItemCreate) SetNillableSvg(s *string) *ItemCreate {
	if s != nil {
		ic.SetSvg(*s)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *ItemCreate) SetID(s string) *ItemCreate {
	ic.mutation.SetID(s)
	return ic
}

// AddWalletIDs adds the "wallets" edge to the WalletItems entity by IDs.
func (ic *ItemCreate) AddWalletIDs(ids ...string) *ItemCreate {
	ic.mutation.AddWalletIDs(ids...)
	return ic
}

// AddWallets adds the "wallets" edges to the WalletItems entity.
func (ic *ItemCreate) AddWallets(w ...*WalletItems) *ItemCreate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ic.AddWalletIDs(ids...)
}

// AddDopeIDs adds the "dopes" edge to the Dope entity by IDs.
func (ic *ItemCreate) AddDopeIDs(ids ...string) *ItemCreate {
	ic.mutation.AddDopeIDs(ids...)
	return ic
}

// AddDopes adds the "dopes" edges to the Dope entity.
func (ic *ItemCreate) AddDopes(d ...*Dope) *ItemCreate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ic.AddDopeIDs(ids...)
}

// AddHustlerWeaponIDs adds the "hustler_weapons" edge to the Hustler entity by IDs.
func (ic *ItemCreate) AddHustlerWeaponIDs(ids ...string) *ItemCreate {
	ic.mutation.AddHustlerWeaponIDs(ids...)
	return ic
}

// AddHustlerWeapons adds the "hustler_weapons" edges to the Hustler entity.
func (ic *ItemCreate) AddHustlerWeapons(h ...*Hustler) *ItemCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHustlerWeaponIDs(ids...)
}

// AddHustlerClotheIDs adds the "hustler_clothes" edge to the Hustler entity by IDs.
func (ic *ItemCreate) AddHustlerClotheIDs(ids ...string) *ItemCreate {
	ic.mutation.AddHustlerClotheIDs(ids...)
	return ic
}

// AddHustlerClothes adds the "hustler_clothes" edges to the Hustler entity.
func (ic *ItemCreate) AddHustlerClothes(h ...*Hustler) *ItemCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHustlerClotheIDs(ids...)
}

// AddHustlerVehicleIDs adds the "hustler_vehicles" edge to the Hustler entity by IDs.
func (ic *ItemCreate) AddHustlerVehicleIDs(ids ...string) *ItemCreate {
	ic.mutation.AddHustlerVehicleIDs(ids...)
	return ic
}

// AddHustlerVehicles adds the "hustler_vehicles" edges to the Hustler entity.
func (ic *ItemCreate) AddHustlerVehicles(h ...*Hustler) *ItemCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHustlerVehicleIDs(ids...)
}

// AddHustlerWaistIDs adds the "hustler_waists" edge to the Hustler entity by IDs.
func (ic *ItemCreate) AddHustlerWaistIDs(ids ...string) *ItemCreate {
	ic.mutation.AddHustlerWaistIDs(ids...)
	return ic
}

// AddHustlerWaists adds the "hustler_waists" edges to the Hustler entity.
func (ic *ItemCreate) AddHustlerWaists(h ...*Hustler) *ItemCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHustlerWaistIDs(ids...)
}

// AddHustlerFeetIDs adds the "hustler_feet" edge to the Hustler entity by IDs.
func (ic *ItemCreate) AddHustlerFeetIDs(ids ...string) *ItemCreate {
	ic.mutation.AddHustlerFeetIDs(ids...)
	return ic
}

// AddHustlerFeet adds the "hustler_feet" edges to the Hustler entity.
func (ic *ItemCreate) AddHustlerFeet(h ...*Hustler) *ItemCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHustlerFeetIDs(ids...)
}

// AddHustlerHandIDs adds the "hustler_hands" edge to the Hustler entity by IDs.
func (ic *ItemCreate) AddHustlerHandIDs(ids ...string) *ItemCreate {
	ic.mutation.AddHustlerHandIDs(ids...)
	return ic
}

// AddHustlerHands adds the "hustler_hands" edges to the Hustler entity.
func (ic *ItemCreate) AddHustlerHands(h ...*Hustler) *ItemCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHustlerHandIDs(ids...)
}

// AddHustlerDrugIDs adds the "hustler_drugs" edge to the Hustler entity by IDs.
func (ic *ItemCreate) AddHustlerDrugIDs(ids ...string) *ItemCreate {
	ic.mutation.AddHustlerDrugIDs(ids...)
	return ic
}

// AddHustlerDrugs adds the "hustler_drugs" edges to the Hustler entity.
func (ic *ItemCreate) AddHustlerDrugs(h ...*Hustler) *ItemCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHustlerDrugIDs(ids...)
}

// AddHustlerNeckIDs adds the "hustler_necks" edge to the Hustler entity by IDs.
func (ic *ItemCreate) AddHustlerNeckIDs(ids ...string) *ItemCreate {
	ic.mutation.AddHustlerNeckIDs(ids...)
	return ic
}

// AddHustlerNecks adds the "hustler_necks" edges to the Hustler entity.
func (ic *ItemCreate) AddHustlerNecks(h ...*Hustler) *ItemCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHustlerNeckIDs(ids...)
}

// AddHustlerRingIDs adds the "hustler_rings" edge to the Hustler entity by IDs.
func (ic *ItemCreate) AddHustlerRingIDs(ids ...string) *ItemCreate {
	ic.mutation.AddHustlerRingIDs(ids...)
	return ic
}

// AddHustlerRings adds the "hustler_rings" edges to the Hustler entity.
func (ic *ItemCreate) AddHustlerRings(h ...*Hustler) *ItemCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHustlerRingIDs(ids...)
}

// AddHustlerAccessoryIDs adds the "hustler_accessories" edge to the Hustler entity by IDs.
func (ic *ItemCreate) AddHustlerAccessoryIDs(ids ...string) *ItemCreate {
	ic.mutation.AddHustlerAccessoryIDs(ids...)
	return ic
}

// AddHustlerAccessories adds the "hustler_accessories" edges to the Hustler entity.
func (ic *ItemCreate) AddHustlerAccessories(h ...*Hustler) *ItemCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHustlerAccessoryIDs(ids...)
}

// SetBaseID sets the "base" edge to the Item entity by ID.
func (ic *ItemCreate) SetBaseID(id string) *ItemCreate {
	ic.mutation.SetBaseID(id)
	return ic
}

// SetNillableBaseID sets the "base" edge to the Item entity by ID if the given value is not nil.
func (ic *ItemCreate) SetNillableBaseID(id *string) *ItemCreate {
	if id != nil {
		ic = ic.SetBaseID(*id)
	}
	return ic
}

// SetBase sets the "base" edge to the Item entity.
func (ic *ItemCreate) SetBase(i *Item) *ItemCreate {
	return ic.SetBaseID(i.ID)
}

// AddDerivativeIDs adds the "derivative" edge to the Item entity by IDs.
func (ic *ItemCreate) AddDerivativeIDs(ids ...string) *ItemCreate {
	ic.mutation.AddDerivativeIDs(ids...)
	return ic
}

// AddDerivative adds the "derivative" edges to the Item entity.
func (ic *ItemCreate) AddDerivative(i ...*Item) *ItemCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddDerivativeIDs(ids...)
}

// SetIndexID sets the "index" edge to the Search entity by ID.
func (ic *ItemCreate) SetIndexID(id string) *ItemCreate {
	ic.mutation.SetIndexID(id)
	return ic
}

// SetNillableIndexID sets the "index" edge to the Search entity by ID if the given value is not nil.
func (ic *ItemCreate) SetNillableIndexID(id *string) *ItemCreate {
	if id != nil {
		ic = ic.SetIndexID(*id)
	}
	return ic
}

// SetIndex sets the "index" edge to the Search entity.
func (ic *ItemCreate) SetIndex(s *Search) *ItemCreate {
	return ic.SetIndexID(s.ID)
}

// Mutation returns the ItemMutation object of the builder.
func (ic *ItemCreate) Mutation() *ItemMutation {
	return ic.mutation
}

// Save creates the Item in the database.
func (ic *ItemCreate) Save(ctx context.Context) (*Item, error) {
	var (
		err  error
		node *Item
	)
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ItemCreate) SaveX(ctx context.Context) *Item {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ItemCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ItemCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ItemCreate) check() error {
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Item.type"`)}
	}
	if v, ok := ic.mutation.GetType(); ok {
		if err := item.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Item.type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Item.name"`)}
	}
	if v, ok := ic.mutation.Tier(); ok {
		if err := item.TierValidator(v); err != nil {
			return &ValidationError{Name: "tier", err: fmt.Errorf(`ent: validator failed for field "Item.tier": %w`, err)}
		}
	}
	return nil
}

func (ic *ItemCreate) sqlSave(ctx context.Context) (*Item, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Item.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (ic *ItemCreate) createSpec() (*Item, *sqlgraph.CreateSpec) {
	var (
		_node = &Item{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: item.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: item.FieldID,
			},
		}
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: item.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ic.mutation.NamePrefix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldNamePrefix,
		})
		_node.NamePrefix = value
	}
	if value, ok := ic.mutation.NameSuffix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldNameSuffix,
		})
		_node.NameSuffix = value
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ic.mutation.Suffix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldSuffix,
		})
		_node.Suffix = value
	}
	if value, ok := ic.mutation.Augmented(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: item.FieldAugmented,
		})
		_node.Augmented = value
	}
	if value, ok := ic.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := ic.mutation.Tier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: item.FieldTier,
		})
		_node.Tier = value
	}
	if value, ok := ic.mutation.Greatness(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldGreatness,
		})
		_node.Greatness = value
	}
	if value, ok := ic.mutation.Rles(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: item.FieldRles,
		})
		_node.Rles = value
	}
	if value, ok := ic.mutation.Svg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldSvg,
		})
		_node.Svg = value
	}
	if nodes := ic.mutation.WalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.WalletsTable,
			Columns: []string{item.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: walletitems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.DopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.DopesTable,
			Columns: item.DopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: dope.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.HustlerWeaponsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.HustlerWeaponsTable,
			Columns: []string{item.HustlerWeaponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.HustlerClothesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.HustlerClothesTable,
			Columns: []string{item.HustlerClothesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.HustlerVehiclesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.HustlerVehiclesTable,
			Columns: []string{item.HustlerVehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.HustlerWaistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.HustlerWaistsTable,
			Columns: []string{item.HustlerWaistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.HustlerFeetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.HustlerFeetTable,
			Columns: []string{item.HustlerFeetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.HustlerHandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.HustlerHandsTable,
			Columns: []string{item.HustlerHandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.HustlerDrugsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.HustlerDrugsTable,
			Columns: []string{item.HustlerDrugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.HustlerNecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.HustlerNecksTable,
			Columns: []string{item.HustlerNecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.HustlerRingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.HustlerRingsTable,
			Columns: []string{item.HustlerRingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.HustlerAccessoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.HustlerAccessoriesTable,
			Columns: []string{item.HustlerAccessoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.BaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.BaseTable,
			Columns: []string{item.BaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.item_derivative = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.DerivativeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.DerivativeTable,
			Columns: []string{item.DerivativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.IndexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.IndexTable,
			Columns: []string{item.IndexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: search.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Item.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ItemUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
//
func (ic *ItemCreate) OnConflict(opts ...sql.ConflictOption) *ItemUpsertOne {
	ic.conflict = opts
	return &ItemUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Item.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ic *ItemCreate) OnConflictColumns(columns ...string) *ItemUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &ItemUpsertOne{
		create: ic,
	}
}

type (
	// ItemUpsertOne is the builder for "upsert"-ing
	//  one Item node.
	ItemUpsertOne struct {
		create *ItemCreate
	}

	// ItemUpsert is the "OnConflict" setter.
	ItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *ItemUpsert) SetType(v item.Type) *ItemUpsert {
	u.Set(item.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ItemUpsert) UpdateType() *ItemUpsert {
	u.SetExcluded(item.FieldType)
	return u
}

// SetNamePrefix sets the "name_prefix" field.
func (u *ItemUpsert) SetNamePrefix(v string) *ItemUpsert {
	u.Set(item.FieldNamePrefix, v)
	return u
}

// UpdateNamePrefix sets the "name_prefix" field to the value that was provided on create.
func (u *ItemUpsert) UpdateNamePrefix() *ItemUpsert {
	u.SetExcluded(item.FieldNamePrefix)
	return u
}

// ClearNamePrefix clears the value of the "name_prefix" field.
func (u *ItemUpsert) ClearNamePrefix() *ItemUpsert {
	u.SetNull(item.FieldNamePrefix)
	return u
}

// SetNameSuffix sets the "name_suffix" field.
func (u *ItemUpsert) SetNameSuffix(v string) *ItemUpsert {
	u.Set(item.FieldNameSuffix, v)
	return u
}

// UpdateNameSuffix sets the "name_suffix" field to the value that was provided on create.
func (u *ItemUpsert) UpdateNameSuffix() *ItemUpsert {
	u.SetExcluded(item.FieldNameSuffix)
	return u
}

// ClearNameSuffix clears the value of the "name_suffix" field.
func (u *ItemUpsert) ClearNameSuffix() *ItemUpsert {
	u.SetNull(item.FieldNameSuffix)
	return u
}

// SetName sets the "name" field.
func (u *ItemUpsert) SetName(v string) *ItemUpsert {
	u.Set(item.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ItemUpsert) UpdateName() *ItemUpsert {
	u.SetExcluded(item.FieldName)
	return u
}

// SetSuffix sets the "suffix" field.
func (u *ItemUpsert) SetSuffix(v string) *ItemUpsert {
	u.Set(item.FieldSuffix, v)
	return u
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *ItemUpsert) UpdateSuffix() *ItemUpsert {
	u.SetExcluded(item.FieldSuffix)
	return u
}

// ClearSuffix clears the value of the "suffix" field.
func (u *ItemUpsert) ClearSuffix() *ItemUpsert {
	u.SetNull(item.FieldSuffix)
	return u
}

// SetAugmented sets the "augmented" field.
func (u *ItemUpsert) SetAugmented(v bool) *ItemUpsert {
	u.Set(item.FieldAugmented, v)
	return u
}

// UpdateAugmented sets the "augmented" field to the value that was provided on create.
func (u *ItemUpsert) UpdateAugmented() *ItemUpsert {
	u.SetExcluded(item.FieldAugmented)
	return u
}

// ClearAugmented clears the value of the "augmented" field.
func (u *ItemUpsert) ClearAugmented() *ItemUpsert {
	u.SetNull(item.FieldAugmented)
	return u
}

// SetCount sets the "count" field.
func (u *ItemUpsert) SetCount(v int) *ItemUpsert {
	u.Set(item.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *ItemUpsert) UpdateCount() *ItemUpsert {
	u.SetExcluded(item.FieldCount)
	return u
}

// AddCount adds v to the "count" field.
func (u *ItemUpsert) AddCount(v int) *ItemUpsert {
	u.Add(item.FieldCount, v)
	return u
}

// ClearCount clears the value of the "count" field.
func (u *ItemUpsert) ClearCount() *ItemUpsert {
	u.SetNull(item.FieldCount)
	return u
}

// SetTier sets the "tier" field.
func (u *ItemUpsert) SetTier(v item.Tier) *ItemUpsert {
	u.Set(item.FieldTier, v)
	return u
}

// UpdateTier sets the "tier" field to the value that was provided on create.
func (u *ItemUpsert) UpdateTier() *ItemUpsert {
	u.SetExcluded(item.FieldTier)
	return u
}

// ClearTier clears the value of the "tier" field.
func (u *ItemUpsert) ClearTier() *ItemUpsert {
	u.SetNull(item.FieldTier)
	return u
}

// SetGreatness sets the "greatness" field.
func (u *ItemUpsert) SetGreatness(v int) *ItemUpsert {
	u.Set(item.FieldGreatness, v)
	return u
}

// UpdateGreatness sets the "greatness" field to the value that was provided on create.
func (u *ItemUpsert) UpdateGreatness() *ItemUpsert {
	u.SetExcluded(item.FieldGreatness)
	return u
}

// AddGreatness adds v to the "greatness" field.
func (u *ItemUpsert) AddGreatness(v int) *ItemUpsert {
	u.Add(item.FieldGreatness, v)
	return u
}

// ClearGreatness clears the value of the "greatness" field.
func (u *ItemUpsert) ClearGreatness() *ItemUpsert {
	u.SetNull(item.FieldGreatness)
	return u
}

// SetRles sets the "rles" field.
func (u *ItemUpsert) SetRles(v schema.RLEs) *ItemUpsert {
	u.Set(item.FieldRles, v)
	return u
}

// UpdateRles sets the "rles" field to the value that was provided on create.
func (u *ItemUpsert) UpdateRles() *ItemUpsert {
	u.SetExcluded(item.FieldRles)
	return u
}

// ClearRles clears the value of the "rles" field.
func (u *ItemUpsert) ClearRles() *ItemUpsert {
	u.SetNull(item.FieldRles)
	return u
}

// SetSvg sets the "svg" field.
func (u *ItemUpsert) SetSvg(v string) *ItemUpsert {
	u.Set(item.FieldSvg, v)
	return u
}

// UpdateSvg sets the "svg" field to the value that was provided on create.
func (u *ItemUpsert) UpdateSvg() *ItemUpsert {
	u.SetExcluded(item.FieldSvg)
	return u
}

// ClearSvg clears the value of the "svg" field.
func (u *ItemUpsert) ClearSvg() *ItemUpsert {
	u.SetNull(item.FieldSvg)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Item.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(item.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ItemUpsertOne) UpdateNewValues() *ItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(item.FieldID)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(item.FieldType)
		}
		if _, exists := u.create.mutation.NamePrefix(); exists {
			s.SetIgnore(item.FieldNamePrefix)
		}
		if _, exists := u.create.mutation.NameSuffix(); exists {
			s.SetIgnore(item.FieldNameSuffix)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(item.FieldName)
		}
		if _, exists := u.create.mutation.Suffix(); exists {
			s.SetIgnore(item.FieldSuffix)
		}
		if _, exists := u.create.mutation.Augmented(); exists {
			s.SetIgnore(item.FieldAugmented)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Item.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ItemUpsertOne) Ignore() *ItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ItemUpsertOne) DoNothing() *ItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ItemCreate.OnConflict
// documentation for more info.
func (u *ItemUpsertOne) Update(set func(*ItemUpsert)) *ItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *ItemUpsertOne) SetType(v item.Type) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateType() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateType()
	})
}

// SetNamePrefix sets the "name_prefix" field.
func (u *ItemUpsertOne) SetNamePrefix(v string) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetNamePrefix(v)
	})
}

// UpdateNamePrefix sets the "name_prefix" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateNamePrefix() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateNamePrefix()
	})
}

// ClearNamePrefix clears the value of the "name_prefix" field.
func (u *ItemUpsertOne) ClearNamePrefix() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.ClearNamePrefix()
	})
}

// SetNameSuffix sets the "name_suffix" field.
func (u *ItemUpsertOne) SetNameSuffix(v string) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetNameSuffix(v)
	})
}

// UpdateNameSuffix sets the "name_suffix" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateNameSuffix() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateNameSuffix()
	})
}

// ClearNameSuffix clears the value of the "name_suffix" field.
func (u *ItemUpsertOne) ClearNameSuffix() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.ClearNameSuffix()
	})
}

// SetName sets the "name" field.
func (u *ItemUpsertOne) SetName(v string) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateName() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateName()
	})
}

// SetSuffix sets the "suffix" field.
func (u *ItemUpsertOne) SetSuffix(v string) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetSuffix(v)
	})
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateSuffix() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateSuffix()
	})
}

// ClearSuffix clears the value of the "suffix" field.
func (u *ItemUpsertOne) ClearSuffix() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.ClearSuffix()
	})
}

// SetAugmented sets the "augmented" field.
func (u *ItemUpsertOne) SetAugmented(v bool) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetAugmented(v)
	})
}

// UpdateAugmented sets the "augmented" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateAugmented() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateAugmented()
	})
}

// ClearAugmented clears the value of the "augmented" field.
func (u *ItemUpsertOne) ClearAugmented() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.ClearAugmented()
	})
}

// SetCount sets the "count" field.
func (u *ItemUpsertOne) SetCount(v int) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *ItemUpsertOne) AddCount(v int) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateCount() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateCount()
	})
}

// ClearCount clears the value of the "count" field.
func (u *ItemUpsertOne) ClearCount() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.ClearCount()
	})
}

// SetTier sets the "tier" field.
func (u *ItemUpsertOne) SetTier(v item.Tier) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetTier(v)
	})
}

// UpdateTier sets the "tier" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateTier() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateTier()
	})
}

// ClearTier clears the value of the "tier" field.
func (u *ItemUpsertOne) ClearTier() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.ClearTier()
	})
}

// SetGreatness sets the "greatness" field.
func (u *ItemUpsertOne) SetGreatness(v int) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetGreatness(v)
	})
}

// AddGreatness adds v to the "greatness" field.
func (u *ItemUpsertOne) AddGreatness(v int) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.AddGreatness(v)
	})
}

// UpdateGreatness sets the "greatness" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateGreatness() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateGreatness()
	})
}

// ClearGreatness clears the value of the "greatness" field.
func (u *ItemUpsertOne) ClearGreatness() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.ClearGreatness()
	})
}

// SetRles sets the "rles" field.
func (u *ItemUpsertOne) SetRles(v schema.RLEs) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetRles(v)
	})
}

// UpdateRles sets the "rles" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateRles() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateRles()
	})
}

// ClearRles clears the value of the "rles" field.
func (u *ItemUpsertOne) ClearRles() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.ClearRles()
	})
}

// SetSvg sets the "svg" field.
func (u *ItemUpsertOne) SetSvg(v string) *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.SetSvg(v)
	})
}

// UpdateSvg sets the "svg" field to the value that was provided on create.
func (u *ItemUpsertOne) UpdateSvg() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateSvg()
	})
}

// ClearSvg clears the value of the "svg" field.
func (u *ItemUpsertOne) ClearSvg() *ItemUpsertOne {
	return u.Update(func(s *ItemUpsert) {
		s.ClearSvg()
	})
}

// Exec executes the query.
func (u *ItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ItemUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ItemUpsertOne.ID is not supported by MySQL driver. Use ItemUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ItemUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ItemCreateBulk is the builder for creating many Item entities in bulk.
type ItemCreateBulk struct {
	config
	builders []*ItemCreate
	conflict []sql.ConflictOption
}

// Save creates the Item entities in the database.
func (icb *ItemCreateBulk) Save(ctx context.Context) ([]*Item, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Item, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ItemCreateBulk) SaveX(ctx context.Context) []*Item {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ItemCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ItemCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Item.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ItemUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
//
func (icb *ItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *ItemUpsertBulk {
	icb.conflict = opts
	return &ItemUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Item.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (icb *ItemCreateBulk) OnConflictColumns(columns ...string) *ItemUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &ItemUpsertBulk{
		create: icb,
	}
}

// ItemUpsertBulk is the builder for "upsert"-ing
// a bulk of Item nodes.
type ItemUpsertBulk struct {
	create *ItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Item.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(item.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ItemUpsertBulk) UpdateNewValues() *ItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(item.FieldID)
				return
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(item.FieldType)
			}
			if _, exists := b.mutation.NamePrefix(); exists {
				s.SetIgnore(item.FieldNamePrefix)
			}
			if _, exists := b.mutation.NameSuffix(); exists {
				s.SetIgnore(item.FieldNameSuffix)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(item.FieldName)
			}
			if _, exists := b.mutation.Suffix(); exists {
				s.SetIgnore(item.FieldSuffix)
			}
			if _, exists := b.mutation.Augmented(); exists {
				s.SetIgnore(item.FieldAugmented)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Item.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ItemUpsertBulk) Ignore() *ItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ItemUpsertBulk) DoNothing() *ItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ItemCreateBulk.OnConflict
// documentation for more info.
func (u *ItemUpsertBulk) Update(set func(*ItemUpsert)) *ItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *ItemUpsertBulk) SetType(v item.Type) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateType() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateType()
	})
}

// SetNamePrefix sets the "name_prefix" field.
func (u *ItemUpsertBulk) SetNamePrefix(v string) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetNamePrefix(v)
	})
}

// UpdateNamePrefix sets the "name_prefix" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateNamePrefix() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateNamePrefix()
	})
}

// ClearNamePrefix clears the value of the "name_prefix" field.
func (u *ItemUpsertBulk) ClearNamePrefix() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.ClearNamePrefix()
	})
}

// SetNameSuffix sets the "name_suffix" field.
func (u *ItemUpsertBulk) SetNameSuffix(v string) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetNameSuffix(v)
	})
}

// UpdateNameSuffix sets the "name_suffix" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateNameSuffix() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateNameSuffix()
	})
}

// ClearNameSuffix clears the value of the "name_suffix" field.
func (u *ItemUpsertBulk) ClearNameSuffix() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.ClearNameSuffix()
	})
}

// SetName sets the "name" field.
func (u *ItemUpsertBulk) SetName(v string) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateName() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateName()
	})
}

// SetSuffix sets the "suffix" field.
func (u *ItemUpsertBulk) SetSuffix(v string) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetSuffix(v)
	})
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateSuffix() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateSuffix()
	})
}

// ClearSuffix clears the value of the "suffix" field.
func (u *ItemUpsertBulk) ClearSuffix() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.ClearSuffix()
	})
}

// SetAugmented sets the "augmented" field.
func (u *ItemUpsertBulk) SetAugmented(v bool) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetAugmented(v)
	})
}

// UpdateAugmented sets the "augmented" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateAugmented() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateAugmented()
	})
}

// ClearAugmented clears the value of the "augmented" field.
func (u *ItemUpsertBulk) ClearAugmented() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.ClearAugmented()
	})
}

// SetCount sets the "count" field.
func (u *ItemUpsertBulk) SetCount(v int) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *ItemUpsertBulk) AddCount(v int) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateCount() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateCount()
	})
}

// ClearCount clears the value of the "count" field.
func (u *ItemUpsertBulk) ClearCount() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.ClearCount()
	})
}

// SetTier sets the "tier" field.
func (u *ItemUpsertBulk) SetTier(v item.Tier) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetTier(v)
	})
}

// UpdateTier sets the "tier" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateTier() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateTier()
	})
}

// ClearTier clears the value of the "tier" field.
func (u *ItemUpsertBulk) ClearTier() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.ClearTier()
	})
}

// SetGreatness sets the "greatness" field.
func (u *ItemUpsertBulk) SetGreatness(v int) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetGreatness(v)
	})
}

// AddGreatness adds v to the "greatness" field.
func (u *ItemUpsertBulk) AddGreatness(v int) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.AddGreatness(v)
	})
}

// UpdateGreatness sets the "greatness" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateGreatness() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateGreatness()
	})
}

// ClearGreatness clears the value of the "greatness" field.
func (u *ItemUpsertBulk) ClearGreatness() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.ClearGreatness()
	})
}

// SetRles sets the "rles" field.
func (u *ItemUpsertBulk) SetRles(v schema.RLEs) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetRles(v)
	})
}

// UpdateRles sets the "rles" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateRles() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateRles()
	})
}

// ClearRles clears the value of the "rles" field.
func (u *ItemUpsertBulk) ClearRles() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.ClearRles()
	})
}

// SetSvg sets the "svg" field.
func (u *ItemUpsertBulk) SetSvg(v string) *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.SetSvg(v)
	})
}

// UpdateSvg sets the "svg" field to the value that was provided on create.
func (u *ItemUpsertBulk) UpdateSvg() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.UpdateSvg()
	})
}

// ClearSvg clears the value of the "svg" field.
func (u *ItemUpsertBulk) ClearSvg() *ItemUpsertBulk {
	return u.Update(func(s *ItemUpsert) {
		s.ClearSvg()
	})
}

// Exec executes the query.
func (u *ItemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
