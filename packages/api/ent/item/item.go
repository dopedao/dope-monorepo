// Code generated by entc, DO NOT EDIT.

package item

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the item type in the database.
	Label = "item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldNamePrefix holds the string denoting the name_prefix field in the database.
	FieldNamePrefix = "name_prefix"
	// FieldNameSuffix holds the string denoting the name_suffix field in the database.
	FieldNameSuffix = "name_suffix"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSuffix holds the string denoting the suffix field in the database.
	FieldSuffix = "suffix"
	// FieldAugmented holds the string denoting the augmented field in the database.
	FieldAugmented = "augmented"
	// EdgeDopes holds the string denoting the dopes edge name in mutations.
	EdgeDopes = "dopes"
	// Table holds the table name of the item in the database.
	Table = "items"
	// DopesTable is the table that holds the dopes relation/edge. The primary key declared below.
	DopesTable = "dope_items"
	// DopesInverseTable is the table name for the Dope entity.
	// It exists in this package in order to avoid circular dependency with the "dope" package.
	DopesInverseTable = "dopes"
)

// Columns holds all SQL columns for item fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldNamePrefix,
	FieldNameSuffix,
	FieldName,
	FieldSuffix,
	FieldAugmented,
}

var (
	// DopesPrimaryKey and DopesColumn2 are the table columns denoting the
	// primary key for the dopes relation (M2M).
	DopesPrimaryKey = []string{"dope_id", "item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeWeapon    Type = "weapon"
	TypeClothes   Type = "clothes"
	TypeVehicle   Type = "vehicle"
	TypeWaist     Type = "waist"
	TypeFoot      Type = "foot"
	TypeHand      Type = "hand"
	TypeDrugs     Type = "drugs"
	TypeNeck      Type = "neck"
	TypeRing      Type = "ring"
	TypeAccessory Type = "accessory"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeWeapon, TypeClothes, TypeVehicle, TypeWaist, TypeFoot, TypeHand, TypeDrugs, TypeNeck, TypeRing, TypeAccessory:
		return nil
	default:
		return fmt.Errorf("item: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
