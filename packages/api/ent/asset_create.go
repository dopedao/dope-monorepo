// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/ent/asset"
	"github.com/dopedao/dope-monorepo/packages/api/ent/paymenttoken"
	"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
)

// AssetCreate is the builder for creating a Asset entity.
type AssetCreate struct {
	config
	mutation *AssetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAddress sets the "address" field.
func (ac *AssetCreate) SetAddress(s string) *AssetCreate {
	ac.mutation.SetAddress(s)
	return ac
}

// SetType sets the "type" field.
func (ac *AssetCreate) SetType(a asset.Type) *AssetCreate {
	ac.mutation.SetType(a)
	return ac
}

// SetSymbol sets the "symbol" field.
func (ac *AssetCreate) SetSymbol(s string) *AssetCreate {
	ac.mutation.SetSymbol(s)
	return ac
}

// SetAmount sets the "amount" field.
func (ac *AssetCreate) SetAmount(si schema.BigInt) *AssetCreate {
	ac.mutation.SetAmount(si)
	return ac
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ac *AssetCreate) SetNillableAmount(si *schema.BigInt) *AssetCreate {
	if si != nil {
		ac.SetAmount(*si)
	}
	return ac
}

// SetAssetId sets the "assetId" field.
func (ac *AssetCreate) SetAssetId(si schema.BigInt) *AssetCreate {
	ac.mutation.SetAssetId(si)
	return ac
}

// SetNillableAssetId sets the "assetId" field if the given value is not nil.
func (ac *AssetCreate) SetNillableAssetId(si *schema.BigInt) *AssetCreate {
	if si != nil {
		ac.SetAssetId(*si)
	}
	return ac
}

// SetPrice sets the "price" field.
func (ac *AssetCreate) SetPrice(f float64) *AssetCreate {
	ac.mutation.SetPrice(f)
	return ac
}

// SetID sets the "id" field.
func (ac *AssetCreate) SetID(s string) *AssetCreate {
	ac.mutation.SetID(s)
	return ac
}

// AddPaymentTokenIDs adds the "paymentToken" edge to the PaymentToken entity by IDs.
func (ac *AssetCreate) AddPaymentTokenIDs(ids ...string) *AssetCreate {
	ac.mutation.AddPaymentTokenIDs(ids...)
	return ac
}

// AddPaymentToken adds the "paymentToken" edges to the PaymentToken entity.
func (ac *AssetCreate) AddPaymentToken(p ...*PaymentToken) *AssetCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddPaymentTokenIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (ac *AssetCreate) Mutation() *AssetMutation {
	return ac.mutation
}

// Save creates the Asset in the database.
func (ac *AssetCreate) Save(ctx context.Context) (*Asset, error) {
	var (
		err  error
		node *Asset
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AssetCreate) SaveX(ctx context.Context) *Asset {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AssetCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AssetCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AssetCreate) defaults() {
	if _, ok := ac.mutation.Amount(); !ok {
		v := asset.DefaultAmount()
		ac.mutation.SetAmount(v)
	}
	if _, ok := ac.mutation.AssetId(); !ok {
		v := asset.DefaultAssetId()
		ac.mutation.SetAssetId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AssetCreate) check() error {
	if _, ok := ac.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Asset.address"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Asset.type"`)}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := asset.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Asset.type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Asset.symbol"`)}
	}
	if _, ok := ac.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Asset.amount"`)}
	}
	if _, ok := ac.mutation.AssetId(); !ok {
		return &ValidationError{Name: "assetId", err: errors.New(`ent: missing required field "Asset.assetId"`)}
	}
	if _, ok := ac.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Asset.price"`)}
	}
	return nil
}

func (ac *AssetCreate) sqlSave(ctx context.Context) (*Asset, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Asset.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (ac *AssetCreate) createSpec() (*Asset, *sqlgraph.CreateSpec) {
	var (
		_node = &Asset{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asset.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: asset.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asset.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: asset.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ac.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asset.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := ac.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: asset.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := ac.mutation.AssetId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: asset.FieldAssetId,
		})
		_node.AssetId = value
	}
	if value, ok := ac.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: asset.FieldPrice,
		})
		_node.Price = value
	}
	if nodes := ac.mutation.PaymentTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asset.PaymentTokenTable,
			Columns: asset.PaymentTokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: paymenttoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Asset.Create().
//		SetAddress(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AssetCreate) OnConflict(opts ...sql.ConflictOption) *AssetUpsertOne {
	ac.conflict = opts
	return &AssetUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Asset.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AssetCreate) OnConflictColumns(columns ...string) *AssetUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AssetUpsertOne{
		create: ac,
	}
}

type (
	// AssetUpsertOne is the builder for "upsert"-ing
	//  one Asset node.
	AssetUpsertOne struct {
		create *AssetCreate
	}

	// AssetUpsert is the "OnConflict" setter.
	AssetUpsert struct {
		*sql.UpdateSet
	}
)

// SetAddress sets the "address" field.
func (u *AssetUpsert) SetAddress(v string) *AssetUpsert {
	u.Set(asset.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AssetUpsert) UpdateAddress() *AssetUpsert {
	u.SetExcluded(asset.FieldAddress)
	return u
}

// SetType sets the "type" field.
func (u *AssetUpsert) SetType(v asset.Type) *AssetUpsert {
	u.Set(asset.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AssetUpsert) UpdateType() *AssetUpsert {
	u.SetExcluded(asset.FieldType)
	return u
}

// SetSymbol sets the "symbol" field.
func (u *AssetUpsert) SetSymbol(v string) *AssetUpsert {
	u.Set(asset.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *AssetUpsert) UpdateSymbol() *AssetUpsert {
	u.SetExcluded(asset.FieldSymbol)
	return u
}

// SetAmount sets the "amount" field.
func (u *AssetUpsert) SetAmount(v schema.BigInt) *AssetUpsert {
	u.Set(asset.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *AssetUpsert) UpdateAmount() *AssetUpsert {
	u.SetExcluded(asset.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *AssetUpsert) AddAmount(v schema.BigInt) *AssetUpsert {
	u.Add(asset.FieldAmount, v)
	return u
}

// SetAssetId sets the "assetId" field.
func (u *AssetUpsert) SetAssetId(v schema.BigInt) *AssetUpsert {
	u.Set(asset.FieldAssetId, v)
	return u
}

// UpdateAssetId sets the "assetId" field to the value that was provided on create.
func (u *AssetUpsert) UpdateAssetId() *AssetUpsert {
	u.SetExcluded(asset.FieldAssetId)
	return u
}

// AddAssetId adds v to the "assetId" field.
func (u *AssetUpsert) AddAssetId(v schema.BigInt) *AssetUpsert {
	u.Add(asset.FieldAssetId, v)
	return u
}

// SetPrice sets the "price" field.
func (u *AssetUpsert) SetPrice(v float64) *AssetUpsert {
	u.Set(asset.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AssetUpsert) UpdatePrice() *AssetUpsert {
	u.SetExcluded(asset.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *AssetUpsert) AddPrice(v float64) *AssetUpsert {
	u.Add(asset.FieldPrice, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Asset.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(asset.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AssetUpsertOne) UpdateNewValues() *AssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(asset.FieldID)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(asset.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Asset.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AssetUpsertOne) Ignore() *AssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetUpsertOne) DoNothing() *AssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetCreate.OnConflict
// documentation for more info.
func (u *AssetUpsertOne) Update(set func(*AssetUpsert)) *AssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *AssetUpsertOne) SetAddress(v string) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateAddress() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateAddress()
	})
}

// SetType sets the "type" field.
func (u *AssetUpsertOne) SetType(v asset.Type) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateType() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateType()
	})
}

// SetSymbol sets the "symbol" field.
func (u *AssetUpsertOne) SetSymbol(v string) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateSymbol() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateSymbol()
	})
}

// SetAmount sets the "amount" field.
func (u *AssetUpsertOne) SetAmount(v schema.BigInt) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *AssetUpsertOne) AddAmount(v schema.BigInt) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateAmount() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateAmount()
	})
}

// SetAssetId sets the "assetId" field.
func (u *AssetUpsertOne) SetAssetId(v schema.BigInt) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetAssetId(v)
	})
}

// AddAssetId adds v to the "assetId" field.
func (u *AssetUpsertOne) AddAssetId(v schema.BigInt) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.AddAssetId(v)
	})
}

// UpdateAssetId sets the "assetId" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateAssetId() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateAssetId()
	})
}

// SetPrice sets the "price" field.
func (u *AssetUpsertOne) SetPrice(v float64) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *AssetUpsertOne) AddPrice(v float64) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdatePrice() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdatePrice()
	})
}

// Exec executes the query.
func (u *AssetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AssetUpsertOne.ID is not supported by MySQL driver. Use AssetUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetCreateBulk is the builder for creating many Asset entities in bulk.
type AssetCreateBulk struct {
	config
	builders []*AssetCreate
	conflict []sql.ConflictOption
}

// Save creates the Asset entities in the database.
func (acb *AssetCreateBulk) Save(ctx context.Context) ([]*Asset, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Asset, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AssetCreateBulk) SaveX(ctx context.Context) []*Asset {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AssetCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AssetCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Asset.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AssetCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetUpsertBulk {
	acb.conflict = opts
	return &AssetUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Asset.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AssetCreateBulk) OnConflictColumns(columns ...string) *AssetUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AssetUpsertBulk{
		create: acb,
	}
}

// AssetUpsertBulk is the builder for "upsert"-ing
// a bulk of Asset nodes.
type AssetUpsertBulk struct {
	create *AssetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Asset.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(asset.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AssetUpsertBulk) UpdateNewValues() *AssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(asset.FieldID)
				return
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(asset.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Asset.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AssetUpsertBulk) Ignore() *AssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetUpsertBulk) DoNothing() *AssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetCreateBulk.OnConflict
// documentation for more info.
func (u *AssetUpsertBulk) Update(set func(*AssetUpsert)) *AssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *AssetUpsertBulk) SetAddress(v string) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateAddress() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateAddress()
	})
}

// SetType sets the "type" field.
func (u *AssetUpsertBulk) SetType(v asset.Type) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateType() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateType()
	})
}

// SetSymbol sets the "symbol" field.
func (u *AssetUpsertBulk) SetSymbol(v string) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateSymbol() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateSymbol()
	})
}

// SetAmount sets the "amount" field.
func (u *AssetUpsertBulk) SetAmount(v schema.BigInt) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *AssetUpsertBulk) AddAmount(v schema.BigInt) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateAmount() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateAmount()
	})
}

// SetAssetId sets the "assetId" field.
func (u *AssetUpsertBulk) SetAssetId(v schema.BigInt) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetAssetId(v)
	})
}

// AddAssetId adds v to the "assetId" field.
func (u *AssetUpsertBulk) AddAssetId(v schema.BigInt) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.AddAssetId(v)
	})
}

// UpdateAssetId sets the "assetId" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateAssetId() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateAssetId()
	})
}

// SetPrice sets the "price" field.
func (u *AssetUpsertBulk) SetPrice(v float64) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *AssetUpsertBulk) AddPrice(v float64) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdatePrice() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdatePrice()
	})
}

// Exec executes the query.
func (u *AssetUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
