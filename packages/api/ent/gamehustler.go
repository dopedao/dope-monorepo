



// Code generated by entc, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/schema/field"

)


import (
		"github.com/dopedao/dope-monorepo/packages/api/ent/gamehustler"
		"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
)

// GameHustler is the model entity for the GameHustler schema.
type GameHustler struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// LastPosition holds the value of the "lastPosition" field.
		LastPosition schema.Position `json:"lastPosition,omitempty"`
	// Relations holds the value of the "relations" field.
		Relations []schema.GameHustlerCitizen `json:"relations,omitempty"`
	// Quests holds the value of the "quests" field.
		Quests []schema.GameHustlerQuest `json:"quests,omitempty"`
	// Items holds the value of the "items" field.
		Items []schema.GameHustlerItem `json:"items,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
		CreatedAt time.Time `json:"created_at,omitempty"`
		// Edges holds the relations/edges for other nodes in the graph.
		// The values are being populated by the GameHustlerQuery when eager-loading is set.
		Edges GameHustlerEdges `json:"edges"`
		game_hustler_hustlers *string

	
}
// GameHustlerEdges holds the relations/edges for other nodes in the graph.
type GameHustlerEdges struct {
		// Hustlers holds the value of the hustlers edge.
		Hustlers *Hustler `json:"hustlers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}
	// HustlersOrErr returns the Hustlers value or an error if the edge
	// was not loaded in eager-loading, or loaded but was not found.
	func (e GameHustlerEdges) HustlersOrErr() (*Hustler, error) {
		if e.loadedTypes[0] {
				if e.Hustlers == nil {
					// The edge hustlers was loaded in eager-loading,
					// but was not found.
					return nil, &NotFoundError{label: hustler.Label}
				}
			return e.Hustlers, nil
		}
		return nil, &NotLoadedError{edge: "hustlers"}
	}








	
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
	
	


// scanValues returns the types for scanning values from sql.Rows.
func (*GameHustler) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
				case gamehustler.FieldLastPosition,gamehustler.FieldRelations,gamehustler.FieldQuests,gamehustler.FieldItems:
					values[i] = new([]byte)
				case gamehustler.FieldID:
					values[i] = new(sql.NullString)
				case gamehustler.FieldCreatedAt:
					values[i] = new(sql.NullTime)
				case gamehustler.ForeignKeys[0]: // game_hustler_hustlers
					values[i] = new(sql.NullString)
			default:
				return nil, fmt.Errorf("unexpected column %q for type GameHustler", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameHustler fields.
func (gh *GameHustler) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gamehustler.FieldID:
					if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
					gh.ID = value.String
		}
			case gamehustler.FieldLastPosition:
					if value, ok := values[i].(*[]byte); !ok {
			return fmt.Errorf("unexpected type %T for field lastPosition", values[i])
		} else if value != nil && len(*value) > 0 {
			if err := json.Unmarshal(*value, &gh.LastPosition); err != nil {
				return fmt.Errorf("unmarshal field lastPosition: %w", err)
			}
		}
			case gamehustler.FieldRelations:
					if value, ok := values[i].(*[]byte); !ok {
			return fmt.Errorf("unexpected type %T for field relations", values[i])
		} else if value != nil && len(*value) > 0 {
			if err := json.Unmarshal(*value, &gh.Relations); err != nil {
				return fmt.Errorf("unmarshal field relations: %w", err)
			}
		}
			case gamehustler.FieldQuests:
					if value, ok := values[i].(*[]byte); !ok {
			return fmt.Errorf("unexpected type %T for field quests", values[i])
		} else if value != nil && len(*value) > 0 {
			if err := json.Unmarshal(*value, &gh.Quests); err != nil {
				return fmt.Errorf("unmarshal field quests: %w", err)
			}
		}
			case gamehustler.FieldItems:
					if value, ok := values[i].(*[]byte); !ok {
			return fmt.Errorf("unexpected type %T for field items", values[i])
		} else if value != nil && len(*value) > 0 {
			if err := json.Unmarshal(*value, &gh.Items); err != nil {
				return fmt.Errorf("unmarshal field items: %w", err)
			}
		}
			case gamehustler.FieldCreatedAt:
					if value, ok := values[i].(*sql.NullTime); !ok {
			return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
					gh.CreatedAt = value.Time
		}
			case gamehustler.ForeignKeys[0]:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field game_hustler_hustlers", values[i])
			} else if value.Valid {
					gh.game_hustler_hustlers = new(string)
					*gh.game_hustler_hustlers = value.String
		}
		}
	}
	return nil
}





	
	// QueryHustlers queries the "hustlers" edge of the GameHustler entity.
	func (gh *GameHustler) QueryHustlers() *HustlerQuery {
		return (&GameHustlerClient{config: gh.config}).QueryHustlers(gh)
	}


// Update returns a builder for updating this GameHustler.
// Note that you need to call GameHustler.Unwrap() before calling this method if this GameHustler
// was returned from a transaction, and the transaction was committed or rolled back.
func (gh *GameHustler) Update() *GameHustlerUpdateOne {
	return (&GameHustlerClient{config: gh.config}).UpdateOne(gh)
}

// Unwrap unwraps the GameHustler entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gh *GameHustler) Unwrap() *GameHustler {
	tx, ok := gh.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameHustler is not a transactional entity")
	}
	gh.config.driver = tx.drv
	return gh
}


	

	// String implements the fmt.Stringer.
	func (gh *GameHustler) String() string {
		var builder strings.Builder
		builder.WriteString("GameHustler(")
		builder.WriteString(fmt.Sprintf("id=%v", gh.ID))
					builder.WriteString(", lastPosition=")
						builder.WriteString(fmt.Sprintf("%v", gh.LastPosition))
					builder.WriteString(", relations=")
						builder.WriteString(fmt.Sprintf("%v", gh.Relations))
					builder.WriteString(", quests=")
						builder.WriteString(fmt.Sprintf("%v", gh.Quests))
					builder.WriteString(", items=")
						builder.WriteString(fmt.Sprintf("%v", gh.Items))
					builder.WriteString(", created_at=")
						builder.WriteString(gh.CreatedAt.Format(time.ANSIC))
		builder.WriteByte(')')
		return builder.String()
	}






// GameHustlers is a parsable slice of GameHustler.
type GameHustlers []*GameHustler


	
	



func (gh GameHustlers) config(cfg config) {
	for _i := range gh {
		gh[_i].config = cfg
	}
}
