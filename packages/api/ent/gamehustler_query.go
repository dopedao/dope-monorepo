// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/ent/gamehustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
)

// GameHustlerQuery is the builder for querying GameHustler entities.
type GameHustlerQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GameHustler
	// eager-loading edges.
	withHustlers *HustlerQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameHustlerQuery builder.
func (ghq *GameHustlerQuery) Where(ps ...predicate.GameHustler) *GameHustlerQuery {
	ghq.predicates = append(ghq.predicates, ps...)
	return ghq
}

// Limit adds a limit step to the query.
func (ghq *GameHustlerQuery) Limit(limit int) *GameHustlerQuery {
	ghq.limit = &limit
	return ghq
}

// Offset adds an offset step to the query.
func (ghq *GameHustlerQuery) Offset(offset int) *GameHustlerQuery {
	ghq.offset = &offset
	return ghq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ghq *GameHustlerQuery) Unique(unique bool) *GameHustlerQuery {
	ghq.unique = &unique
	return ghq
}

// Order adds an order step to the query.
func (ghq *GameHustlerQuery) Order(o ...OrderFunc) *GameHustlerQuery {
	ghq.order = append(ghq.order, o...)
	return ghq
}

// QueryHustlers chains the current query on the "hustlers" edge.
func (ghq *GameHustlerQuery) QueryHustlers() *HustlerQuery {
	query := &HustlerQuery{config: ghq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ghq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ghq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamehustler.Table, gamehustler.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, gamehustler.HustlersTable, gamehustler.HustlersColumn),
		)
		fromU = sqlgraph.SetNeighbors(ghq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameHustler entity from the query.
// Returns a *NotFoundError when no GameHustler was found.
func (ghq *GameHustlerQuery) First(ctx context.Context) (*GameHustler, error) {
	nodes, err := ghq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gamehustler.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ghq *GameHustlerQuery) FirstX(ctx context.Context) *GameHustler {
	node, err := ghq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameHustler ID from the query.
// Returns a *NotFoundError when no GameHustler ID was found.
func (ghq *GameHustlerQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ghq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gamehustler.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ghq *GameHustlerQuery) FirstIDX(ctx context.Context) string {
	id, err := ghq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameHustler entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one GameHustler entity is not found.
// Returns a *NotFoundError when no GameHustler entities are found.
func (ghq *GameHustlerQuery) Only(ctx context.Context) (*GameHustler, error) {
	nodes, err := ghq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gamehustler.Label}
	default:
		return nil, &NotSingularError{gamehustler.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ghq *GameHustlerQuery) OnlyX(ctx context.Context) *GameHustler {
	node, err := ghq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameHustler ID in the query.
// Returns a *NotSingularError when exactly one GameHustler ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ghq *GameHustlerQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ghq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gamehustler.Label}
	default:
		err = &NotSingularError{gamehustler.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ghq *GameHustlerQuery) OnlyIDX(ctx context.Context) string {
	id, err := ghq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameHustlers.
func (ghq *GameHustlerQuery) All(ctx context.Context) ([]*GameHustler, error) {
	if err := ghq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ghq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ghq *GameHustlerQuery) AllX(ctx context.Context) []*GameHustler {
	nodes, err := ghq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameHustler IDs.
func (ghq *GameHustlerQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := ghq.Select(gamehustler.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ghq *GameHustlerQuery) IDsX(ctx context.Context) []string {
	ids, err := ghq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ghq *GameHustlerQuery) Count(ctx context.Context) (int, error) {
	if err := ghq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ghq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ghq *GameHustlerQuery) CountX(ctx context.Context) int {
	count, err := ghq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ghq *GameHustlerQuery) Exist(ctx context.Context) (bool, error) {
	if err := ghq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ghq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ghq *GameHustlerQuery) ExistX(ctx context.Context) bool {
	exist, err := ghq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameHustlerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ghq *GameHustlerQuery) Clone() *GameHustlerQuery {
	if ghq == nil {
		return nil
	}
	return &GameHustlerQuery{
		config:       ghq.config,
		limit:        ghq.limit,
		offset:       ghq.offset,
		order:        append([]OrderFunc{}, ghq.order...),
		predicates:   append([]predicate.GameHustler{}, ghq.predicates...),
		withHustlers: ghq.withHustlers.Clone(),
		// clone intermediate query.
		sql:  ghq.sql.Clone(),
		path: ghq.path,
	}
}

// WithHustlers tells the query-builder to eager-load the nodes that are connected to
// the "hustlers" edge. The optional arguments are used to configure the query builder of the edge.
func (ghq *GameHustlerQuery) WithHustlers(opts ...func(*HustlerQuery)) *GameHustlerQuery {
	query := &HustlerQuery{config: ghq.config}
	for _, opt := range opts {
		opt(query)
	}
	ghq.withHustlers = query
	return ghq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LastPosition schema.Position `json:"lastPosition,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameHustler.Query().
//		GroupBy(gamehustler.FieldLastPosition).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ghq *GameHustlerQuery) GroupBy(field string, fields ...string) *GameHustlerGroupBy {
	group := &GameHustlerGroupBy{config: ghq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ghq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ghq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LastPosition schema.Position `json:"lastPosition,omitempty"`
//	}
//
//	client.GameHustler.Query().
//		Select(gamehustler.FieldLastPosition).
//		Scan(ctx, &v)
//
func (ghq *GameHustlerQuery) Select(fields ...string) *GameHustlerSelect {
	ghq.fields = append(ghq.fields, fields...)
	return &GameHustlerSelect{GameHustlerQuery: ghq}
}

func (ghq *GameHustlerQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ghq.fields {
		if !gamehustler.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ghq.path != nil {
		prev, err := ghq.path(ctx)
		if err != nil {
			return err
		}
		ghq.sql = prev
	}
	return nil
}

func (ghq *GameHustlerQuery) sqlAll(ctx context.Context) ([]*GameHustler, error) {
	var (
		nodes       = []*GameHustler{}
		withFKs     = ghq.withFKs
		_spec       = ghq.querySpec()
		loadedTypes = [1]bool{
			ghq.withHustlers != nil,
		}
	)
	if ghq.withHustlers != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gamehustler.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &GameHustler{config: ghq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ghq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ghq.withHustlers; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*GameHustler)
		for i := range nodes {
			if nodes[i].game_hustler_hustlers == nil {
				continue
			}
			fk := *nodes[i].game_hustler_hustlers
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(hustler.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "game_hustler_hustlers" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Hustlers = n
			}
		}
	}

	return nodes, nil
}

func (ghq *GameHustlerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ghq.querySpec()
	_spec.Node.Columns = ghq.fields
	if len(ghq.fields) > 0 {
		_spec.Unique = ghq.unique != nil && *ghq.unique
	}
	return sqlgraph.CountNodes(ctx, ghq.driver, _spec)
}

func (ghq *GameHustlerQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ghq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ghq *GameHustlerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gamehustler.Table,
			Columns: gamehustler.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: gamehustler.FieldID,
			},
		},
		From:   ghq.sql,
		Unique: true,
	}
	if unique := ghq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ghq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamehustler.FieldID)
		for i := range fields {
			if fields[i] != gamehustler.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ghq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ghq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ghq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ghq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ghq *GameHustlerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ghq.driver.Dialect())
	t1 := builder.Table(gamehustler.Table)
	columns := ghq.fields
	if len(columns) == 0 {
		columns = gamehustler.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ghq.sql != nil {
		selector = ghq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ghq.unique != nil && *ghq.unique {
		selector.Distinct()
	}
	for _, p := range ghq.predicates {
		p(selector)
	}
	for _, p := range ghq.order {
		p(selector)
	}
	if offset := ghq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ghq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameHustlerGroupBy is the group-by builder for GameHustler entities.
type GameHustlerGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ghgb *GameHustlerGroupBy) Aggregate(fns ...AggregateFunc) *GameHustlerGroupBy {
	ghgb.fns = append(ghgb.fns, fns...)
	return ghgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ghgb *GameHustlerGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ghgb.path(ctx)
	if err != nil {
		return err
	}
	ghgb.sql = query
	return ghgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ghgb *GameHustlerGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ghgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghgb *GameHustlerGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ghgb.fields) > 1 {
		return nil, errors.New("ent: GameHustlerGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ghgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ghgb *GameHustlerGroupBy) StringsX(ctx context.Context) []string {
	v, err := ghgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghgb *GameHustlerGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ghgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustler.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ghgb *GameHustlerGroupBy) StringX(ctx context.Context) string {
	v, err := ghgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghgb *GameHustlerGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ghgb.fields) > 1 {
		return nil, errors.New("ent: GameHustlerGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ghgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ghgb *GameHustlerGroupBy) IntsX(ctx context.Context) []int {
	v, err := ghgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghgb *GameHustlerGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ghgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustler.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ghgb *GameHustlerGroupBy) IntX(ctx context.Context) int {
	v, err := ghgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghgb *GameHustlerGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ghgb.fields) > 1 {
		return nil, errors.New("ent: GameHustlerGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ghgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ghgb *GameHustlerGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ghgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghgb *GameHustlerGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ghgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustler.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ghgb *GameHustlerGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ghgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghgb *GameHustlerGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ghgb.fields) > 1 {
		return nil, errors.New("ent: GameHustlerGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ghgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ghgb *GameHustlerGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ghgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghgb *GameHustlerGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ghgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustler.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ghgb *GameHustlerGroupBy) BoolX(ctx context.Context) bool {
	v, err := ghgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ghgb *GameHustlerGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ghgb.fields {
		if !gamehustler.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ghgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ghgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ghgb *GameHustlerGroupBy) sqlQuery() *sql.Selector {
	selector := ghgb.sql.Select()
	aggregation := make([]string, 0, len(ghgb.fns))
	for _, fn := range ghgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ghgb.fields)+len(ghgb.fns))
		for _, f := range ghgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ghgb.fields...)...)
}

// GameHustlerSelect is the builder for selecting fields of GameHustler entities.
type GameHustlerSelect struct {
	*GameHustlerQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ghs *GameHustlerSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ghs.prepareQuery(ctx); err != nil {
		return err
	}
	ghs.sql = ghs.GameHustlerQuery.sqlQuery(ctx)
	return ghs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ghs *GameHustlerSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ghs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ghs *GameHustlerSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ghs.fields) > 1 {
		return nil, errors.New("ent: GameHustlerSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ghs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ghs *GameHustlerSelect) StringsX(ctx context.Context) []string {
	v, err := ghs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ghs *GameHustlerSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ghs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustler.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ghs *GameHustlerSelect) StringX(ctx context.Context) string {
	v, err := ghs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ghs *GameHustlerSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ghs.fields) > 1 {
		return nil, errors.New("ent: GameHustlerSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ghs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ghs *GameHustlerSelect) IntsX(ctx context.Context) []int {
	v, err := ghs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ghs *GameHustlerSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ghs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustler.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ghs *GameHustlerSelect) IntX(ctx context.Context) int {
	v, err := ghs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ghs *GameHustlerSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ghs.fields) > 1 {
		return nil, errors.New("ent: GameHustlerSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ghs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ghs *GameHustlerSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ghs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ghs *GameHustlerSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ghs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustler.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ghs *GameHustlerSelect) Float64X(ctx context.Context) float64 {
	v, err := ghs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ghs *GameHustlerSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ghs.fields) > 1 {
		return nil, errors.New("ent: GameHustlerSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ghs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ghs *GameHustlerSelect) BoolsX(ctx context.Context) []bool {
	v, err := ghs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ghs *GameHustlerSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ghs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{gamehustler.Label}
	default:
		err = fmt.Errorf("ent: GameHustlerSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ghs *GameHustlerSelect) BoolX(ctx context.Context) bool {
	v, err := ghs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ghs *GameHustlerSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ghs.sql.Query()
	if err := ghs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
