// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"
)

// Hustler is the model entity for the Hustler schema.
type Hustler struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type hustler.Type `json:"type,omitempty"`
	// NamePrefix holds the value of the "name_prefix" field.
	NamePrefix string `json:"name_prefix,omitempty"`
	// NameSuffix holds the value of the "name_suffix" field.
	NameSuffix string `json:"name_suffix,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Suffix holds the value of the "suffix" field.
	Suffix string `json:"suffix,omitempty"`
	// Augmented holds the value of the "augmented" field.
	Augmented bool `json:"augmented,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HustlerQuery when eager-loading is set.
	Edges           HustlerEdges `json:"edges"`
	wallet_hustlers *string
}

// HustlerEdges holds the relations/edges for other nodes in the graph.
type HustlerEdges struct {
	// Wallet holds the value of the wallet edge.
	Wallet *Wallet `json:"wallet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WalletOrErr returns the Wallet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HustlerEdges) WalletOrErr() (*Wallet, error) {
	if e.loadedTypes[0] {
		if e.Wallet == nil {
			// The edge wallet was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: wallet.Label}
		}
		return e.Wallet, nil
	}
	return nil, &NotLoadedError{edge: "wallet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hustler) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case hustler.FieldAugmented:
			values[i] = new(sql.NullBool)
		case hustler.FieldID, hustler.FieldType, hustler.FieldNamePrefix, hustler.FieldNameSuffix, hustler.FieldName, hustler.FieldSuffix:
			values[i] = new(sql.NullString)
		case hustler.ForeignKeys[0]: // wallet_hustlers
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Hustler", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hustler fields.
func (h *Hustler) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hustler.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				h.ID = value.String
			}
		case hustler.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				h.Type = hustler.Type(value.String)
			}
		case hustler.FieldNamePrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_prefix", values[i])
			} else if value.Valid {
				h.NamePrefix = value.String
			}
		case hustler.FieldNameSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_suffix", values[i])
			} else if value.Valid {
				h.NameSuffix = value.String
			}
		case hustler.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case hustler.FieldSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suffix", values[i])
			} else if value.Valid {
				h.Suffix = value.String
			}
		case hustler.FieldAugmented:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field augmented", values[i])
			} else if value.Valid {
				h.Augmented = value.Bool
			}
		case hustler.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_hustlers", values[i])
			} else if value.Valid {
				h.wallet_hustlers = new(string)
				*h.wallet_hustlers = value.String
			}
		}
	}
	return nil
}

// QueryWallet queries the "wallet" edge of the Hustler entity.
func (h *Hustler) QueryWallet() *WalletQuery {
	return (&HustlerClient{config: h.config}).QueryWallet(h)
}

// Update returns a builder for updating this Hustler.
// Note that you need to call Hustler.Unwrap() before calling this method if this Hustler
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hustler) Update() *HustlerUpdateOne {
	return (&HustlerClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Hustler entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hustler) Unwrap() *Hustler {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hustler is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hustler) String() string {
	var builder strings.Builder
	builder.WriteString("Hustler(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", h.Type))
	builder.WriteString(", name_prefix=")
	builder.WriteString(h.NamePrefix)
	builder.WriteString(", name_suffix=")
	builder.WriteString(h.NameSuffix)
	builder.WriteString(", name=")
	builder.WriteString(h.Name)
	builder.WriteString(", suffix=")
	builder.WriteString(h.Suffix)
	builder.WriteString(", augmented=")
	builder.WriteString(fmt.Sprintf("%v", h.Augmented))
	builder.WriteByte(')')
	return builder.String()
}

// Hustlers is a parsable slice of Hustler.
type Hustlers []*Hustler

func (h Hustlers) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
