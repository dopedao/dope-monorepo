
// Code generated by entc, DO NOT EDIT.



	

package gamehustler




import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/schema/field"

)


const (
	// Label holds the string label denoting the gamehustler type in the database.
	Label = "game_hustler"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
		// FieldLastPosition holds the string denoting the lastposition field in the database.
		FieldLastPosition = "last_position"
		// FieldRelations holds the string denoting the relations field in the database.
		FieldRelations = "relations"
		// FieldQuests holds the string denoting the quests field in the database.
		FieldQuests = "quests"
		// FieldItems holds the string denoting the items field in the database.
		FieldItems = "items"
		// FieldCreatedAt holds the string denoting the created_at field in the database.
		FieldCreatedAt = "created_at"
		// EdgeHustlers holds the string denoting the hustlers edge name in mutations.
		EdgeHustlers = "hustlers"
	// Table holds the table name of the gamehustler in the database.
	Table = "game_hustlers"
		// HustlersTable is the table that holds the hustlers relation/edge.
		HustlersTable = "game_hustlers"
			// HustlersInverseTable is the table name for the Hustler entity.
			// It exists in this package in order to avoid circular dependency with the "hustler" package.
			HustlersInverseTable = "hustlers"
			// HustlersColumn is the table column denoting the hustlers relation/edge.
			HustlersColumn = "game_hustler_hustlers"

)



	
	// Columns holds all SQL columns for gamehustler fields.
	var Columns = []string{
		FieldID,
			FieldLastPosition,
			FieldRelations,
			FieldQuests,
			FieldItems,
			FieldCreatedAt,
	}
	
	
		// ForeignKeys holds the SQL foreign-keys that are owned by the "game_hustlers"
		// table and are not defined as standalone fields in the schema.
		var ForeignKeys = []string{
				"game_hustler_hustlers",
		}
	

	





	
// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
		for i := range ForeignKeys {
			if column == ForeignKeys[i] {
				return true
			}
		}
	return false
}









	var (
				// DefaultCreatedAt holds the default value on creation for the "created_at" field.
				DefaultCreatedAt func() time.Time
	)








	
		



	


