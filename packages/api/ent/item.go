// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type item.Type `json:"type,omitempty"`
	// NamePrefix holds the value of the "name_prefix" field.
	NamePrefix string `json:"name_prefix,omitempty"`
	// NameSuffix holds the value of the "name_suffix" field.
	NameSuffix string `json:"name_suffix,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Suffix holds the value of the "suffix" field.
	Suffix string `json:"suffix,omitempty"`
	// Augmented holds the value of the "augmented" field.
	Augmented bool `json:"augmented,omitempty"`
	// Rles holds the value of the "rles" field.
	Rles schema.RLEs `json:"rles,omitempty"`
	// Svg holds the value of the "svg" field.
	Svg string `json:"svg,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemQuery when eager-loading is set.
	Edges           ItemEdges `json:"edges"`
	hustler_items   *string
	item_derivative *string
}

// ItemEdges holds the relations/edges for other nodes in the graph.
type ItemEdges struct {
	// Wallets holds the value of the wallets edge.
	Wallets []*WalletItems `json:"wallets,omitempty"`
	// Hustler holds the value of the hustler edge.
	Hustler *Hustler `json:"hustler,omitempty"`
	// Dopes holds the value of the dopes edge.
	Dopes []*Dope `json:"dopes,omitempty"`
	// Base holds the value of the base edge.
	Base *Item `json:"base,omitempty"`
	// Derivative holds the value of the derivative edge.
	Derivative []*Item `json:"derivative,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// WalletsOrErr returns the Wallets value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) WalletsOrErr() ([]*WalletItems, error) {
	if e.loadedTypes[0] {
		return e.Wallets, nil
	}
	return nil, &NotLoadedError{edge: "wallets"}
}

// HustlerOrErr returns the Hustler value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemEdges) HustlerOrErr() (*Hustler, error) {
	if e.loadedTypes[1] {
		if e.Hustler == nil {
			// The edge hustler was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: hustler.Label}
		}
		return e.Hustler, nil
	}
	return nil, &NotLoadedError{edge: "hustler"}
}

// DopesOrErr returns the Dopes value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) DopesOrErr() ([]*Dope, error) {
	if e.loadedTypes[2] {
		return e.Dopes, nil
	}
	return nil, &NotLoadedError{edge: "dopes"}
}

// BaseOrErr returns the Base value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemEdges) BaseOrErr() (*Item, error) {
	if e.loadedTypes[3] {
		if e.Base == nil {
			// The edge base was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: item.Label}
		}
		return e.Base, nil
	}
	return nil, &NotLoadedError{edge: "base"}
}

// DerivativeOrErr returns the Derivative value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) DerivativeOrErr() ([]*Item, error) {
	if e.loadedTypes[4] {
		return e.Derivative, nil
	}
	return nil, &NotLoadedError{edge: "derivative"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldRles:
			values[i] = new([]byte)
		case item.FieldAugmented:
			values[i] = new(sql.NullBool)
		case item.FieldID, item.FieldType, item.FieldNamePrefix, item.FieldNameSuffix, item.FieldName, item.FieldSuffix, item.FieldSvg:
			values[i] = new(sql.NullString)
		case item.ForeignKeys[0]: // hustler_items
			values[i] = new(sql.NullString)
		case item.ForeignKeys[1]: // item_derivative
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Item", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = value.String
			}
		case item.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = item.Type(value.String)
			}
		case item.FieldNamePrefix:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_prefix", values[j])
			} else if value.Valid {
				i.NamePrefix = value.String
			}
		case item.FieldNameSuffix:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_suffix", values[j])
			} else if value.Valid {
				i.NameSuffix = value.String
			}
		case item.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case item.FieldSuffix:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suffix", values[j])
			} else if value.Valid {
				i.Suffix = value.String
			}
		case item.FieldAugmented:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field augmented", values[j])
			} else if value.Valid {
				i.Augmented = value.Bool
			}
		case item.FieldRles:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rles", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Rles); err != nil {
					return fmt.Errorf("unmarshal field rles: %w", err)
				}
			}
		case item.FieldSvg:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field svg", values[j])
			} else if value.Valid {
				i.Svg = value.String
			}
		case item.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hustler_items", values[j])
			} else if value.Valid {
				i.hustler_items = new(string)
				*i.hustler_items = value.String
			}
		case item.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_derivative", values[j])
			} else if value.Valid {
				i.item_derivative = new(string)
				*i.item_derivative = value.String
			}
		}
	}
	return nil
}

// QueryWallets queries the "wallets" edge of the Item entity.
func (i *Item) QueryWallets() *WalletItemsQuery {
	return (&ItemClient{config: i.config}).QueryWallets(i)
}

// QueryHustler queries the "hustler" edge of the Item entity.
func (i *Item) QueryHustler() *HustlerQuery {
	return (&ItemClient{config: i.config}).QueryHustler(i)
}

// QueryDopes queries the "dopes" edge of the Item entity.
func (i *Item) QueryDopes() *DopeQuery {
	return (&ItemClient{config: i.config}).QueryDopes(i)
}

// QueryBase queries the "base" edge of the Item entity.
func (i *Item) QueryBase() *ItemQuery {
	return (&ItemClient{config: i.config}).QueryBase(i)
}

// QueryDerivative queries the "derivative" edge of the Item entity.
func (i *Item) QueryDerivative() *ItemQuery {
	return (&ItemClient{config: i.config}).QueryDerivative(i)
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return (&ItemClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", i.Type))
	builder.WriteString(", name_prefix=")
	builder.WriteString(i.NamePrefix)
	builder.WriteString(", name_suffix=")
	builder.WriteString(i.NameSuffix)
	builder.WriteString(", name=")
	builder.WriteString(i.Name)
	builder.WriteString(", suffix=")
	builder.WriteString(i.Suffix)
	builder.WriteString(", augmented=")
	builder.WriteString(fmt.Sprintf("%v", i.Augmented))
	builder.WriteString(", rles=")
	builder.WriteString(fmt.Sprintf("%v", i.Rles))
	builder.WriteString(", svg=")
	builder.WriteString(i.Svg)
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item

func (i Items) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
