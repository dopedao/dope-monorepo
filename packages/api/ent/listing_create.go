// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/ent/amount"
	"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/ent/listing"
)

// ListingCreate is the builder for creating a Listing entity.
type ListingCreate struct {
	config
	mutation *ListingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetActive sets the "active" field.
func (lc *ListingCreate) SetActive(b bool) *ListingCreate {
	lc.mutation.SetActive(b)
	return lc
}

// SetSource sets the "source" field.
func (lc *ListingCreate) SetSource(l listing.Source) *ListingCreate {
	lc.mutation.SetSource(l)
	return lc
}

// SetID sets the "id" field.
func (lc *ListingCreate) SetID(s string) *ListingCreate {
	lc.mutation.SetID(s)
	return lc
}

// SetDopeID sets the "dope" edge to the Dope entity by ID.
func (lc *ListingCreate) SetDopeID(id string) *ListingCreate {
	lc.mutation.SetDopeID(id)
	return lc
}

// SetNillableDopeID sets the "dope" edge to the Dope entity by ID if the given value is not nil.
func (lc *ListingCreate) SetNillableDopeID(id *string) *ListingCreate {
	if id != nil {
		lc = lc.SetDopeID(*id)
	}
	return lc
}

// SetDope sets the "dope" edge to the Dope entity.
func (lc *ListingCreate) SetDope(d *Dope) *ListingCreate {
	return lc.SetDopeID(d.ID)
}

// SetDopeLastsalesID sets the "dope_lastsales" edge to the Dope entity by ID.
func (lc *ListingCreate) SetDopeLastsalesID(id string) *ListingCreate {
	lc.mutation.SetDopeLastsalesID(id)
	return lc
}

// SetNillableDopeLastsalesID sets the "dope_lastsales" edge to the Dope entity by ID if the given value is not nil.
func (lc *ListingCreate) SetNillableDopeLastsalesID(id *string) *ListingCreate {
	if id != nil {
		lc = lc.SetDopeLastsalesID(*id)
	}
	return lc
}

// SetDopeLastsales sets the "dope_lastsales" edge to the Dope entity.
func (lc *ListingCreate) SetDopeLastsales(d *Dope) *ListingCreate {
	return lc.SetDopeLastsalesID(d.ID)
}

// AddInputIDs adds the "inputs" edge to the Amount entity by IDs.
func (lc *ListingCreate) AddInputIDs(ids ...string) *ListingCreate {
	lc.mutation.AddInputIDs(ids...)
	return lc
}

// AddInputs adds the "inputs" edges to the Amount entity.
func (lc *ListingCreate) AddInputs(a ...*Amount) *ListingCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lc.AddInputIDs(ids...)
}

// AddOutputIDs adds the "outputs" edge to the Amount entity by IDs.
func (lc *ListingCreate) AddOutputIDs(ids ...string) *ListingCreate {
	lc.mutation.AddOutputIDs(ids...)
	return lc
}

// AddOutputs adds the "outputs" edges to the Amount entity.
func (lc *ListingCreate) AddOutputs(a ...*Amount) *ListingCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lc.AddOutputIDs(ids...)
}

// Mutation returns the ListingMutation object of the builder.
func (lc *ListingCreate) Mutation() *ListingMutation {
	return lc.mutation
}

// Save creates the Listing in the database.
func (lc *ListingCreate) Save(ctx context.Context) (*Listing, error) {
	var (
		err  error
		node *Listing
	)
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ListingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			if node, err = lc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			if lc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *ListingCreate) SaveX(ctx context.Context) *Listing {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *ListingCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *ListingCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *ListingCreate) check() error {
	if _, ok := lc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Listing.active"`)}
	}
	if _, ok := lc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "Listing.source"`)}
	}
	if v, ok := lc.mutation.Source(); ok {
		if err := listing.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "Listing.source": %w`, err)}
		}
	}
	return nil
}

func (lc *ListingCreate) sqlSave(ctx context.Context) (*Listing, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Listing.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (lc *ListingCreate) createSpec() (*Listing, *sqlgraph.CreateSpec) {
	var (
		_node = &Listing{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: listing.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: listing.FieldID,
			},
		}
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: listing.FieldActive,
		})
		_node.Active = value
	}
	if value, ok := lc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: listing.FieldSource,
		})
		_node.Source = value
	}
	if nodes := lc.mutation.DopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listing.DopeTable,
			Columns: []string{listing.DopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: dope.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.dope_listings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.DopeLastsalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   listing.DopeLastsalesTable,
			Columns: []string{listing.DopeLastsalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: dope.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.InputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.InputsTable,
			Columns: []string{listing.InputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: amount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.OutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.OutputsTable,
			Columns: []string{listing.OutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: amount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Listing.Create().
//		SetActive(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ListingUpsert) {
//			SetActive(v+v).
//		}).
//		Exec(ctx)
//
func (lc *ListingCreate) OnConflict(opts ...sql.ConflictOption) *ListingUpsertOne {
	lc.conflict = opts
	return &ListingUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Listing.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lc *ListingCreate) OnConflictColumns(columns ...string) *ListingUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &ListingUpsertOne{
		create: lc,
	}
}

type (
	// ListingUpsertOne is the builder for "upsert"-ing
	//  one Listing node.
	ListingUpsertOne struct {
		create *ListingCreate
	}

	// ListingUpsert is the "OnConflict" setter.
	ListingUpsert struct {
		*sql.UpdateSet
	}
)

// SetActive sets the "active" field.
func (u *ListingUpsert) SetActive(v bool) *ListingUpsert {
	u.Set(listing.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ListingUpsert) UpdateActive() *ListingUpsert {
	u.SetExcluded(listing.FieldActive)
	return u
}

// SetSource sets the "source" field.
func (u *ListingUpsert) SetSource(v listing.Source) *ListingUpsert {
	u.Set(listing.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ListingUpsert) UpdateSource() *ListingUpsert {
	u.SetExcluded(listing.FieldSource)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Listing.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(listing.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ListingUpsertOne) UpdateNewValues() *ListingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(listing.FieldID)
		}
		if _, exists := u.create.mutation.Source(); exists {
			s.SetIgnore(listing.FieldSource)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Listing.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ListingUpsertOne) Ignore() *ListingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ListingUpsertOne) DoNothing() *ListingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ListingCreate.OnConflict
// documentation for more info.
func (u *ListingUpsertOne) Update(set func(*ListingUpsert)) *ListingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ListingUpsert{UpdateSet: update})
	}))
	return u
}

// SetActive sets the "active" field.
func (u *ListingUpsertOne) SetActive(v bool) *ListingUpsertOne {
	return u.Update(func(s *ListingUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ListingUpsertOne) UpdateActive() *ListingUpsertOne {
	return u.Update(func(s *ListingUpsert) {
		s.UpdateActive()
	})
}

// SetSource sets the "source" field.
func (u *ListingUpsertOne) SetSource(v listing.Source) *ListingUpsertOne {
	return u.Update(func(s *ListingUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ListingUpsertOne) UpdateSource() *ListingUpsertOne {
	return u.Update(func(s *ListingUpsert) {
		s.UpdateSource()
	})
}

// Exec executes the query.
func (u *ListingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ListingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ListingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ListingUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ListingUpsertOne.ID is not supported by MySQL driver. Use ListingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ListingUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ListingCreateBulk is the builder for creating many Listing entities in bulk.
type ListingCreateBulk struct {
	config
	builders []*ListingCreate
	conflict []sql.ConflictOption
}

// Save creates the Listing entities in the database.
func (lcb *ListingCreateBulk) Save(ctx context.Context) ([]*Listing, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Listing, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ListingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *ListingCreateBulk) SaveX(ctx context.Context) []*Listing {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *ListingCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *ListingCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Listing.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ListingUpsert) {
//			SetActive(v+v).
//		}).
//		Exec(ctx)
//
func (lcb *ListingCreateBulk) OnConflict(opts ...sql.ConflictOption) *ListingUpsertBulk {
	lcb.conflict = opts
	return &ListingUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Listing.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lcb *ListingCreateBulk) OnConflictColumns(columns ...string) *ListingUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &ListingUpsertBulk{
		create: lcb,
	}
}

// ListingUpsertBulk is the builder for "upsert"-ing
// a bulk of Listing nodes.
type ListingUpsertBulk struct {
	create *ListingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Listing.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(listing.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ListingUpsertBulk) UpdateNewValues() *ListingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(listing.FieldID)
				return
			}
			if _, exists := b.mutation.Source(); exists {
				s.SetIgnore(listing.FieldSource)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Listing.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ListingUpsertBulk) Ignore() *ListingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ListingUpsertBulk) DoNothing() *ListingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ListingCreateBulk.OnConflict
// documentation for more info.
func (u *ListingUpsertBulk) Update(set func(*ListingUpsert)) *ListingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ListingUpsert{UpdateSet: update})
	}))
	return u
}

// SetActive sets the "active" field.
func (u *ListingUpsertBulk) SetActive(v bool) *ListingUpsertBulk {
	return u.Update(func(s *ListingUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ListingUpsertBulk) UpdateActive() *ListingUpsertBulk {
	return u.Update(func(s *ListingUpsert) {
		s.UpdateActive()
	})
}

// SetSource sets the "source" field.
func (u *ListingUpsertBulk) SetSource(v listing.Source) *ListingUpsertBulk {
	return u.Update(func(s *ListingUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ListingUpsertBulk) UpdateSource() *ListingUpsertBulk {
	return u.Update(func(s *ListingUpsert) {
		s.UpdateSource()
	})
}

// Exec executes the query.
func (u *ListingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ListingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ListingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ListingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
