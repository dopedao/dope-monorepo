// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (bp *BodyPart) HustlerBodies(ctx context.Context) ([]*Hustler, error) {
	result, err := bp.Edges.HustlerBodiesOrErr()
	if IsNotLoaded(err) {
		result, err = bp.QueryHustlerBodies().All(ctx)
	}
	return result, err
}

func (bp *BodyPart) HustlerHairs(ctx context.Context) ([]*Hustler, error) {
	result, err := bp.Edges.HustlerHairsOrErr()
	if IsNotLoaded(err) {
		result, err = bp.QueryHustlerHairs().All(ctx)
	}
	return result, err
}

func (bp *BodyPart) HustlerBeards(ctx context.Context) ([]*Hustler, error) {
	result, err := bp.Edges.HustlerBeardsOrErr()
	if IsNotLoaded(err) {
		result, err = bp.QueryHustlerBeards().All(ctx)
	}
	return result, err
}

func (d *Dope) Wallet(ctx context.Context) (*Wallet, error) {
	result, err := d.Edges.WalletOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryWallet().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Dope) Items(ctx context.Context) ([]*Item, error) {
	result, err := d.Edges.ItemsOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryItems().All(ctx)
	}
	return result, err
}

func (h *Hustler) Wallet(ctx context.Context) (*Wallet, error) {
	result, err := h.Edges.WalletOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryWallet().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Hustler) Items(ctx context.Context) ([]*Item, error) {
	result, err := h.Edges.ItemsOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryItems().All(ctx)
	}
	return result, err
}

func (h *Hustler) Body(ctx context.Context) (*BodyPart, error) {
	result, err := h.Edges.BodyOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryBody().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Hustler) Hair(ctx context.Context) (*BodyPart, error) {
	result, err := h.Edges.HairOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryHair().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Hustler) Beard(ctx context.Context) (*BodyPart, error) {
	result, err := h.Edges.BeardOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryBeard().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Item) Wallets(ctx context.Context) ([]*WalletItems, error) {
	result, err := i.Edges.WalletsOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryWallets().All(ctx)
	}
	return result, err
}

func (i *Item) Hustler(ctx context.Context) (*Hustler, error) {
	result, err := i.Edges.HustlerOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryHustler().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Item) Dopes(ctx context.Context) ([]*Dope, error) {
	result, err := i.Edges.DopesOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryDopes().All(ctx)
	}
	return result, err
}

func (i *Item) Base(ctx context.Context) (*Item, error) {
	result, err := i.Edges.BaseOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryBase().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Item) Derivative(ctx context.Context) ([]*Item, error) {
	result, err := i.Edges.DerivativeOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryDerivative().All(ctx)
	}
	return result, err
}

func (w *Wallet) Dopes(ctx context.Context) ([]*Dope, error) {
	result, err := w.Edges.DopesOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryDopes().All(ctx)
	}
	return result, err
}

func (w *Wallet) Items(ctx context.Context) ([]*WalletItems, error) {
	result, err := w.Edges.ItemsOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryItems().All(ctx)
	}
	return result, err
}

func (w *Wallet) Hustlers(ctx context.Context) ([]*Hustler, error) {
	result, err := w.Edges.HustlersOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryHustlers().All(ctx)
	}
	return result, err
}

func (wi *WalletItems) Wallet(ctx context.Context) (*Wallet, error) {
	result, err := wi.Edges.WalletOrErr()
	if IsNotLoaded(err) {
		result, err = wi.QueryWallet().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wi *WalletItems) Item(ctx context.Context) (*Item, error) {
	result, err := wi.Edges.ItemOrErr()
	if IsNotLoaded(err) {
		result, err = wi.QueryItem().Only(ctx)
	}
	return result, MaskNotFound(err)
}
