// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"
)

// Dope is the model entity for the Dope schema.
type Dope struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Claimed holds the value of the "claimed" field.
	Claimed bool `json:"claimed,omitempty"`
	// Opened holds the value of the "opened" field.
	Opened bool `json:"opened,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DopeQuery when eager-loading is set.
	Edges        DopeEdges `json:"edges"`
	wallet_dopes *string
}

// DopeEdges holds the relations/edges for other nodes in the graph.
type DopeEdges struct {
	// Wallet holds the value of the wallet edge.
	Wallet *Wallet `json:"wallet,omitempty"`
	// Items holds the value of the items edge.
	Items []*Item `json:"items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WalletOrErr returns the Wallet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DopeEdges) WalletOrErr() (*Wallet, error) {
	if e.loadedTypes[0] {
		if e.Wallet == nil {
			// The edge wallet was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: wallet.Label}
		}
		return e.Wallet, nil
	}
	return nil, &NotLoadedError{edge: "wallet"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e DopeEdges) ItemsOrErr() ([]*Item, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dope) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dope.FieldClaimed, dope.FieldOpened:
			values[i] = new(sql.NullBool)
		case dope.FieldOrder:
			values[i] = new(sql.NullInt64)
		case dope.FieldID:
			values[i] = new(sql.NullString)
		case dope.ForeignKeys[0]: // wallet_dopes
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dope", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dope fields.
func (d *Dope) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dope.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = value.String
			}
		case dope.FieldClaimed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field claimed", values[i])
			} else if value.Valid {
				d.Claimed = value.Bool
			}
		case dope.FieldOpened:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field opened", values[i])
			} else if value.Valid {
				d.Opened = value.Bool
			}
		case dope.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				d.Order = int(value.Int64)
			}
		case dope.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_dopes", values[i])
			} else if value.Valid {
				d.wallet_dopes = new(string)
				*d.wallet_dopes = value.String
			}
		}
	}
	return nil
}

// QueryWallet queries the "wallet" edge of the Dope entity.
func (d *Dope) QueryWallet() *WalletQuery {
	return (&DopeClient{config: d.config}).QueryWallet(d)
}

// QueryItems queries the "items" edge of the Dope entity.
func (d *Dope) QueryItems() *ItemQuery {
	return (&DopeClient{config: d.config}).QueryItems(d)
}

// Update returns a builder for updating this Dope.
// Note that you need to call Dope.Unwrap() before calling this method if this Dope
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dope) Update() *DopeUpdateOne {
	return (&DopeClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Dope entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dope) Unwrap() *Dope {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dope is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dope) String() string {
	var builder strings.Builder
	builder.WriteString("Dope(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", claimed=")
	builder.WriteString(fmt.Sprintf("%v", d.Claimed))
	builder.WriteString(", opened=")
	builder.WriteString(fmt.Sprintf("%v", d.Opened))
	builder.WriteString(", order=")
	builder.WriteString(fmt.Sprintf("%v", d.Order))
	builder.WriteByte(')')
	return builder.String()
}

// Dopes is a parsable slice of Dope.
type Dopes []*Dope

func (d Dopes) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
