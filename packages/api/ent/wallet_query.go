



// Code generated by entc, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/schema/field"

)


import (
		"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"
		"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
		"github.com/dopedao/dope-monorepo/packages/api/ent/walletitems"
		"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
)




// WalletQuery is the builder for querying Wallet entities.
type WalletQuery struct {
	config
	limit		*int
	offset		*int
	unique		*bool
	order		[]OrderFunc
	fields		[]string
	predicates 	[]predicate.Wallet
		// eager-loading edges.
			withDopes *DopeQuery
			withItems *WalletItemsQuery
			withHustlers *HustlerQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WalletQuery builder.
func (wq *WalletQuery) Where(ps ...predicate.Wallet) *WalletQuery {
	wq.predicates = append(wq.predicates, ps...)
	return wq
}

// Limit adds a limit step to the query.
func (wq *WalletQuery) Limit(limit int) *WalletQuery {
	wq.limit = &limit
	return wq
}

// Offset adds an offset step to the query.
func (wq *WalletQuery) Offset(offset int) *WalletQuery {
	wq.offset = &offset
	return wq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wq *WalletQuery) Unique(unique bool) *WalletQuery {
	wq.unique = &unique
	return wq
}

// Order adds an order step to the query.
func (wq *WalletQuery) Order(o ...OrderFunc) *WalletQuery {
	wq.order = append(wq.order, o...)
	return wq
}



	
	// QueryDopes chains the current query on the "dopes" edge.
	func (wq *WalletQuery) QueryDopes() *DopeQuery {
		query := &DopeQuery{config: wq.config}
		query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
			if err := wq.prepareQuery(ctx); err != nil {
				return nil, err
			}  
	selector := wq.sqlQuery(ctx)
	if err := selector.Err(); err != nil {
		return nil, err
	}
	step := sqlgraph.NewStep(
		sqlgraph.From(wallet.Table, wallet.FieldID, selector),
		sqlgraph.To(dope.Table, dope.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, wallet.DopesTable,wallet.DopesColumn),
	)
	fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
return fromU, nil
		}
		return query
	}

	
	// QueryItems chains the current query on the "items" edge.
	func (wq *WalletQuery) QueryItems() *WalletItemsQuery {
		query := &WalletItemsQuery{config: wq.config}
		query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
			if err := wq.prepareQuery(ctx); err != nil {
				return nil, err
			}  
	selector := wq.sqlQuery(ctx)
	if err := selector.Err(); err != nil {
		return nil, err
	}
	step := sqlgraph.NewStep(
		sqlgraph.From(wallet.Table, wallet.FieldID, selector),
		sqlgraph.To(walletitems.Table, walletitems.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, wallet.ItemsTable,wallet.ItemsColumn),
	)
	fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
return fromU, nil
		}
		return query
	}

	
	// QueryHustlers chains the current query on the "hustlers" edge.
	func (wq *WalletQuery) QueryHustlers() *HustlerQuery {
		query := &HustlerQuery{config: wq.config}
		query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
			if err := wq.prepareQuery(ctx); err != nil {
				return nil, err
			}  
	selector := wq.sqlQuery(ctx)
	if err := selector.Err(); err != nil {
		return nil, err
	}
	step := sqlgraph.NewStep(
		sqlgraph.From(wallet.Table, wallet.FieldID, selector),
		sqlgraph.To(hustler.Table, hustler.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, wallet.HustlersTable,wallet.HustlersColumn),
	)
	fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
return fromU, nil
		}
		return query
	}


// First returns the first Wallet entity from the query. 
// Returns a *NotFoundError when no Wallet was found.
func (wq *WalletQuery) First(ctx context.Context) (*Wallet, error) {
	nodes, err := wq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ wallet.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wq *WalletQuery) FirstX(ctx context.Context) *Wallet {
	node, err := wq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Wallet ID from the query. 
// Returns a *NotFoundError when no Wallet ID was found.
func (wq *WalletQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = wq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ wallet.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wq *WalletQuery) FirstIDX(ctx context.Context) string {
	id, err := wq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Wallet entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Wallet entity is not found.
// Returns a *NotFoundError when no Wallet entities are found.
func (wq *WalletQuery) Only(ctx context.Context) (*Wallet, error) {
	nodes, err := wq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ wallet.Label}
	default:
		return nil, &NotSingularError{ wallet.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wq *WalletQuery) OnlyX(ctx context.Context) *Wallet {
	node, err := wq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Wallet ID in the query.
// Returns a *NotSingularError when exactly one Wallet ID is not found.
// Returns a *NotFoundError when no entities are found.
func (wq *WalletQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = wq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ wallet.Label}
	default:
		err = &NotSingularError{ wallet.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wq *WalletQuery) OnlyIDX(ctx context.Context) string {
	id, err := wq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Wallets.
func (wq *WalletQuery) All(ctx context.Context) ([]*Wallet, error) {
	if err := wq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return wq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (wq *WalletQuery) AllX(ctx context.Context) []*Wallet {
	nodes, err := wq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Wallet IDs.
func (wq *WalletQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := wq.Select(wallet.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wq *WalletQuery) IDsX(ctx context.Context) []string {
	ids, err := wq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wq *WalletQuery) Count(ctx context.Context) (int, error) {
	if err := wq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return wq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (wq *WalletQuery) CountX(ctx context.Context) int {
	count, err := wq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wq *WalletQuery) Exist(ctx context.Context) (bool, error) {
	if err := wq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return wq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (wq *WalletQuery) ExistX(ctx context.Context) bool {
	exist, err := wq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WalletQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wq *WalletQuery) Clone() *WalletQuery {
	if wq == nil {
		return nil
	}
	return &WalletQuery{
		config: 	wq.config,
		limit: 		wq.limit,
		offset: 	wq.offset,
		order: 		append([]OrderFunc{}, wq.order...),
		predicates: append([]predicate.Wallet{}, wq.predicates...),
			withDopes: wq.withDopes.Clone(),
			withItems: wq.withItems.Clone(),
			withHustlers: wq.withHustlers.Clone(),
		// clone intermediate query.
		sql: wq.sql.Clone(),
		path: wq.path,
	}
}
	
	// WithDopes tells the query-builder to eager-load the nodes that are connected to
	// the "dopes" edge. The optional arguments are used to configure the query builder of the edge.
	func (wq *WalletQuery) WithDopes(opts ...func(*DopeQuery)) *WalletQuery {
		query := &DopeQuery{config: wq.config}
		for _, opt := range opts {
			opt(query)
		}
		wq.withDopes = query
		return wq
	}
	
	// WithItems tells the query-builder to eager-load the nodes that are connected to
	// the "items" edge. The optional arguments are used to configure the query builder of the edge.
	func (wq *WalletQuery) WithItems(opts ...func(*WalletItemsQuery)) *WalletQuery {
		query := &WalletItemsQuery{config: wq.config}
		for _, opt := range opts {
			opt(query)
		}
		wq.withItems = query
		return wq
	}
	
	// WithHustlers tells the query-builder to eager-load the nodes that are connected to
	// the "hustlers" edge. The optional arguments are used to configure the query builder of the edge.
	func (wq *WalletQuery) WithHustlers(opts ...func(*HustlerQuery)) *WalletQuery {
		query := &HustlerQuery{config: wq.config}
		for _, opt := range opts {
			opt(query)
		}
		wq.withHustlers = query
		return wq
	}



// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Paper schema.BigInt `json:"paper,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Wallet.Query().
//		GroupBy(wallet.FieldPaper).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (wq *WalletQuery) GroupBy(field string, fields ...string) *WalletGroupBy {
	group := &WalletGroupBy{config: wq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return wq.sqlQuery(ctx), nil
	}
	return group
}



// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Paper schema.BigInt `json:"paper,omitempty"`
//	}
//
//	client.Wallet.Query().
//		Select(wallet.FieldPaper).
//		Scan(ctx, &v)
//
func (wq *WalletQuery) Select(fields ...string) *WalletSelect {
	wq.fields = append(wq.fields, fields...)
	return &WalletSelect{ WalletQuery: wq }
}

func (wq *WalletQuery) prepareQuery(ctx context.Context) error {
	for _, f := range wq.fields {
		if !wallet.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wq.path != nil {
		prev, err := wq.path(ctx)
		if err != nil {
			return err
		}
		wq.sql = prev
	}
	return nil
}


	
	




func (wq *WalletQuery) sqlAll(ctx context.Context) ([]*Wallet, error) {
	var (
		nodes = []*Wallet{}
		_spec = wq.querySpec()
			loadedTypes = [3]bool{
					wq.withDopes != nil,
					wq.withItems != nil,
					wq.withHustlers != nil,
			}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Wallet{config: wq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
			node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, wq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
			
	if query := wq.withDopes; query != nil {
			fks := make([]driver.Value, 0, len(nodes))
			nodeids := make(map[string]*Wallet)
			for i := range nodes {
				fks = append(fks, nodes[i].ID)
				nodeids[nodes[i].ID] = nodes[i]
					nodes[i].Edges.Dopes = []*Dope{}
			}
				query.withFKs = true
			query.Where(predicate.Dope(func(s *sql.Selector) {
				s.Where(sql.InValues(wallet.DopesColumn, fks...))
			}))
			neighbors, err := query.All(ctx)
			if err != nil {
				return nil, err
			}
			for _, n := range neighbors {
				fk := n.wallet_dopes
					if fk == nil {
						return nil, fmt.Errorf(`foreign-key "wallet_dopes" is nil for node %v`, n.ID)
					}
				node, ok := nodeids[*fk]
				if !ok {
					return nil, fmt.Errorf(`unexpected foreign-key "wallet_dopes" returned %v for node %v`, *fk, n.ID)
				}
				node.Edges.Dopes = append(node.Edges.Dopes, n)
			}
	}

			
	if query := wq.withItems; query != nil {
			fks := make([]driver.Value, 0, len(nodes))
			nodeids := make(map[string]*Wallet)
			for i := range nodes {
				fks = append(fks, nodes[i].ID)
				nodeids[nodes[i].ID] = nodes[i]
					nodes[i].Edges.Items = []*WalletItems{}
			}
				query.withFKs = true
			query.Where(predicate.WalletItems(func(s *sql.Selector) {
				s.Where(sql.InValues(wallet.ItemsColumn, fks...))
			}))
			neighbors, err := query.All(ctx)
			if err != nil {
				return nil, err
			}
			for _, n := range neighbors {
				fk := n.wallet_items
					if fk == nil {
						return nil, fmt.Errorf(`foreign-key "wallet_items" is nil for node %v`, n.ID)
					}
				node, ok := nodeids[*fk]
				if !ok {
					return nil, fmt.Errorf(`unexpected foreign-key "wallet_items" returned %v for node %v`, *fk, n.ID)
				}
				node.Edges.Items = append(node.Edges.Items, n)
			}
	}

			
	if query := wq.withHustlers; query != nil {
			fks := make([]driver.Value, 0, len(nodes))
			nodeids := make(map[string]*Wallet)
			for i := range nodes {
				fks = append(fks, nodes[i].ID)
				nodeids[nodes[i].ID] = nodes[i]
					nodes[i].Edges.Hustlers = []*Hustler{}
			}
				query.withFKs = true
			query.Where(predicate.Hustler(func(s *sql.Selector) {
				s.Where(sql.InValues(wallet.HustlersColumn, fks...))
			}))
			neighbors, err := query.All(ctx)
			if err != nil {
				return nil, err
			}
			for _, n := range neighbors {
				fk := n.wallet_hustlers
					if fk == nil {
						return nil, fmt.Errorf(`foreign-key "wallet_hustlers" is nil for node %v`, n.ID)
					}
				node, ok := nodeids[*fk]
				if !ok {
					return nil, fmt.Errorf(`unexpected foreign-key "wallet_hustlers" returned %v for node %v`, *fk, n.ID)
				}
				node.Edges.Hustlers = append(node.Edges.Hustlers, n)
			}
	}

	return nodes, nil
}

func (wq *WalletQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wq.querySpec()
	_spec.Node.Columns = wq.fields
	if len(wq.fields) > 0 {
		_spec.Unique = wq.unique != nil && *wq.unique
	}
	return sqlgraph.CountNodes(ctx, wq.driver, _spec)
}

func (wq *WalletQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := wq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (wq *WalletQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table: wallet.Table,
			Columns: wallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: wallet.FieldID,
			},
		},
		From: wq.sql,
		Unique: true,
	}
	if unique := wq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := wq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wallet.FieldID)
		for i := range fields {
			if fields[i] != wallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}





func (wq *WalletQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wq.driver.Dialect())
	t1 := builder.Table(wallet.Table)
	columns := wq.fields
	if len(columns) == 0 {
		columns = wallet.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wq.sql != nil {
		selector = wq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wq.unique != nil && *wq.unique {
		selector.Distinct()
	}
	for _, p := range wq.predicates {
		p(selector)
	}
	for _, p := range wq.order {
		p(selector)
	}
	if offset := wq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

    

    










// WalletGroupBy is the group-by builder for Wallet entities.
type WalletGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wgb *WalletGroupBy) Aggregate(fns ...AggregateFunc) *WalletGroupBy {
	wgb.fns = append(wgb.fns, fns...)
	return wgb
}

// Scan applies the group-by query and scans the result into the given value.
func (wgb *WalletGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := wgb.path(ctx)
	if err != nil {
		return err
	}
	wgb.sql = query
	return wgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wgb *WalletGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := wgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}


	
	// Strings returns list of strings from group-by. 
	// It is only allowed when executing a group-by query with one field.
	func (wgb *WalletGroupBy) Strings(ctx context.Context) ([]string, error) {
		if len(wgb.fields) > 1 {
			return nil, errors.New("ent: WalletGroupBy.Strings is not achievable when grouping more than 1 field")
		}
		var v []string
		if err := wgb.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// StringsX is like Strings, but panics if an error occurs.
	func (wgb *WalletGroupBy) StringsX(ctx context.Context) []string {
		v, err := wgb.Strings(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// String returns a single string from a group-by query.
	// It is only allowed when executing a group-by query with one field.
	func (wgb *WalletGroupBy) String(ctx context.Context) (_ string, err error) {
		var v []string
		if v, err = wgb.Strings(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ wallet.Label}
		default:
			err = fmt.Errorf("ent: WalletGroupBy.Strings returned %d results when one was expected", len(v))
		}
		return
	}

	// StringX is like String, but panics if an error occurs.
	func (wgb *WalletGroupBy) StringX(ctx context.Context) string {
		v, err := wgb.String(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Ints returns list of ints from group-by. 
	// It is only allowed when executing a group-by query with one field.
	func (wgb *WalletGroupBy) Ints(ctx context.Context) ([]int, error) {
		if len(wgb.fields) > 1 {
			return nil, errors.New("ent: WalletGroupBy.Ints is not achievable when grouping more than 1 field")
		}
		var v []int
		if err := wgb.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// IntsX is like Ints, but panics if an error occurs.
	func (wgb *WalletGroupBy) IntsX(ctx context.Context) []int {
		v, err := wgb.Ints(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Int returns a single int from a group-by query.
	// It is only allowed when executing a group-by query with one field.
	func (wgb *WalletGroupBy) Int(ctx context.Context) (_ int, err error) {
		var v []int
		if v, err = wgb.Ints(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ wallet.Label}
		default:
			err = fmt.Errorf("ent: WalletGroupBy.Ints returned %d results when one was expected", len(v))
		}
		return
	}

	// IntX is like Int, but panics if an error occurs.
	func (wgb *WalletGroupBy) IntX(ctx context.Context) int {
		v, err := wgb.Int(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Float64s returns list of float64s from group-by. 
	// It is only allowed when executing a group-by query with one field.
	func (wgb *WalletGroupBy) Float64s(ctx context.Context) ([]float64, error) {
		if len(wgb.fields) > 1 {
			return nil, errors.New("ent: WalletGroupBy.Float64s is not achievable when grouping more than 1 field")
		}
		var v []float64
		if err := wgb.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// Float64sX is like Float64s, but panics if an error occurs.
	func (wgb *WalletGroupBy) Float64sX(ctx context.Context) []float64 {
		v, err := wgb.Float64s(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Float64 returns a single float64 from a group-by query.
	// It is only allowed when executing a group-by query with one field.
	func (wgb *WalletGroupBy) Float64(ctx context.Context) (_ float64, err error) {
		var v []float64
		if v, err = wgb.Float64s(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ wallet.Label}
		default:
			err = fmt.Errorf("ent: WalletGroupBy.Float64s returned %d results when one was expected", len(v))
		}
		return
	}

	// Float64X is like Float64, but panics if an error occurs.
	func (wgb *WalletGroupBy) Float64X(ctx context.Context) float64 {
		v, err := wgb.Float64(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Bools returns list of bools from group-by. 
	// It is only allowed when executing a group-by query with one field.
	func (wgb *WalletGroupBy) Bools(ctx context.Context) ([]bool, error) {
		if len(wgb.fields) > 1 {
			return nil, errors.New("ent: WalletGroupBy.Bools is not achievable when grouping more than 1 field")
		}
		var v []bool
		if err := wgb.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// BoolsX is like Bools, but panics if an error occurs.
	func (wgb *WalletGroupBy) BoolsX(ctx context.Context) []bool {
		v, err := wgb.Bools(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Bool returns a single bool from a group-by query.
	// It is only allowed when executing a group-by query with one field.
	func (wgb *WalletGroupBy) Bool(ctx context.Context) (_ bool, err error) {
		var v []bool
		if v, err = wgb.Bools(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ wallet.Label}
		default:
			err = fmt.Errorf("ent: WalletGroupBy.Bools returned %d results when one was expected", len(v))
		}
		return
	}

	// BoolX is like Bool, but panics if an error occurs.
	func (wgb *WalletGroupBy) BoolX(ctx context.Context) bool {
		v, err := wgb.Bool(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}



	
	



func (wgb *WalletGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range wgb.fields {
		if !wallet.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := wgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}


func (wgb *WalletGroupBy) sqlQuery() *sql.Selector {
	selector := wgb.sql.Select()
	aggregation := make([]string, 0, len(wgb.fns))
	for _, fn := range wgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(wgb.fields) + len(wgb.fns))
		for _, f := range wgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(wgb.fields...)...)
}







// WalletSelect is the builder for selecting fields of Wallet entities.
type WalletSelect struct {
	*WalletQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}


// Scan applies the selector query and scans the result into the given value.
func (ws *WalletSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ws.prepareQuery(ctx); err != nil {
		return err
	}
	ws.sql = ws.WalletQuery.sqlQuery(ctx)
	return ws.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ws *WalletSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ws.Scan(ctx, v); err != nil {
		panic(err)
	}
}


	
	// Strings returns list of strings from a selector. It is only allowed when selecting one field.
	func (ws *WalletSelect) Strings(ctx context.Context) ([]string, error) {
		if len(ws.fields) > 1 {
			return nil, errors.New("ent: WalletSelect.Strings is not achievable when selecting more than 1 field")
		}
		var v []string
		if err := ws.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// StringsX is like Strings, but panics if an error occurs.
	func (ws *WalletSelect) StringsX(ctx context.Context) []string {
		v, err := ws.Strings(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// String returns a single string from a selector. It is only allowed when selecting one field.
	func (ws *WalletSelect) String(ctx context.Context) (_ string, err error) {
		var v []string
		if v, err = ws.Strings(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ wallet.Label}
		default:
			err = fmt.Errorf("ent: WalletSelect.Strings returned %d results when one was expected", len(v))
		}
		return
	}

	// StringX is like String, but panics if an error occurs.
	func (ws *WalletSelect) StringX(ctx context.Context) string {
		v, err := ws.String(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Ints returns list of ints from a selector. It is only allowed when selecting one field.
	func (ws *WalletSelect) Ints(ctx context.Context) ([]int, error) {
		if len(ws.fields) > 1 {
			return nil, errors.New("ent: WalletSelect.Ints is not achievable when selecting more than 1 field")
		}
		var v []int
		if err := ws.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// IntsX is like Ints, but panics if an error occurs.
	func (ws *WalletSelect) IntsX(ctx context.Context) []int {
		v, err := ws.Ints(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Int returns a single int from a selector. It is only allowed when selecting one field.
	func (ws *WalletSelect) Int(ctx context.Context) (_ int, err error) {
		var v []int
		if v, err = ws.Ints(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ wallet.Label}
		default:
			err = fmt.Errorf("ent: WalletSelect.Ints returned %d results when one was expected", len(v))
		}
		return
	}

	// IntX is like Int, but panics if an error occurs.
	func (ws *WalletSelect) IntX(ctx context.Context) int {
		v, err := ws.Int(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
	func (ws *WalletSelect) Float64s(ctx context.Context) ([]float64, error) {
		if len(ws.fields) > 1 {
			return nil, errors.New("ent: WalletSelect.Float64s is not achievable when selecting more than 1 field")
		}
		var v []float64
		if err := ws.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// Float64sX is like Float64s, but panics if an error occurs.
	func (ws *WalletSelect) Float64sX(ctx context.Context) []float64 {
		v, err := ws.Float64s(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
	func (ws *WalletSelect) Float64(ctx context.Context) (_ float64, err error) {
		var v []float64
		if v, err = ws.Float64s(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ wallet.Label}
		default:
			err = fmt.Errorf("ent: WalletSelect.Float64s returned %d results when one was expected", len(v))
		}
		return
	}

	// Float64X is like Float64, but panics if an error occurs.
	func (ws *WalletSelect) Float64X(ctx context.Context) float64 {
		v, err := ws.Float64(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	
	// Bools returns list of bools from a selector. It is only allowed when selecting one field.
	func (ws *WalletSelect) Bools(ctx context.Context) ([]bool, error) {
		if len(ws.fields) > 1 {
			return nil, errors.New("ent: WalletSelect.Bools is not achievable when selecting more than 1 field")
		}
		var v []bool
		if err := ws.Scan(ctx, &v); err != nil {
			return nil, err
		}
		return v, nil
	}

	// BoolsX is like Bools, but panics if an error occurs.
	func (ws *WalletSelect) BoolsX(ctx context.Context) []bool {
		v, err := ws.Bools(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}

	// Bool returns a single bool from a selector. It is only allowed when selecting one field.
	func (ws *WalletSelect) Bool(ctx context.Context) (_ bool, err error) {
		var v []bool
		if v, err = ws.Bools(ctx); err != nil {
			return
		}
		switch len(v) {
		case 1:
			return v[0], nil
		case 0:
			err = &NotFoundError{ wallet.Label}
		default:
			err = fmt.Errorf("ent: WalletSelect.Bools returned %d results when one was expected", len(v))
		}
		return
	}

	// BoolX is like Bool, but panics if an error occurs.
	func (ws *WalletSelect) BoolX(ctx context.Context) bool {
		v, err := ws.Bool(ctx)
		if err != nil {
			panic(err)
		}
		return v
	}



	
	



func (ws *WalletSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ws.sql.Query()
	if err := ws.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}



    






