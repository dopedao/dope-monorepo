

// Code generated by entc, DO NOT EDIT.



package ent


import "context"


	
	
		func (a *Amount) ListingInput(ctx context.Context) (*Listing, error) {
			result, err := a.Edges.ListingInputOrErr()
			if IsNotLoaded(err) {
				result, err = a.QueryListingInput().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (a *Amount) ListingOutput(ctx context.Context) (*Listing, error) {
			result, err := a.Edges.ListingOutputOrErr()
			if IsNotLoaded(err) {
				result, err = a.QueryListingOutput().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	

	
	
		func (bp *BodyPart) HustlerBodies(ctx context.Context) ([]*Hustler, error) {
			result, err := bp.Edges.HustlerBodiesOrErr()
			if IsNotLoaded(err) {
				result, err = bp.QueryHustlerBodies().All(ctx)
			}
			return result, err
		}
	
		func (bp *BodyPart) HustlerHairs(ctx context.Context) ([]*Hustler, error) {
			result, err := bp.Edges.HustlerHairsOrErr()
			if IsNotLoaded(err) {
				result, err = bp.QueryHustlerHairs().All(ctx)
			}
			return result, err
		}
	
		func (bp *BodyPart) HustlerBeards(ctx context.Context) ([]*Hustler, error) {
			result, err := bp.Edges.HustlerBeardsOrErr()
			if IsNotLoaded(err) {
				result, err = bp.QueryHustlerBeards().All(ctx)
			}
			return result, err
		}
	

	
	
		func (d *Dope) Wallet(ctx context.Context) (*Wallet, error) {
			result, err := d.Edges.WalletOrErr()
			if IsNotLoaded(err) {
				result, err = d.QueryWallet().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (d *Dope) LastSale(ctx context.Context) (*Listing, error) {
			result, err := d.Edges.LastSaleOrErr()
			if IsNotLoaded(err) {
				result, err = d.QueryLastSale().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (d *Dope) Listings(ctx context.Context) ([]*Listing, error) {
			result, err := d.Edges.ListingsOrErr()
			if IsNotLoaded(err) {
				result, err = d.QueryListings().All(ctx)
			}
			return result, err
		}
	
		func (d *Dope) Items(ctx context.Context) ([]*Item, error) {
			result, err := d.Edges.ItemsOrErr()
			if IsNotLoaded(err) {
				result, err = d.QueryItems().All(ctx)
			}
			return result, err
		}
	
		func (d *Dope) Index(ctx context.Context) (*Search, error) {
			result, err := d.Edges.IndexOrErr()
			if IsNotLoaded(err) {
				result, err = d.QueryIndex().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	

	
	

	
	
		func (gh *GameHustler) Hustlers(ctx context.Context) (*Hustler, error) {
			result, err := gh.Edges.HustlersOrErr()
			if IsNotLoaded(err) {
				result, err = gh.QueryHustlers().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	

	
	
		func (h *Hustler) Wallet(ctx context.Context) (*Wallet, error) {
			result, err := h.Edges.WalletOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryWallet().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Weapon(ctx context.Context) (*Item, error) {
			result, err := h.Edges.WeaponOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryWeapon().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Clothes(ctx context.Context) (*Item, error) {
			result, err := h.Edges.ClothesOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryClothes().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Vehicle(ctx context.Context) (*Item, error) {
			result, err := h.Edges.VehicleOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryVehicle().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Waist(ctx context.Context) (*Item, error) {
			result, err := h.Edges.WaistOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryWaist().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Foot(ctx context.Context) (*Item, error) {
			result, err := h.Edges.FootOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryFoot().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Hand(ctx context.Context) (*Item, error) {
			result, err := h.Edges.HandOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryHand().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Drug(ctx context.Context) (*Item, error) {
			result, err := h.Edges.DrugOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryDrug().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Neck(ctx context.Context) (*Item, error) {
			result, err := h.Edges.NeckOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryNeck().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Ring(ctx context.Context) (*Item, error) {
			result, err := h.Edges.RingOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryRing().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Accessory(ctx context.Context) (*Item, error) {
			result, err := h.Edges.AccessoryOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryAccessory().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Body(ctx context.Context) (*BodyPart, error) {
			result, err := h.Edges.BodyOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryBody().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Hair(ctx context.Context) (*BodyPart, error) {
			result, err := h.Edges.HairOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryHair().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Beard(ctx context.Context) (*BodyPart, error) {
			result, err := h.Edges.BeardOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryBeard().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (h *Hustler) Index(ctx context.Context) (*Search, error) {
			result, err := h.Edges.IndexOrErr()
			if IsNotLoaded(err) {
				result, err = h.QueryIndex().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	

	
	
		func (i *Item) Wallets(ctx context.Context) ([]*WalletItems, error) {
			result, err := i.Edges.WalletsOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryWallets().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) Dopes(ctx context.Context) ([]*Dope, error) {
			result, err := i.Edges.DopesOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryDopes().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) HustlerWeapons(ctx context.Context) ([]*Hustler, error) {
			result, err := i.Edges.HustlerWeaponsOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryHustlerWeapons().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) HustlerClothes(ctx context.Context) ([]*Hustler, error) {
			result, err := i.Edges.HustlerClothesOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryHustlerClothes().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) HustlerVehicles(ctx context.Context) ([]*Hustler, error) {
			result, err := i.Edges.HustlerVehiclesOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryHustlerVehicles().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) HustlerWaists(ctx context.Context) ([]*Hustler, error) {
			result, err := i.Edges.HustlerWaistsOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryHustlerWaists().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) HustlerFeet(ctx context.Context) ([]*Hustler, error) {
			result, err := i.Edges.HustlerFeetOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryHustlerFeet().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) HustlerHands(ctx context.Context) ([]*Hustler, error) {
			result, err := i.Edges.HustlerHandsOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryHustlerHands().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) HustlerDrugs(ctx context.Context) ([]*Hustler, error) {
			result, err := i.Edges.HustlerDrugsOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryHustlerDrugs().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) HustlerNecks(ctx context.Context) ([]*Hustler, error) {
			result, err := i.Edges.HustlerNecksOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryHustlerNecks().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) HustlerRings(ctx context.Context) ([]*Hustler, error) {
			result, err := i.Edges.HustlerRingsOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryHustlerRings().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) HustlerAccessories(ctx context.Context) ([]*Hustler, error) {
			result, err := i.Edges.HustlerAccessoriesOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryHustlerAccessories().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) Base(ctx context.Context) (*Item, error) {
			result, err := i.Edges.BaseOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryBase().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (i *Item) Derivative(ctx context.Context) ([]*Item, error) {
			result, err := i.Edges.DerivativeOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryDerivative().All(ctx)
			}
			return result, err
		}
	
		func (i *Item) Index(ctx context.Context) (*Search, error) {
			result, err := i.Edges.IndexOrErr()
			if IsNotLoaded(err) {
				result, err = i.QueryIndex().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	

	
	
		func (l *Listing) Dope(ctx context.Context) (*Dope, error) {
			result, err := l.Edges.DopeOrErr()
			if IsNotLoaded(err) {
				result, err = l.QueryDope().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (l *Listing) DopeLastsales(ctx context.Context) (*Dope, error) {
			result, err := l.Edges.DopeLastsalesOrErr()
			if IsNotLoaded(err) {
				result, err = l.QueryDopeLastsales().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (l *Listing) Inputs(ctx context.Context) ([]*Amount, error) {
			result, err := l.Edges.InputsOrErr()
			if IsNotLoaded(err) {
				result, err = l.QueryInputs().All(ctx)
			}
			return result, err
		}
	
		func (l *Listing) Outputs(ctx context.Context) ([]*Amount, error) {
			result, err := l.Edges.OutputsOrErr()
			if IsNotLoaded(err) {
				result, err = l.QueryOutputs().All(ctx)
			}
			return result, err
		}
	

	
	
		func (s *Search) Dope(ctx context.Context) (*Dope, error) {
			result, err := s.Edges.DopeOrErr()
			if IsNotLoaded(err) {
				result, err = s.QueryDope().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (s *Search) Item(ctx context.Context) (*Item, error) {
			result, err := s.Edges.ItemOrErr()
			if IsNotLoaded(err) {
				result, err = s.QueryItem().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (s *Search) Hustler(ctx context.Context) (*Hustler, error) {
			result, err := s.Edges.HustlerOrErr()
			if IsNotLoaded(err) {
				result, err = s.QueryHustler().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	

	
	

	
	
		func (w *Wallet) Dopes(ctx context.Context) ([]*Dope, error) {
			result, err := w.Edges.DopesOrErr()
			if IsNotLoaded(err) {
				result, err = w.QueryDopes().All(ctx)
			}
			return result, err
		}
	
		func (w *Wallet) Items(ctx context.Context) ([]*WalletItems, error) {
			result, err := w.Edges.ItemsOrErr()
			if IsNotLoaded(err) {
				result, err = w.QueryItems().All(ctx)
			}
			return result, err
		}
	
		func (w *Wallet) Hustlers(ctx context.Context) ([]*Hustler, error) {
			result, err := w.Edges.HustlersOrErr()
			if IsNotLoaded(err) {
				result, err = w.QueryHustlers().All(ctx)
			}
			return result, err
		}
	

	
	
		func (wi *WalletItems) Wallet(ctx context.Context) (*Wallet, error) {
			result, err := wi.Edges.WalletOrErr()
			if IsNotLoaded(err) {
				result, err = wi.QueryWallet().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	
		func (wi *WalletItems) Item(ctx context.Context) (*Item, error) {
			result, err := wi.Edges.ItemOrErr()
			if IsNotLoaded(err) {
				result, err = wi.QueryItem().Only(ctx)
			}
			return result, MaskNotFound(err)
		}
	


