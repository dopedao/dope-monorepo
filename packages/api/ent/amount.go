// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/ent/amount"
	"github.com/dopedao/dope-monorepo/packages/api/ent/listing"
	"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
)

// Amount is the model entity for the Amount schema.
type Amount struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type amount.Type `json:"type,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount schema.BigInt `json:"amount,omitempty"`
	// AssetID holds the value of the "asset_id" field.
	AssetID schema.BigInt `json:"asset_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AmountQuery when eager-loading is set.
	Edges           AmountEdges `json:"edges"`
	listing_inputs  *string
	listing_outputs *string
}

// AmountEdges holds the relations/edges for other nodes in the graph.
type AmountEdges struct {
	// ListingInput holds the value of the listing_input edge.
	ListingInput *Listing `json:"listing_input,omitempty"`
	// ListingOutput holds the value of the listing_output edge.
	ListingOutput *Listing `json:"listing_output,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ListingInputOrErr returns the ListingInput value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AmountEdges) ListingInputOrErr() (*Listing, error) {
	if e.loadedTypes[0] {
		if e.ListingInput == nil {
			// The edge listing_input was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: listing.Label}
		}
		return e.ListingInput, nil
	}
	return nil, &NotLoadedError{edge: "listing_input"}
}

// ListingOutputOrErr returns the ListingOutput value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AmountEdges) ListingOutputOrErr() (*Listing, error) {
	if e.loadedTypes[1] {
		if e.ListingOutput == nil {
			// The edge listing_output was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: listing.Label}
		}
		return e.ListingOutput, nil
	}
	return nil, &NotLoadedError{edge: "listing_output"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Amount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case amount.FieldAmount, amount.FieldAssetID:
			values[i] = new(schema.BigInt)
		case amount.FieldID, amount.FieldType:
			values[i] = new(sql.NullString)
		case amount.ForeignKeys[0]: // listing_inputs
			values[i] = new(sql.NullString)
		case amount.ForeignKeys[1]: // listing_outputs
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Amount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Amount fields.
func (a *Amount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case amount.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case amount.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = amount.Type(value.String)
			}
		case amount.FieldAmount:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				a.Amount = *value
			}
		case amount.FieldAssetID:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field asset_id", values[i])
			} else if value != nil {
				a.AssetID = *value
			}
		case amount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field listing_inputs", values[i])
			} else if value.Valid {
				a.listing_inputs = new(string)
				*a.listing_inputs = value.String
			}
		case amount.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field listing_outputs", values[i])
			} else if value.Valid {
				a.listing_outputs = new(string)
				*a.listing_outputs = value.String
			}
		}
	}
	return nil
}

// QueryListingInput queries the "listing_input" edge of the Amount entity.
func (a *Amount) QueryListingInput() *ListingQuery {
	return (&AmountClient{config: a.config}).QueryListingInput(a)
}

// QueryListingOutput queries the "listing_output" edge of the Amount entity.
func (a *Amount) QueryListingOutput() *ListingQuery {
	return (&AmountClient{config: a.config}).QueryListingOutput(a)
}

// Update returns a builder for updating this Amount.
// Note that you need to call Amount.Unwrap() before calling this method if this Amount
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Amount) Update() *AmountUpdateOne {
	return (&AmountClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Amount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Amount) Unwrap() *Amount {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Amount is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Amount) String() string {
	var builder strings.Builder
	builder.WriteString("Amount(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", a.Amount))
	builder.WriteString(", asset_id=")
	builder.WriteString(fmt.Sprintf("%v", a.AssetID))
	builder.WriteByte(')')
	return builder.String()
}

// Amounts is a parsable slice of Amount.
type Amounts []*Amount

func (a Amounts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
