// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/dopedao/dope-monorepo/packages/api/ent/bodypart"
	"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/ent/event"
	"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/ent/syncstate"
	"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"
	"github.com/dopedao/dope-monorepo/packages/api/ent/walletitems"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    string `msgpack:"i"`
	Value Value  `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// BodyPartEdge is the edge representation of BodyPart.
type BodyPartEdge struct {
	Node   *BodyPart `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// BodyPartConnection is the connection containing edges to BodyPart.
type BodyPartConnection struct {
	Edges      []*BodyPartEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// BodyPartPaginateOption enables pagination customization.
type BodyPartPaginateOption func(*bodyPartPager) error

// WithBodyPartOrder configures pagination ordering.
func WithBodyPartOrder(order *BodyPartOrder) BodyPartPaginateOption {
	if order == nil {
		order = DefaultBodyPartOrder
	}
	o := *order
	return func(pager *bodyPartPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBodyPartOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBodyPartFilter configures pagination filter.
func WithBodyPartFilter(filter func(*BodyPartQuery) (*BodyPartQuery, error)) BodyPartPaginateOption {
	return func(pager *bodyPartPager) error {
		if filter == nil {
			return errors.New("BodyPartQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type bodyPartPager struct {
	order  *BodyPartOrder
	filter func(*BodyPartQuery) (*BodyPartQuery, error)
}

func newBodyPartPager(opts []BodyPartPaginateOption) (*bodyPartPager, error) {
	pager := &bodyPartPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBodyPartOrder
	}
	return pager, nil
}

func (p *bodyPartPager) applyFilter(query *BodyPartQuery) (*BodyPartQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *bodyPartPager) toCursor(bp *BodyPart) Cursor {
	return p.order.Field.toCursor(bp)
}

func (p *bodyPartPager) applyCursors(query *BodyPartQuery, after, before *Cursor) *BodyPartQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultBodyPartOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *bodyPartPager) applyOrder(query *BodyPartQuery, reverse bool) *BodyPartQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultBodyPartOrder.Field {
		query = query.Order(direction.orderFunc(DefaultBodyPartOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to BodyPart.
func (bp *BodyPartQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BodyPartPaginateOption,
) (*BodyPartConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBodyPartPager(opts)
	if err != nil {
		return nil, err
	}

	if bp, err = pager.applyFilter(bp); err != nil {
		return nil, err
	}

	conn := &BodyPartConnection{Edges: []*BodyPartEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := bp.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := bp.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	bp = pager.applyCursors(bp, after, before)
	bp = pager.applyOrder(bp, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		bp = bp.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		bp = bp.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := bp.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *BodyPart
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *BodyPart {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *BodyPart {
			return nodes[i]
		}
	}

	conn.Edges = make([]*BodyPartEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &BodyPartEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// BodyPartOrderField defines the ordering field of BodyPart.
type BodyPartOrderField struct {
	field    string
	toCursor func(*BodyPart) Cursor
}

// BodyPartOrder defines the ordering of BodyPart.
type BodyPartOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *BodyPartOrderField `json:"field"`
}

// DefaultBodyPartOrder is the default ordering of BodyPart.
var DefaultBodyPartOrder = &BodyPartOrder{
	Direction: OrderDirectionAsc,
	Field: &BodyPartOrderField{
		field: bodypart.FieldID,
		toCursor: func(bp *BodyPart) Cursor {
			return Cursor{ID: bp.ID}
		},
	},
}

// ToEdge converts BodyPart into BodyPartEdge.
func (bp *BodyPart) ToEdge(order *BodyPartOrder) *BodyPartEdge {
	if order == nil {
		order = DefaultBodyPartOrder
	}
	return &BodyPartEdge{
		Node:   bp,
		Cursor: order.Field.toCursor(bp),
	}
}

// DopeEdge is the edge representation of Dope.
type DopeEdge struct {
	Node   *Dope  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// DopeConnection is the connection containing edges to Dope.
type DopeConnection struct {
	Edges      []*DopeEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// DopePaginateOption enables pagination customization.
type DopePaginateOption func(*dopePager) error

// WithDopeOrder configures pagination ordering.
func WithDopeOrder(order *DopeOrder) DopePaginateOption {
	if order == nil {
		order = DefaultDopeOrder
	}
	o := *order
	return func(pager *dopePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDopeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDopeFilter configures pagination filter.
func WithDopeFilter(filter func(*DopeQuery) (*DopeQuery, error)) DopePaginateOption {
	return func(pager *dopePager) error {
		if filter == nil {
			return errors.New("DopeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dopePager struct {
	order  *DopeOrder
	filter func(*DopeQuery) (*DopeQuery, error)
}

func newDopePager(opts []DopePaginateOption) (*dopePager, error) {
	pager := &dopePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDopeOrder
	}
	return pager, nil
}

func (p *dopePager) applyFilter(query *DopeQuery) (*DopeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dopePager) toCursor(d *Dope) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *dopePager) applyCursors(query *DopeQuery, after, before *Cursor) *DopeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDopeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *dopePager) applyOrder(query *DopeQuery, reverse bool) *DopeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDopeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultDopeOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Dope.
func (d *DopeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DopePaginateOption,
) (*DopeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDopePager(opts)
	if err != nil {
		return nil, err
	}

	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}

	conn := &DopeConnection{Edges: []*DopeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := d.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := d.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	d = pager.applyCursors(d, after, before)
	d = pager.applyOrder(d, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		d = d.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		d = d.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := d.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Dope
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Dope {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Dope {
			return nodes[i]
		}
	}

	conn.Edges = make([]*DopeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &DopeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// DopeOrderFieldClaimed orders Dope by claimed.
	DopeOrderFieldClaimed = &DopeOrderField{
		field: dope.FieldClaimed,
		toCursor: func(d *Dope) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.Claimed,
			}
		},
	}
	// DopeOrderFieldOpened orders Dope by opened.
	DopeOrderFieldOpened = &DopeOrderField{
		field: dope.FieldOpened,
		toCursor: func(d *Dope) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.Opened,
			}
		},
	}
	// DopeOrderFieldOrder orders Dope by order.
	DopeOrderFieldOrder = &DopeOrderField{
		field: dope.FieldOrder,
		toCursor: func(d *Dope) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.Order,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DopeOrderField) String() string {
	var str string
	switch f.field {
	case dope.FieldClaimed:
		str = "CLAIMED"
	case dope.FieldOpened:
		str = "OPENED"
	case dope.FieldOrder:
		str = "ORDER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DopeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DopeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DopeOrderField %T must be a string", v)
	}
	switch str {
	case "CLAIMED":
		*f = *DopeOrderFieldClaimed
	case "OPENED":
		*f = *DopeOrderFieldOpened
	case "ORDER":
		*f = *DopeOrderFieldOrder
	default:
		return fmt.Errorf("%s is not a valid DopeOrderField", str)
	}
	return nil
}

// DopeOrderField defines the ordering field of Dope.
type DopeOrderField struct {
	field    string
	toCursor func(*Dope) Cursor
}

// DopeOrder defines the ordering of Dope.
type DopeOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *DopeOrderField `json:"field"`
}

// DefaultDopeOrder is the default ordering of Dope.
var DefaultDopeOrder = &DopeOrder{
	Direction: OrderDirectionAsc,
	Field: &DopeOrderField{
		field: dope.FieldID,
		toCursor: func(d *Dope) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Dope into DopeEdge.
func (d *Dope) ToEdge(order *DopeOrder) *DopeEdge {
	if order == nil {
		order = DefaultDopeOrder
	}
	return &DopeEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// EventEdge is the edge representation of Event.
type EventEdge struct {
	Node   *Event `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// EventConnection is the connection containing edges to Event.
type EventConnection struct {
	Edges      []*EventEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// EventPaginateOption enables pagination customization.
type EventPaginateOption func(*eventPager) error

// WithEventOrder configures pagination ordering.
func WithEventOrder(order *EventOrder) EventPaginateOption {
	if order == nil {
		order = DefaultEventOrder
	}
	o := *order
	return func(pager *eventPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultEventOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithEventFilter configures pagination filter.
func WithEventFilter(filter func(*EventQuery) (*EventQuery, error)) EventPaginateOption {
	return func(pager *eventPager) error {
		if filter == nil {
			return errors.New("EventQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type eventPager struct {
	order  *EventOrder
	filter func(*EventQuery) (*EventQuery, error)
}

func newEventPager(opts []EventPaginateOption) (*eventPager, error) {
	pager := &eventPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultEventOrder
	}
	return pager, nil
}

func (p *eventPager) applyFilter(query *EventQuery) (*EventQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *eventPager) toCursor(e *Event) Cursor {
	return p.order.Field.toCursor(e)
}

func (p *eventPager) applyCursors(query *EventQuery, after, before *Cursor) *EventQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultEventOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *eventPager) applyOrder(query *EventQuery, reverse bool) *EventQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultEventOrder.Field {
		query = query.Order(direction.orderFunc(DefaultEventOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Event.
func (e *EventQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EventPaginateOption,
) (*EventConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEventPager(opts)
	if err != nil {
		return nil, err
	}

	if e, err = pager.applyFilter(e); err != nil {
		return nil, err
	}

	conn := &EventConnection{Edges: []*EventEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := e.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := e.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	e = pager.applyCursors(e, after, before)
	e = pager.applyOrder(e, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		e = e.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		e = e.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := e.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Event
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Event {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Event {
			return nodes[i]
		}
	}

	conn.Edges = make([]*EventEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &EventEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// EventOrderField defines the ordering field of Event.
type EventOrderField struct {
	field    string
	toCursor func(*Event) Cursor
}

// EventOrder defines the ordering of Event.
type EventOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *EventOrderField `json:"field"`
}

// DefaultEventOrder is the default ordering of Event.
var DefaultEventOrder = &EventOrder{
	Direction: OrderDirectionAsc,
	Field: &EventOrderField{
		field: event.FieldID,
		toCursor: func(e *Event) Cursor {
			return Cursor{ID: e.ID}
		},
	},
}

// ToEdge converts Event into EventEdge.
func (e *Event) ToEdge(order *EventOrder) *EventEdge {
	if order == nil {
		order = DefaultEventOrder
	}
	return &EventEdge{
		Node:   e,
		Cursor: order.Field.toCursor(e),
	}
}

// HustlerEdge is the edge representation of Hustler.
type HustlerEdge struct {
	Node   *Hustler `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// HustlerConnection is the connection containing edges to Hustler.
type HustlerConnection struct {
	Edges      []*HustlerEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// HustlerPaginateOption enables pagination customization.
type HustlerPaginateOption func(*hustlerPager) error

// WithHustlerOrder configures pagination ordering.
func WithHustlerOrder(order *HustlerOrder) HustlerPaginateOption {
	if order == nil {
		order = DefaultHustlerOrder
	}
	o := *order
	return func(pager *hustlerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHustlerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHustlerFilter configures pagination filter.
func WithHustlerFilter(filter func(*HustlerQuery) (*HustlerQuery, error)) HustlerPaginateOption {
	return func(pager *hustlerPager) error {
		if filter == nil {
			return errors.New("HustlerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type hustlerPager struct {
	order  *HustlerOrder
	filter func(*HustlerQuery) (*HustlerQuery, error)
}

func newHustlerPager(opts []HustlerPaginateOption) (*hustlerPager, error) {
	pager := &hustlerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHustlerOrder
	}
	return pager, nil
}

func (p *hustlerPager) applyFilter(query *HustlerQuery) (*HustlerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *hustlerPager) toCursor(h *Hustler) Cursor {
	return p.order.Field.toCursor(h)
}

func (p *hustlerPager) applyCursors(query *HustlerQuery, after, before *Cursor) *HustlerQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultHustlerOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *hustlerPager) applyOrder(query *HustlerQuery, reverse bool) *HustlerQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultHustlerOrder.Field {
		query = query.Order(direction.orderFunc(DefaultHustlerOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Hustler.
func (h *HustlerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HustlerPaginateOption,
) (*HustlerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHustlerPager(opts)
	if err != nil {
		return nil, err
	}

	if h, err = pager.applyFilter(h); err != nil {
		return nil, err
	}

	conn := &HustlerConnection{Edges: []*HustlerEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := h.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := h.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	h = pager.applyCursors(h, after, before)
	h = pager.applyOrder(h, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		h = h.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		h = h.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := h.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Hustler
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Hustler {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Hustler {
			return nodes[i]
		}
	}

	conn.Edges = make([]*HustlerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &HustlerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// HustlerOrderFieldCreatedAt orders Hustler by created_at.
	HustlerOrderFieldCreatedAt = &HustlerOrderField{
		field: hustler.FieldCreatedAt,
		toCursor: func(h *Hustler) Cursor {
			return Cursor{
				ID:    h.ID,
				Value: h.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f HustlerOrderField) String() string {
	var str string
	switch f.field {
	case hustler.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f HustlerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *HustlerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("HustlerOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *HustlerOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid HustlerOrderField", str)
	}
	return nil
}

// HustlerOrderField defines the ordering field of Hustler.
type HustlerOrderField struct {
	field    string
	toCursor func(*Hustler) Cursor
}

// HustlerOrder defines the ordering of Hustler.
type HustlerOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *HustlerOrderField `json:"field"`
}

// DefaultHustlerOrder is the default ordering of Hustler.
var DefaultHustlerOrder = &HustlerOrder{
	Direction: OrderDirectionAsc,
	Field: &HustlerOrderField{
		field: hustler.FieldID,
		toCursor: func(h *Hustler) Cursor {
			return Cursor{ID: h.ID}
		},
	},
}

// ToEdge converts Hustler into HustlerEdge.
func (h *Hustler) ToEdge(order *HustlerOrder) *HustlerEdge {
	if order == nil {
		order = DefaultHustlerOrder
	}
	return &HustlerEdge{
		Node:   h,
		Cursor: order.Field.toCursor(h),
	}
}

// ItemEdge is the edge representation of Item.
type ItemEdge struct {
	Node   *Item  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ItemConnection is the connection containing edges to Item.
type ItemConnection struct {
	Edges      []*ItemEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// ItemPaginateOption enables pagination customization.
type ItemPaginateOption func(*itemPager) error

// WithItemOrder configures pagination ordering.
func WithItemOrder(order *ItemOrder) ItemPaginateOption {
	if order == nil {
		order = DefaultItemOrder
	}
	o := *order
	return func(pager *itemPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultItemOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithItemFilter configures pagination filter.
func WithItemFilter(filter func(*ItemQuery) (*ItemQuery, error)) ItemPaginateOption {
	return func(pager *itemPager) error {
		if filter == nil {
			return errors.New("ItemQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type itemPager struct {
	order  *ItemOrder
	filter func(*ItemQuery) (*ItemQuery, error)
}

func newItemPager(opts []ItemPaginateOption) (*itemPager, error) {
	pager := &itemPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultItemOrder
	}
	return pager, nil
}

func (p *itemPager) applyFilter(query *ItemQuery) (*ItemQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *itemPager) toCursor(i *Item) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *itemPager) applyCursors(query *ItemQuery, after, before *Cursor) *ItemQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultItemOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *itemPager) applyOrder(query *ItemQuery, reverse bool) *ItemQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultItemOrder.Field {
		query = query.Order(direction.orderFunc(DefaultItemOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Item.
func (i *ItemQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ItemPaginateOption,
) (*ItemConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newItemPager(opts)
	if err != nil {
		return nil, err
	}

	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}

	conn := &ItemConnection{Edges: []*ItemEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := i.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := i.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	i = pager.applyCursors(i, after, before)
	i = pager.applyOrder(i, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		i = i.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := i.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Item
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Item {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Item {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ItemEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ItemEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// ItemOrderFieldCreatedAt orders Item by created_at.
	ItemOrderFieldCreatedAt = &ItemOrderField{
		field: item.FieldCreatedAt,
		toCursor: func(i *Item) Cursor {
			return Cursor{
				ID:    i.ID,
				Value: i.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ItemOrderField) String() string {
	var str string
	switch f.field {
	case item.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ItemOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ItemOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ItemOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ItemOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid ItemOrderField", str)
	}
	return nil
}

// ItemOrderField defines the ordering field of Item.
type ItemOrderField struct {
	field    string
	toCursor func(*Item) Cursor
}

// ItemOrder defines the ordering of Item.
type ItemOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *ItemOrderField `json:"field"`
}

// DefaultItemOrder is the default ordering of Item.
var DefaultItemOrder = &ItemOrder{
	Direction: OrderDirectionAsc,
	Field: &ItemOrderField{
		field: item.FieldID,
		toCursor: func(i *Item) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}

// ToEdge converts Item into ItemEdge.
func (i *Item) ToEdge(order *ItemOrder) *ItemEdge {
	if order == nil {
		order = DefaultItemOrder
	}
	return &ItemEdge{
		Node:   i,
		Cursor: order.Field.toCursor(i),
	}
}

// SyncStateEdge is the edge representation of SyncState.
type SyncStateEdge struct {
	Node   *SyncState `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// SyncStateConnection is the connection containing edges to SyncState.
type SyncStateConnection struct {
	Edges      []*SyncStateEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

// SyncStatePaginateOption enables pagination customization.
type SyncStatePaginateOption func(*syncStatePager) error

// WithSyncStateOrder configures pagination ordering.
func WithSyncStateOrder(order *SyncStateOrder) SyncStatePaginateOption {
	if order == nil {
		order = DefaultSyncStateOrder
	}
	o := *order
	return func(pager *syncStatePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSyncStateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSyncStateFilter configures pagination filter.
func WithSyncStateFilter(filter func(*SyncStateQuery) (*SyncStateQuery, error)) SyncStatePaginateOption {
	return func(pager *syncStatePager) error {
		if filter == nil {
			return errors.New("SyncStateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type syncStatePager struct {
	order  *SyncStateOrder
	filter func(*SyncStateQuery) (*SyncStateQuery, error)
}

func newSyncStatePager(opts []SyncStatePaginateOption) (*syncStatePager, error) {
	pager := &syncStatePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSyncStateOrder
	}
	return pager, nil
}

func (p *syncStatePager) applyFilter(query *SyncStateQuery) (*SyncStateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *syncStatePager) toCursor(ss *SyncState) Cursor {
	return p.order.Field.toCursor(ss)
}

func (p *syncStatePager) applyCursors(query *SyncStateQuery, after, before *Cursor) *SyncStateQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSyncStateOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *syncStatePager) applyOrder(query *SyncStateQuery, reverse bool) *SyncStateQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSyncStateOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSyncStateOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to SyncState.
func (ss *SyncStateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SyncStatePaginateOption,
) (*SyncStateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSyncStatePager(opts)
	if err != nil {
		return nil, err
	}

	if ss, err = pager.applyFilter(ss); err != nil {
		return nil, err
	}

	conn := &SyncStateConnection{Edges: []*SyncStateEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ss.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ss.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ss = pager.applyCursors(ss, after, before)
	ss = pager.applyOrder(ss, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ss = ss.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ss = ss.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ss.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *SyncState
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SyncState {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SyncState {
			return nodes[i]
		}
	}

	conn.Edges = make([]*SyncStateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &SyncStateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// SyncStateOrderField defines the ordering field of SyncState.
type SyncStateOrderField struct {
	field    string
	toCursor func(*SyncState) Cursor
}

// SyncStateOrder defines the ordering of SyncState.
type SyncStateOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *SyncStateOrderField `json:"field"`
}

// DefaultSyncStateOrder is the default ordering of SyncState.
var DefaultSyncStateOrder = &SyncStateOrder{
	Direction: OrderDirectionAsc,
	Field: &SyncStateOrderField{
		field: syncstate.FieldID,
		toCursor: func(ss *SyncState) Cursor {
			return Cursor{ID: ss.ID}
		},
	},
}

// ToEdge converts SyncState into SyncStateEdge.
func (ss *SyncState) ToEdge(order *SyncStateOrder) *SyncStateEdge {
	if order == nil {
		order = DefaultSyncStateOrder
	}
	return &SyncStateEdge{
		Node:   ss,
		Cursor: order.Field.toCursor(ss),
	}
}

// WalletEdge is the edge representation of Wallet.
type WalletEdge struct {
	Node   *Wallet `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// WalletConnection is the connection containing edges to Wallet.
type WalletConnection struct {
	Edges      []*WalletEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

// WalletPaginateOption enables pagination customization.
type WalletPaginateOption func(*walletPager) error

// WithWalletOrder configures pagination ordering.
func WithWalletOrder(order *WalletOrder) WalletPaginateOption {
	if order == nil {
		order = DefaultWalletOrder
	}
	o := *order
	return func(pager *walletPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWalletOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWalletFilter configures pagination filter.
func WithWalletFilter(filter func(*WalletQuery) (*WalletQuery, error)) WalletPaginateOption {
	return func(pager *walletPager) error {
		if filter == nil {
			return errors.New("WalletQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type walletPager struct {
	order  *WalletOrder
	filter func(*WalletQuery) (*WalletQuery, error)
}

func newWalletPager(opts []WalletPaginateOption) (*walletPager, error) {
	pager := &walletPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWalletOrder
	}
	return pager, nil
}

func (p *walletPager) applyFilter(query *WalletQuery) (*WalletQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *walletPager) toCursor(w *Wallet) Cursor {
	return p.order.Field.toCursor(w)
}

func (p *walletPager) applyCursors(query *WalletQuery, after, before *Cursor) *WalletQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWalletOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *walletPager) applyOrder(query *WalletQuery, reverse bool) *WalletQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWalletOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWalletOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Wallet.
func (w *WalletQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WalletPaginateOption,
) (*WalletConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWalletPager(opts)
	if err != nil {
		return nil, err
	}

	if w, err = pager.applyFilter(w); err != nil {
		return nil, err
	}

	conn := &WalletConnection{Edges: []*WalletEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := w.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := w.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	w = pager.applyCursors(w, after, before)
	w = pager.applyOrder(w, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		w = w.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := w.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Wallet
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Wallet {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Wallet {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WalletEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WalletEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// WalletOrderFieldCreatedAt orders Wallet by created_at.
	WalletOrderFieldCreatedAt = &WalletOrderField{
		field: wallet.FieldCreatedAt,
		toCursor: func(w *Wallet) Cursor {
			return Cursor{
				ID:    w.ID,
				Value: w.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f WalletOrderField) String() string {
	var str string
	switch f.field {
	case wallet.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f WalletOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *WalletOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("WalletOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *WalletOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid WalletOrderField", str)
	}
	return nil
}

// WalletOrderField defines the ordering field of Wallet.
type WalletOrderField struct {
	field    string
	toCursor func(*Wallet) Cursor
}

// WalletOrder defines the ordering of Wallet.
type WalletOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *WalletOrderField `json:"field"`
}

// DefaultWalletOrder is the default ordering of Wallet.
var DefaultWalletOrder = &WalletOrder{
	Direction: OrderDirectionAsc,
	Field: &WalletOrderField{
		field: wallet.FieldID,
		toCursor: func(w *Wallet) Cursor {
			return Cursor{ID: w.ID}
		},
	},
}

// ToEdge converts Wallet into WalletEdge.
func (w *Wallet) ToEdge(order *WalletOrder) *WalletEdge {
	if order == nil {
		order = DefaultWalletOrder
	}
	return &WalletEdge{
		Node:   w,
		Cursor: order.Field.toCursor(w),
	}
}

// WalletItemsEdge is the edge representation of WalletItems.
type WalletItemsEdge struct {
	Node   *WalletItems `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// WalletItemsConnection is the connection containing edges to WalletItems.
type WalletItemsConnection struct {
	Edges      []*WalletItemsEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

// WalletItemsPaginateOption enables pagination customization.
type WalletItemsPaginateOption func(*walletItemsPager) error

// WithWalletItemsOrder configures pagination ordering.
func WithWalletItemsOrder(order *WalletItemsOrder) WalletItemsPaginateOption {
	if order == nil {
		order = DefaultWalletItemsOrder
	}
	o := *order
	return func(pager *walletItemsPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWalletItemsOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWalletItemsFilter configures pagination filter.
func WithWalletItemsFilter(filter func(*WalletItemsQuery) (*WalletItemsQuery, error)) WalletItemsPaginateOption {
	return func(pager *walletItemsPager) error {
		if filter == nil {
			return errors.New("WalletItemsQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type walletItemsPager struct {
	order  *WalletItemsOrder
	filter func(*WalletItemsQuery) (*WalletItemsQuery, error)
}

func newWalletItemsPager(opts []WalletItemsPaginateOption) (*walletItemsPager, error) {
	pager := &walletItemsPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWalletItemsOrder
	}
	return pager, nil
}

func (p *walletItemsPager) applyFilter(query *WalletItemsQuery) (*WalletItemsQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *walletItemsPager) toCursor(wi *WalletItems) Cursor {
	return p.order.Field.toCursor(wi)
}

func (p *walletItemsPager) applyCursors(query *WalletItemsQuery, after, before *Cursor) *WalletItemsQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWalletItemsOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *walletItemsPager) applyOrder(query *WalletItemsQuery, reverse bool) *WalletItemsQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWalletItemsOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWalletItemsOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to WalletItems.
func (wi *WalletItemsQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WalletItemsPaginateOption,
) (*WalletItemsConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWalletItemsPager(opts)
	if err != nil {
		return nil, err
	}

	if wi, err = pager.applyFilter(wi); err != nil {
		return nil, err
	}

	conn := &WalletItemsConnection{Edges: []*WalletItemsEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := wi.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := wi.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	wi = pager.applyCursors(wi, after, before)
	wi = pager.applyOrder(wi, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		wi = wi.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		wi = wi.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := wi.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *WalletItems
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WalletItems {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WalletItems {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WalletItemsEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WalletItemsEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WalletItemsOrderField defines the ordering field of WalletItems.
type WalletItemsOrderField struct {
	field    string
	toCursor func(*WalletItems) Cursor
}

// WalletItemsOrder defines the ordering of WalletItems.
type WalletItemsOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *WalletItemsOrderField `json:"field"`
}

// DefaultWalletItemsOrder is the default ordering of WalletItems.
var DefaultWalletItemsOrder = &WalletItemsOrder{
	Direction: OrderDirectionAsc,
	Field: &WalletItemsOrderField{
		field: walletitems.FieldID,
		toCursor: func(wi *WalletItems) Cursor {
			return Cursor{ID: wi.ID}
		},
	},
}

// ToEdge converts WalletItems into WalletItemsEdge.
func (wi *WalletItems) ToEdge(order *WalletItemsOrder) *WalletItemsEdge {
	if order == nil {
		order = DefaultWalletItemsOrder
	}
	return &WalletItemsEdge{
		Node:   wi,
		Cursor: order.Field.toCursor(wi),
	}
}
