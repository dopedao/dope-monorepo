



// Code generated by entc, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
			"github.com/dopedao/dope-monorepo/packages/api/ent/schema"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/schema/field"

)


import (
		"github.com/dopedao/dope-monorepo/packages/api/ent/search"
		"github.com/dopedao/dope-monorepo/packages/api/ent/dope"
		"github.com/dopedao/dope-monorepo/packages/api/ent/item"
		"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
)






// SearchUpdate is the builder for updating Search entities.
type SearchUpdate struct {
	config
	hooks []Hook
	mutation *SearchMutation
}

// Where appends a list predicates to the SearchUpdate builder.
func (su *SearchUpdate) Where(ps ...predicate.Search) *SearchUpdate {
	su.mutation.Where(ps...)
	return su
}


	




	
	


	
	
	// SetGreatness sets the "greatness" field.
	func (su *SearchUpdate) SetGreatness(i int) *SearchUpdate {
			su.mutation.ResetGreatness()
		su.mutation.SetGreatness(i)
		return su
	}

	
	
		
		// SetNillableGreatness sets the "greatness" field if the given value is not nil.
		func (su *SearchUpdate) SetNillableGreatness(i *int) *SearchUpdate {
			if i != nil {
				su.SetGreatness(*i)
			}
			return su
		}
	

	
		
		// AddGreatness adds i to the "greatness" field.
		func (su *SearchUpdate) AddGreatness(i int) *SearchUpdate {
			su.mutation.AddGreatness(i)
			return su
		}
	

	
		
		// ClearGreatness clears the value of the "greatness" field.
		func (su *SearchUpdate) ClearGreatness() *SearchUpdate {
			su.mutation.ClearGreatness()
			return su
		}
	

	
	
	// SetClaimed sets the "claimed" field.
	func (su *SearchUpdate) SetClaimed(b bool) *SearchUpdate {
		su.mutation.SetClaimed(b)
		return su
	}

	
	

	

	

	
	
	// SetOpened sets the "opened" field.
	func (su *SearchUpdate) SetOpened(b bool) *SearchUpdate {
		su.mutation.SetOpened(b)
		return su
	}

	
	

	

	

	
	
	// SetSaleActive sets the "sale_active" field.
	func (su *SearchUpdate) SetSaleActive(b bool) *SearchUpdate {
		su.mutation.SetSaleActive(b)
		return su
	}

	
	

	

	

	
	
	// SetSalePrice sets the "sale_price" field.
	func (su *SearchUpdate) SetSalePrice(si schema.BigInt) *SearchUpdate {
			su.mutation.ResetSalePrice()
		su.mutation.SetSalePrice(si)
		return su
	}

	
	
		
		// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
		func (su *SearchUpdate) SetNillableSalePrice(si *schema.BigInt) *SearchUpdate {
			if si != nil {
				su.SetSalePrice(*si)
			}
			return su
		}
	

	
		
		// AddSalePrice adds si to the "sale_price" field.
		func (su *SearchUpdate) AddSalePrice(si schema.BigInt) *SearchUpdate {
			su.mutation.AddSalePrice(si)
			return su
		}
	

	

	
	
	// SetLastSalePrice sets the "last_sale_price" field.
	func (su *SearchUpdate) SetLastSalePrice(si schema.BigInt) *SearchUpdate {
			su.mutation.ResetLastSalePrice()
		su.mutation.SetLastSalePrice(si)
		return su
	}

	
	
		
		// SetNillableLastSalePrice sets the "last_sale_price" field if the given value is not nil.
		func (su *SearchUpdate) SetNillableLastSalePrice(si *schema.BigInt) *SearchUpdate {
			if si != nil {
				su.SetLastSalePrice(*si)
			}
			return su
		}
	

	
		
		// AddLastSalePrice adds si to the "last_sale_price" field.
		func (su *SearchUpdate) AddLastSalePrice(si schema.BigInt) *SearchUpdate {
			su.mutation.AddLastSalePrice(si)
			return su
		}
	

	



	
	
	
	
		// SetDopeID sets the "dope" edge to the Dope entity by ID.
		func (su *SearchUpdate) SetDopeID(id string) *SearchUpdate {
			su.mutation.SetDopeID(id)
			return su
		}
	
	
		
		// SetNillableDopeID sets the "dope" edge to the Dope entity by ID if the given value is not nil.
		func (su *SearchUpdate) SetNillableDopeID(id *string) *SearchUpdate {
			if id != nil {
				su = su.SetDopeID(*id)
			}
			return su
		}
	
	
	
	
	// SetDope sets the "dope" edge to the Dope entity.
	func (su *SearchUpdate) SetDope(d *Dope) *SearchUpdate {
		return su.SetDopeID(d.ID)
	}

	
	
	
	
		// SetItemID sets the "item" edge to the Item entity by ID.
		func (su *SearchUpdate) SetItemID(id string) *SearchUpdate {
			su.mutation.SetItemID(id)
			return su
		}
	
	
		
		// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
		func (su *SearchUpdate) SetNillableItemID(id *string) *SearchUpdate {
			if id != nil {
				su = su.SetItemID(*id)
			}
			return su
		}
	
	
	
	
	// SetItem sets the "item" edge to the Item entity.
	func (su *SearchUpdate) SetItem(i *Item) *SearchUpdate {
		return su.SetItemID(i.ID)
	}

	
	
	
	
		// SetHustlerID sets the "hustler" edge to the Hustler entity by ID.
		func (su *SearchUpdate) SetHustlerID(id string) *SearchUpdate {
			su.mutation.SetHustlerID(id)
			return su
		}
	
	
		
		// SetNillableHustlerID sets the "hustler" edge to the Hustler entity by ID if the given value is not nil.
		func (su *SearchUpdate) SetNillableHustlerID(id *string) *SearchUpdate {
			if id != nil {
				su = su.SetHustlerID(*id)
			}
			return su
		}
	
	
	
	
	// SetHustler sets the "hustler" edge to the Hustler entity.
	func (su *SearchUpdate) SetHustler(h *Hustler) *SearchUpdate {
		return su.SetHustlerID(h.ID)
	}


// Mutation returns the SearchMutation object of the builder.
func (su *SearchUpdate) Mutation() *SearchMutation {
	return su.mutation
}





	





	
	// ClearDope clears the "dope" edge to the Dope entity.
	func (su *SearchUpdate) ClearDope() *SearchUpdate {
		su.mutation.ClearDope()
		return su
	}
	

	
	// ClearItem clears the "item" edge to the Item entity.
	func (su *SearchUpdate) ClearItem() *SearchUpdate {
		su.mutation.ClearItem()
		return su
	}
	

	
	// ClearHustler clears the "hustler" edge to the Hustler entity.
	func (su *SearchUpdate) ClearHustler() *SearchUpdate {
		su.mutation.ClearHustler()
		return su
	}
	




// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SearchUpdate) Save(ctx context.Context) (int, error) {
	var (
		err error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SearchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SearchUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SearchUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SearchUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}


	














	
	






func (su *SearchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table: search.Table,
			Columns: search.Columns,
			ID: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: search.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
				if value, ok := su.mutation.Greatness(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeInt,
						Value: value,
						Column: search.FieldGreatness,
					})
				}
					if value, ok := su.mutation.AddedGreatness(); ok {
						_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
							Type: field.TypeInt,
							Value: value,
							Column: search.FieldGreatness,
						})
					}
				if su.mutation.GreatnessCleared() {
					_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
						Type: field.TypeInt,
						Column: search.FieldGreatness,
					})
				}
				if value, ok := su.mutation.Claimed(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeBool,
						Value: value,
						Column: search.FieldClaimed,
					})
				}
				if value, ok := su.mutation.Opened(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeBool,
						Value: value,
						Column: search.FieldOpened,
					})
				}
				if value, ok := su.mutation.SaleActive(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeBool,
						Value: value,
						Column: search.FieldSaleActive,
					})
				}
				if value, ok := su.mutation.SalePrice(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeInt,
						Value: value,
						Column: search.FieldSalePrice,
					})
				}
					if value, ok := su.mutation.AddedSalePrice(); ok {
						_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
							Type: field.TypeInt,
							Value: value,
							Column: search.FieldSalePrice,
						})
					}
				if value, ok := su.mutation.LastSalePrice(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeInt,
						Value: value,
						Column: search.FieldLastSalePrice,
					})
				}
					if value, ok := su.mutation.AddedLastSalePrice(); ok {
						_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
							Type: field.TypeInt,
							Value: value,
							Column: search.FieldLastSalePrice,
						})
					}
		if su.mutation.DopeCleared() {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.DopeTable,
		Columns: []string{ search.DopeColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: dope.FieldID,
			},
		},
	}
			_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
		}
		if nodes := su.mutation.DopeIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.DopeTable,
		Columns: []string{ search.DopeColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: dope.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
			_spec.Edges.Add = append(_spec.Edges.Add, edge)
		}
		if su.mutation.ItemCleared() {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.ItemTable,
		Columns: []string{ search.ItemColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: item.FieldID,
			},
		},
	}
			_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
		}
		if nodes := su.mutation.ItemIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.ItemTable,
		Columns: []string{ search.ItemColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: item.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
			_spec.Edges.Add = append(_spec.Edges.Add, edge)
		}
		if su.mutation.HustlerCleared() {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.HustlerTable,
		Columns: []string{ search.HustlerColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: hustler.FieldID,
			},
		},
	}
			_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
		}
		if nodes := su.mutation.HustlerIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.HustlerTable,
		Columns: []string{ search.HustlerColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: hustler.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
			_spec.Edges.Add = append(_spec.Edges.Add, edge)
		}
		if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ search.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}







// SearchUpdateOne is the builder for updating a single Search entity.
type SearchUpdateOne struct {
	config
	fields []string
	hooks []Hook
	mutation *SearchMutation

}


	




	
	


	
	
	// SetGreatness sets the "greatness" field.
	func (suo *SearchUpdateOne) SetGreatness(i int) *SearchUpdateOne {
			suo.mutation.ResetGreatness()
		suo.mutation.SetGreatness(i)
		return suo
	}

	
	
		
		// SetNillableGreatness sets the "greatness" field if the given value is not nil.
		func (suo *SearchUpdateOne) SetNillableGreatness(i *int) *SearchUpdateOne {
			if i != nil {
				suo.SetGreatness(*i)
			}
			return suo
		}
	

	
		
		// AddGreatness adds i to the "greatness" field.
		func (suo *SearchUpdateOne) AddGreatness(i int) *SearchUpdateOne {
			suo.mutation.AddGreatness(i)
			return suo
		}
	

	
		
		// ClearGreatness clears the value of the "greatness" field.
		func (suo *SearchUpdateOne) ClearGreatness() *SearchUpdateOne {
			suo.mutation.ClearGreatness()
			return suo
		}
	

	
	
	// SetClaimed sets the "claimed" field.
	func (suo *SearchUpdateOne) SetClaimed(b bool) *SearchUpdateOne {
		suo.mutation.SetClaimed(b)
		return suo
	}

	
	

	

	

	
	
	// SetOpened sets the "opened" field.
	func (suo *SearchUpdateOne) SetOpened(b bool) *SearchUpdateOne {
		suo.mutation.SetOpened(b)
		return suo
	}

	
	

	

	

	
	
	// SetSaleActive sets the "sale_active" field.
	func (suo *SearchUpdateOne) SetSaleActive(b bool) *SearchUpdateOne {
		suo.mutation.SetSaleActive(b)
		return suo
	}

	
	

	

	

	
	
	// SetSalePrice sets the "sale_price" field.
	func (suo *SearchUpdateOne) SetSalePrice(si schema.BigInt) *SearchUpdateOne {
			suo.mutation.ResetSalePrice()
		suo.mutation.SetSalePrice(si)
		return suo
	}

	
	
		
		// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
		func (suo *SearchUpdateOne) SetNillableSalePrice(si *schema.BigInt) *SearchUpdateOne {
			if si != nil {
				suo.SetSalePrice(*si)
			}
			return suo
		}
	

	
		
		// AddSalePrice adds si to the "sale_price" field.
		func (suo *SearchUpdateOne) AddSalePrice(si schema.BigInt) *SearchUpdateOne {
			suo.mutation.AddSalePrice(si)
			return suo
		}
	

	

	
	
	// SetLastSalePrice sets the "last_sale_price" field.
	func (suo *SearchUpdateOne) SetLastSalePrice(si schema.BigInt) *SearchUpdateOne {
			suo.mutation.ResetLastSalePrice()
		suo.mutation.SetLastSalePrice(si)
		return suo
	}

	
	
		
		// SetNillableLastSalePrice sets the "last_sale_price" field if the given value is not nil.
		func (suo *SearchUpdateOne) SetNillableLastSalePrice(si *schema.BigInt) *SearchUpdateOne {
			if si != nil {
				suo.SetLastSalePrice(*si)
			}
			return suo
		}
	

	
		
		// AddLastSalePrice adds si to the "last_sale_price" field.
		func (suo *SearchUpdateOne) AddLastSalePrice(si schema.BigInt) *SearchUpdateOne {
			suo.mutation.AddLastSalePrice(si)
			return suo
		}
	

	



	
	
	
	
		// SetDopeID sets the "dope" edge to the Dope entity by ID.
		func (suo *SearchUpdateOne) SetDopeID(id string) *SearchUpdateOne {
			suo.mutation.SetDopeID(id)
			return suo
		}
	
	
		
		// SetNillableDopeID sets the "dope" edge to the Dope entity by ID if the given value is not nil.
		func (suo *SearchUpdateOne) SetNillableDopeID(id *string) *SearchUpdateOne {
			if id != nil {
				suo = suo.SetDopeID(*id)
			}
			return suo
		}
	
	
	
	
	// SetDope sets the "dope" edge to the Dope entity.
	func (suo *SearchUpdateOne) SetDope(d *Dope) *SearchUpdateOne {
		return suo.SetDopeID(d.ID)
	}

	
	
	
	
		// SetItemID sets the "item" edge to the Item entity by ID.
		func (suo *SearchUpdateOne) SetItemID(id string) *SearchUpdateOne {
			suo.mutation.SetItemID(id)
			return suo
		}
	
	
		
		// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
		func (suo *SearchUpdateOne) SetNillableItemID(id *string) *SearchUpdateOne {
			if id != nil {
				suo = suo.SetItemID(*id)
			}
			return suo
		}
	
	
	
	
	// SetItem sets the "item" edge to the Item entity.
	func (suo *SearchUpdateOne) SetItem(i *Item) *SearchUpdateOne {
		return suo.SetItemID(i.ID)
	}

	
	
	
	
		// SetHustlerID sets the "hustler" edge to the Hustler entity by ID.
		func (suo *SearchUpdateOne) SetHustlerID(id string) *SearchUpdateOne {
			suo.mutation.SetHustlerID(id)
			return suo
		}
	
	
		
		// SetNillableHustlerID sets the "hustler" edge to the Hustler entity by ID if the given value is not nil.
		func (suo *SearchUpdateOne) SetNillableHustlerID(id *string) *SearchUpdateOne {
			if id != nil {
				suo = suo.SetHustlerID(*id)
			}
			return suo
		}
	
	
	
	
	// SetHustler sets the "hustler" edge to the Hustler entity.
	func (suo *SearchUpdateOne) SetHustler(h *Hustler) *SearchUpdateOne {
		return suo.SetHustlerID(h.ID)
	}


// Mutation returns the SearchMutation object of the builder.
func (suo *SearchUpdateOne) Mutation() *SearchMutation {
	return suo.mutation
}






	





	
	// ClearDope clears the "dope" edge to the Dope entity.
	func (suo *SearchUpdateOne) ClearDope() *SearchUpdateOne {
		suo.mutation.ClearDope()
		return suo
	}
	

	
	// ClearItem clears the "item" edge to the Item entity.
	func (suo *SearchUpdateOne) ClearItem() *SearchUpdateOne {
		suo.mutation.ClearItem()
		return suo
	}
	

	
	// ClearHustler clears the "hustler" edge to the Hustler entity.
	func (suo *SearchUpdateOne) ClearHustler() *SearchUpdateOne {
		suo.mutation.ClearHustler()
		return suo
	}
	




// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SearchUpdateOne) Select(field string, fields ...string) *SearchUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Search entity.
func (suo *SearchUpdateOne ) Save(ctx context.Context) (*Search, error) {
	var (
		err error
		node *Search
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SearchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SearchUpdateOne) SaveX(ctx context.Context) *Search {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SearchUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SearchUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}


	














	
	






func (suo *SearchUpdateOne) sqlSave(ctx context.Context) (_node *Search, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table: search.Table,
			Columns: search.Columns,
			ID: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: search.FieldID,
			},
		},
	}
		id, ok := suo.mutation.ID()
		if !ok {
			return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Search.id" for update`)}
		}
		_spec.Node.ID.Value = id
		if fields := suo.fields; len(fields) > 0 {
			_spec.Node.Columns = make([]string, 0, len(fields))
			_spec.Node.Columns = append(_spec.Node.Columns, search.FieldID)
			for _, f := range fields {
				if !search.ValidColumn(f) {
					return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
				}
				if f != search.FieldID {
					_spec.Node.Columns = append(_spec.Node.Columns, f)
				}
			}
		}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
				if value, ok := suo.mutation.Greatness(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeInt,
						Value: value,
						Column: search.FieldGreatness,
					})
				}
					if value, ok := suo.mutation.AddedGreatness(); ok {
						_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
							Type: field.TypeInt,
							Value: value,
							Column: search.FieldGreatness,
						})
					}
				if suo.mutation.GreatnessCleared() {
					_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
						Type: field.TypeInt,
						Column: search.FieldGreatness,
					})
				}
				if value, ok := suo.mutation.Claimed(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeBool,
						Value: value,
						Column: search.FieldClaimed,
					})
				}
				if value, ok := suo.mutation.Opened(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeBool,
						Value: value,
						Column: search.FieldOpened,
					})
				}
				if value, ok := suo.mutation.SaleActive(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeBool,
						Value: value,
						Column: search.FieldSaleActive,
					})
				}
				if value, ok := suo.mutation.SalePrice(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeInt,
						Value: value,
						Column: search.FieldSalePrice,
					})
				}
					if value, ok := suo.mutation.AddedSalePrice(); ok {
						_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
							Type: field.TypeInt,
							Value: value,
							Column: search.FieldSalePrice,
						})
					}
				if value, ok := suo.mutation.LastSalePrice(); ok {
					_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
						Type: field.TypeInt,
						Value: value,
						Column: search.FieldLastSalePrice,
					})
				}
					if value, ok := suo.mutation.AddedLastSalePrice(); ok {
						_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
							Type: field.TypeInt,
							Value: value,
							Column: search.FieldLastSalePrice,
						})
					}
		if suo.mutation.DopeCleared() {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.DopeTable,
		Columns: []string{ search.DopeColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: dope.FieldID,
			},
		},
	}
			_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
		}
		if nodes := suo.mutation.DopeIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.DopeTable,
		Columns: []string{ search.DopeColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: dope.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
			_spec.Edges.Add = append(_spec.Edges.Add, edge)
		}
		if suo.mutation.ItemCleared() {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.ItemTable,
		Columns: []string{ search.ItemColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: item.FieldID,
			},
		},
	}
			_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
		}
		if nodes := suo.mutation.ItemIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.ItemTable,
		Columns: []string{ search.ItemColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: item.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
			_spec.Edges.Add = append(_spec.Edges.Add, edge)
		}
		if suo.mutation.HustlerCleared() {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.HustlerTable,
		Columns: []string{ search.HustlerColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: hustler.FieldID,
			},
		},
	}
			_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
		}
		if nodes := suo.mutation.HustlerIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.O2O,
		Inverse: true,
		Table: search.HustlerTable,
		Columns: []string{ search.HustlerColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeString,
				Column: hustler.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
			_spec.Edges.Add = append(_spec.Edges.Add, edge)
		}
		_node = &Search{config: suo.config}
		_spec.Assign = _node.assignValues
		_spec.ScanValues = _node.scanValues
		if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ search.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}



