// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/dopedao/dope-monorepo/packages/api/ent"
)

type SearchResult interface {
	IsSearchResult()
}

type Token interface {
	IsToken()
}

type SearchOrder struct {
	Direction *ent.OrderDirection `json:"direction"`
	Field     *SearchOrderField   `json:"field"`
}

type SearchWhereInput struct {
	Not          *SearchWhereInput   `json:"not"`
	And          []*SearchWhereInput `json:"and"`
	Or           []*SearchWhereInput `json:"or"`
	PaperClaimed *bool               `json:"paperClaimed"`
	ForSale      *bool               `json:"forSale"`
	DopeOpened   *bool               `json:"dopeOpened"`
}

type SearchOrderField string

const (
	SearchOrderFieldRank           SearchOrderField = "RANK"
	SearchOrderFieldAffordable     SearchOrderField = "AFFORDABLE"
	SearchOrderFieldLastSaleAmount SearchOrderField = "LAST_SALE_AMOUNT"
)

var AllSearchOrderField = []SearchOrderField{
	SearchOrderFieldRank,
	SearchOrderFieldAffordable,
	SearchOrderFieldLastSaleAmount,
}

func (e SearchOrderField) IsValid() bool {
	switch e {
	case SearchOrderFieldRank, SearchOrderFieldAffordable, SearchOrderFieldLastSaleAmount:
		return true
	}
	return false
}

func (e SearchOrderField) String() string {
	return string(e)
}

func (e *SearchOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchOrderField", str)
	}
	return nil
}

func (e SearchOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
