// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/search"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/walletitems"
)

// ItemQuery is the builder for querying Item entities.
type ItemQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Item
	// eager-loading edges.
	withWallets            *WalletItemsQuery
	withDopes              *DopeQuery
	withHustlerWeapons     *HustlerQuery
	withHustlerClothes     *HustlerQuery
	withHustlerVehicles    *HustlerQuery
	withHustlerWaists      *HustlerQuery
	withHustlerFeet        *HustlerQuery
	withHustlerHands       *HustlerQuery
	withHustlerDrugs       *HustlerQuery
	withHustlerNecks       *HustlerQuery
	withHustlerRings       *HustlerQuery
	withHustlerAccessories *HustlerQuery
	withBase               *ItemQuery
	withDerivative         *ItemQuery
	withIndex              *SearchQuery
	withFKs                bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ItemQuery builder.
func (iq *ItemQuery) Where(ps ...predicate.Item) *ItemQuery {
	iq.predicates = append(iq.predicates, ps...)
	return iq
}

// Limit adds a limit step to the query.
func (iq *ItemQuery) Limit(limit int) *ItemQuery {
	iq.limit = &limit
	return iq
}

// Offset adds an offset step to the query.
func (iq *ItemQuery) Offset(offset int) *ItemQuery {
	iq.offset = &offset
	return iq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iq *ItemQuery) Unique(unique bool) *ItemQuery {
	iq.unique = &unique
	return iq
}

// Order adds an order step to the query.
func (iq *ItemQuery) Order(o ...OrderFunc) *ItemQuery {
	iq.order = append(iq.order, o...)
	return iq
}

// QueryWallets chains the current query on the "wallets" edge.
func (iq *ItemQuery) QueryWallets() *WalletItemsQuery {
	query := &WalletItemsQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(walletitems.Table, walletitems.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.WalletsTable, item.WalletsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDopes chains the current query on the "dopes" edge.
func (iq *ItemQuery) QueryDopes() *DopeQuery {
	query := &DopeQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(dope.Table, dope.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, item.DopesTable, item.DopesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerWeapons chains the current query on the "hustler_weapons" edge.
func (iq *ItemQuery) QueryHustlerWeapons() *HustlerQuery {
	query := &HustlerQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerWeaponsTable, item.HustlerWeaponsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerClothes chains the current query on the "hustler_clothes" edge.
func (iq *ItemQuery) QueryHustlerClothes() *HustlerQuery {
	query := &HustlerQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerClothesTable, item.HustlerClothesColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerVehicles chains the current query on the "hustler_vehicles" edge.
func (iq *ItemQuery) QueryHustlerVehicles() *HustlerQuery {
	query := &HustlerQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerVehiclesTable, item.HustlerVehiclesColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerWaists chains the current query on the "hustler_waists" edge.
func (iq *ItemQuery) QueryHustlerWaists() *HustlerQuery {
	query := &HustlerQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerWaistsTable, item.HustlerWaistsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerFeet chains the current query on the "hustler_feet" edge.
func (iq *ItemQuery) QueryHustlerFeet() *HustlerQuery {
	query := &HustlerQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerFeetTable, item.HustlerFeetColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerHands chains the current query on the "hustler_hands" edge.
func (iq *ItemQuery) QueryHustlerHands() *HustlerQuery {
	query := &HustlerQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerHandsTable, item.HustlerHandsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerDrugs chains the current query on the "hustler_drugs" edge.
func (iq *ItemQuery) QueryHustlerDrugs() *HustlerQuery {
	query := &HustlerQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerDrugsTable, item.HustlerDrugsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerNecks chains the current query on the "hustler_necks" edge.
func (iq *ItemQuery) QueryHustlerNecks() *HustlerQuery {
	query := &HustlerQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerNecksTable, item.HustlerNecksColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerRings chains the current query on the "hustler_rings" edge.
func (iq *ItemQuery) QueryHustlerRings() *HustlerQuery {
	query := &HustlerQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerRingsTable, item.HustlerRingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerAccessories chains the current query on the "hustler_accessories" edge.
func (iq *ItemQuery) QueryHustlerAccessories() *HustlerQuery {
	query := &HustlerQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerAccessoriesTable, item.HustlerAccessoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBase chains the current query on the "base" edge.
func (iq *ItemQuery) QueryBase() *ItemQuery {
	query := &ItemQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, item.BaseTable, item.BaseColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDerivative chains the current query on the "derivative" edge.
func (iq *ItemQuery) QueryDerivative() *ItemQuery {
	query := &ItemQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.DerivativeTable, item.DerivativeColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIndex chains the current query on the "index" edge.
func (iq *ItemQuery) QueryIndex() *SearchQuery {
	query := &SearchQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(search.Table, search.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, item.IndexTable, item.IndexColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Item entity from the query.
// Returns a *NotFoundError when no Item was found.
func (iq *ItemQuery) First(ctx context.Context) (*Item, error) {
	nodes, err := iq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{item.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iq *ItemQuery) FirstX(ctx context.Context) *Item {
	node, err := iq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Item ID from the query.
// Returns a *NotFoundError when no Item ID was found.
func (iq *ItemQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = iq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{item.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iq *ItemQuery) FirstIDX(ctx context.Context) string {
	id, err := iq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Item entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Item entity is found.
// Returns a *NotFoundError when no Item entities are found.
func (iq *ItemQuery) Only(ctx context.Context) (*Item, error) {
	nodes, err := iq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{item.Label}
	default:
		return nil, &NotSingularError{item.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iq *ItemQuery) OnlyX(ctx context.Context) *Item {
	node, err := iq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Item ID in the query.
// Returns a *NotSingularError when more than one Item ID is found.
// Returns a *NotFoundError when no entities are found.
func (iq *ItemQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = iq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{item.Label}
	default:
		err = &NotSingularError{item.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iq *ItemQuery) OnlyIDX(ctx context.Context) string {
	id, err := iq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Items.
func (iq *ItemQuery) All(ctx context.Context) ([]*Item, error) {
	if err := iq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return iq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (iq *ItemQuery) AllX(ctx context.Context) []*Item {
	nodes, err := iq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Item IDs.
func (iq *ItemQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := iq.Select(item.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iq *ItemQuery) IDsX(ctx context.Context) []string {
	ids, err := iq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iq *ItemQuery) Count(ctx context.Context) (int, error) {
	if err := iq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return iq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (iq *ItemQuery) CountX(ctx context.Context) int {
	count, err := iq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iq *ItemQuery) Exist(ctx context.Context) (bool, error) {
	if err := iq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return iq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (iq *ItemQuery) ExistX(ctx context.Context) bool {
	exist, err := iq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iq *ItemQuery) Clone() *ItemQuery {
	if iq == nil {
		return nil
	}
	return &ItemQuery{
		config:                 iq.config,
		limit:                  iq.limit,
		offset:                 iq.offset,
		order:                  append([]OrderFunc{}, iq.order...),
		predicates:             append([]predicate.Item{}, iq.predicates...),
		withWallets:            iq.withWallets.Clone(),
		withDopes:              iq.withDopes.Clone(),
		withHustlerWeapons:     iq.withHustlerWeapons.Clone(),
		withHustlerClothes:     iq.withHustlerClothes.Clone(),
		withHustlerVehicles:    iq.withHustlerVehicles.Clone(),
		withHustlerWaists:      iq.withHustlerWaists.Clone(),
		withHustlerFeet:        iq.withHustlerFeet.Clone(),
		withHustlerHands:       iq.withHustlerHands.Clone(),
		withHustlerDrugs:       iq.withHustlerDrugs.Clone(),
		withHustlerNecks:       iq.withHustlerNecks.Clone(),
		withHustlerRings:       iq.withHustlerRings.Clone(),
		withHustlerAccessories: iq.withHustlerAccessories.Clone(),
		withBase:               iq.withBase.Clone(),
		withDerivative:         iq.withDerivative.Clone(),
		withIndex:              iq.withIndex.Clone(),
		// clone intermediate query.
		sql:    iq.sql.Clone(),
		path:   iq.path,
		unique: iq.unique,
	}
}

// WithWallets tells the query-builder to eager-load the nodes that are connected to
// the "wallets" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithWallets(opts ...func(*WalletItemsQuery)) *ItemQuery {
	query := &WalletItemsQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withWallets = query
	return iq
}

// WithDopes tells the query-builder to eager-load the nodes that are connected to
// the "dopes" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithDopes(opts ...func(*DopeQuery)) *ItemQuery {
	query := &DopeQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withDopes = query
	return iq
}

// WithHustlerWeapons tells the query-builder to eager-load the nodes that are connected to
// the "hustler_weapons" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerWeapons(opts ...func(*HustlerQuery)) *ItemQuery {
	query := &HustlerQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerWeapons = query
	return iq
}

// WithHustlerClothes tells the query-builder to eager-load the nodes that are connected to
// the "hustler_clothes" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerClothes(opts ...func(*HustlerQuery)) *ItemQuery {
	query := &HustlerQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerClothes = query
	return iq
}

// WithHustlerVehicles tells the query-builder to eager-load the nodes that are connected to
// the "hustler_vehicles" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerVehicles(opts ...func(*HustlerQuery)) *ItemQuery {
	query := &HustlerQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerVehicles = query
	return iq
}

// WithHustlerWaists tells the query-builder to eager-load the nodes that are connected to
// the "hustler_waists" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerWaists(opts ...func(*HustlerQuery)) *ItemQuery {
	query := &HustlerQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerWaists = query
	return iq
}

// WithHustlerFeet tells the query-builder to eager-load the nodes that are connected to
// the "hustler_feet" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerFeet(opts ...func(*HustlerQuery)) *ItemQuery {
	query := &HustlerQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerFeet = query
	return iq
}

// WithHustlerHands tells the query-builder to eager-load the nodes that are connected to
// the "hustler_hands" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerHands(opts ...func(*HustlerQuery)) *ItemQuery {
	query := &HustlerQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerHands = query
	return iq
}

// WithHustlerDrugs tells the query-builder to eager-load the nodes that are connected to
// the "hustler_drugs" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerDrugs(opts ...func(*HustlerQuery)) *ItemQuery {
	query := &HustlerQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerDrugs = query
	return iq
}

// WithHustlerNecks tells the query-builder to eager-load the nodes that are connected to
// the "hustler_necks" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerNecks(opts ...func(*HustlerQuery)) *ItemQuery {
	query := &HustlerQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerNecks = query
	return iq
}

// WithHustlerRings tells the query-builder to eager-load the nodes that are connected to
// the "hustler_rings" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerRings(opts ...func(*HustlerQuery)) *ItemQuery {
	query := &HustlerQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerRings = query
	return iq
}

// WithHustlerAccessories tells the query-builder to eager-load the nodes that are connected to
// the "hustler_accessories" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerAccessories(opts ...func(*HustlerQuery)) *ItemQuery {
	query := &HustlerQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerAccessories = query
	return iq
}

// WithBase tells the query-builder to eager-load the nodes that are connected to
// the "base" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithBase(opts ...func(*ItemQuery)) *ItemQuery {
	query := &ItemQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withBase = query
	return iq
}

// WithDerivative tells the query-builder to eager-load the nodes that are connected to
// the "derivative" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithDerivative(opts ...func(*ItemQuery)) *ItemQuery {
	query := &ItemQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withDerivative = query
	return iq
}

// WithIndex tells the query-builder to eager-load the nodes that are connected to
// the "index" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithIndex(opts ...func(*SearchQuery)) *ItemQuery {
	query := &SearchQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withIndex = query
	return iq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type item.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Item.Query().
//		GroupBy(item.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (iq *ItemQuery) GroupBy(field string, fields ...string) *ItemGroupBy {
	group := &ItemGroupBy{config: iq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return iq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type item.Type `json:"type,omitempty"`
//	}
//
//	client.Item.Query().
//		Select(item.FieldType).
//		Scan(ctx, &v)
//
func (iq *ItemQuery) Select(fields ...string) *ItemSelect {
	iq.fields = append(iq.fields, fields...)
	return &ItemSelect{ItemQuery: iq}
}

func (iq *ItemQuery) prepareQuery(ctx context.Context) error {
	for _, f := range iq.fields {
		if !item.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iq.path != nil {
		prev, err := iq.path(ctx)
		if err != nil {
			return err
		}
		iq.sql = prev
	}
	return nil
}

func (iq *ItemQuery) sqlAll(ctx context.Context) ([]*Item, error) {
	var (
		nodes       = []*Item{}
		withFKs     = iq.withFKs
		_spec       = iq.querySpec()
		loadedTypes = [15]bool{
			iq.withWallets != nil,
			iq.withDopes != nil,
			iq.withHustlerWeapons != nil,
			iq.withHustlerClothes != nil,
			iq.withHustlerVehicles != nil,
			iq.withHustlerWaists != nil,
			iq.withHustlerFeet != nil,
			iq.withHustlerHands != nil,
			iq.withHustlerDrugs != nil,
			iq.withHustlerNecks != nil,
			iq.withHustlerRings != nil,
			iq.withHustlerAccessories != nil,
			iq.withBase != nil,
			iq.withDerivative != nil,
			iq.withIndex != nil,
		}
	)
	if iq.withBase != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, item.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Item{config: iq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, iq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := iq.withWallets; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Wallets = []*WalletItems{}
		}
		query.withFKs = true
		query.Where(predicate.WalletItems(func(s *sql.Selector) {
			s.Where(sql.InValues(item.WalletsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_wallets
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_wallets" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_wallets" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Wallets = append(node.Edges.Wallets, n)
		}
	}

	if query := iq.withDopes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[string]*Item, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Dopes = []*Dope{}
		}
		var (
			edgeids []string
			edges   = make(map[string][]*Item)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   item.DopesTable,
				Columns: item.DopesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(item.DopesPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullString), new(sql.NullString)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullString)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullString)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := eout.String
				inValue := ein.String
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, iq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "dopes": %w`, err)
		}
		query.Where(dope.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "dopes" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Dopes = append(nodes[i].Edges.Dopes, n)
			}
		}
	}

	if query := iq.withHustlerWeapons; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HustlerWeapons = []*Hustler{}
		}
		query.withFKs = true
		query.Where(predicate.Hustler(func(s *sql.Selector) {
			s.Where(sql.InValues(item.HustlerWeaponsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_hustler_weapons
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_hustler_weapons" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_weapons" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HustlerWeapons = append(node.Edges.HustlerWeapons, n)
		}
	}

	if query := iq.withHustlerClothes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HustlerClothes = []*Hustler{}
		}
		query.withFKs = true
		query.Where(predicate.Hustler(func(s *sql.Selector) {
			s.Where(sql.InValues(item.HustlerClothesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_hustler_clothes
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_hustler_clothes" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_clothes" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HustlerClothes = append(node.Edges.HustlerClothes, n)
		}
	}

	if query := iq.withHustlerVehicles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HustlerVehicles = []*Hustler{}
		}
		query.withFKs = true
		query.Where(predicate.Hustler(func(s *sql.Selector) {
			s.Where(sql.InValues(item.HustlerVehiclesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_hustler_vehicles
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_hustler_vehicles" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_vehicles" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HustlerVehicles = append(node.Edges.HustlerVehicles, n)
		}
	}

	if query := iq.withHustlerWaists; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HustlerWaists = []*Hustler{}
		}
		query.withFKs = true
		query.Where(predicate.Hustler(func(s *sql.Selector) {
			s.Where(sql.InValues(item.HustlerWaistsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_hustler_waists
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_hustler_waists" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_waists" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HustlerWaists = append(node.Edges.HustlerWaists, n)
		}
	}

	if query := iq.withHustlerFeet; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HustlerFeet = []*Hustler{}
		}
		query.withFKs = true
		query.Where(predicate.Hustler(func(s *sql.Selector) {
			s.Where(sql.InValues(item.HustlerFeetColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_hustler_feet
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_hustler_feet" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_feet" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HustlerFeet = append(node.Edges.HustlerFeet, n)
		}
	}

	if query := iq.withHustlerHands; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HustlerHands = []*Hustler{}
		}
		query.withFKs = true
		query.Where(predicate.Hustler(func(s *sql.Selector) {
			s.Where(sql.InValues(item.HustlerHandsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_hustler_hands
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_hustler_hands" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_hands" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HustlerHands = append(node.Edges.HustlerHands, n)
		}
	}

	if query := iq.withHustlerDrugs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HustlerDrugs = []*Hustler{}
		}
		query.withFKs = true
		query.Where(predicate.Hustler(func(s *sql.Selector) {
			s.Where(sql.InValues(item.HustlerDrugsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_hustler_drugs
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_hustler_drugs" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_drugs" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HustlerDrugs = append(node.Edges.HustlerDrugs, n)
		}
	}

	if query := iq.withHustlerNecks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HustlerNecks = []*Hustler{}
		}
		query.withFKs = true
		query.Where(predicate.Hustler(func(s *sql.Selector) {
			s.Where(sql.InValues(item.HustlerNecksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_hustler_necks
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_hustler_necks" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_necks" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HustlerNecks = append(node.Edges.HustlerNecks, n)
		}
	}

	if query := iq.withHustlerRings; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HustlerRings = []*Hustler{}
		}
		query.withFKs = true
		query.Where(predicate.Hustler(func(s *sql.Selector) {
			s.Where(sql.InValues(item.HustlerRingsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_hustler_rings
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_hustler_rings" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_rings" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HustlerRings = append(node.Edges.HustlerRings, n)
		}
	}

	if query := iq.withHustlerAccessories; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HustlerAccessories = []*Hustler{}
		}
		query.withFKs = true
		query.Where(predicate.Hustler(func(s *sql.Selector) {
			s.Where(sql.InValues(item.HustlerAccessoriesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_hustler_accessories
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_hustler_accessories" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_accessories" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HustlerAccessories = append(node.Edges.HustlerAccessories, n)
		}
	}

	if query := iq.withBase; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Item)
		for i := range nodes {
			if nodes[i].item_derivative == nil {
				continue
			}
			fk := *nodes[i].item_derivative
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_derivative" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Base = n
			}
		}
	}

	if query := iq.withDerivative; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Derivative = []*Item{}
		}
		query.withFKs = true
		query.Where(predicate.Item(func(s *sql.Selector) {
			s.Where(sql.InValues(item.DerivativeColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_derivative
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_derivative" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_derivative" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Derivative = append(node.Edges.Derivative, n)
		}
	}

	if query := iq.withIndex; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Item)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Search(func(s *sql.Selector) {
			s.Where(sql.InValues(item.IndexColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.item_index
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "item_index" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_index" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Index = n
		}
	}

	return nodes, nil
}

func (iq *ItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iq.querySpec()
	_spec.Node.Columns = iq.fields
	if len(iq.fields) > 0 {
		_spec.Unique = iq.unique != nil && *iq.unique
	}
	return sqlgraph.CountNodes(ctx, iq.driver, _spec)
}

func (iq *ItemQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := iq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (iq *ItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: item.FieldID,
			},
		},
		From:   iq.sql,
		Unique: true,
	}
	if unique := iq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := iq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, item.FieldID)
		for i := range fields {
			if fields[i] != item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iq *ItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iq.driver.Dialect())
	t1 := builder.Table(item.Table)
	columns := iq.fields
	if len(columns) == 0 {
		columns = item.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iq.sql != nil {
		selector = iq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iq.unique != nil && *iq.unique {
		selector.Distinct()
	}
	for _, p := range iq.predicates {
		p(selector)
	}
	for _, p := range iq.order {
		p(selector)
	}
	if offset := iq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ItemGroupBy is the group-by builder for Item entities.
type ItemGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (igb *ItemGroupBy) Aggregate(fns ...AggregateFunc) *ItemGroupBy {
	igb.fns = append(igb.fns, fns...)
	return igb
}

// Scan applies the group-by query and scans the result into the given value.
func (igb *ItemGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := igb.path(ctx)
	if err != nil {
		return err
	}
	igb.sql = query
	return igb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (igb *ItemGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := igb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (igb *ItemGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(igb.fields) > 1 {
		return nil, errors.New("ent: ItemGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := igb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (igb *ItemGroupBy) StringsX(ctx context.Context) []string {
	v, err := igb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (igb *ItemGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = igb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{item.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (igb *ItemGroupBy) StringX(ctx context.Context) string {
	v, err := igb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (igb *ItemGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(igb.fields) > 1 {
		return nil, errors.New("ent: ItemGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := igb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (igb *ItemGroupBy) IntsX(ctx context.Context) []int {
	v, err := igb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (igb *ItemGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = igb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{item.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (igb *ItemGroupBy) IntX(ctx context.Context) int {
	v, err := igb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (igb *ItemGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(igb.fields) > 1 {
		return nil, errors.New("ent: ItemGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := igb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (igb *ItemGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := igb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (igb *ItemGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = igb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{item.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (igb *ItemGroupBy) Float64X(ctx context.Context) float64 {
	v, err := igb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (igb *ItemGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(igb.fields) > 1 {
		return nil, errors.New("ent: ItemGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := igb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (igb *ItemGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := igb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (igb *ItemGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = igb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{item.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (igb *ItemGroupBy) BoolX(ctx context.Context) bool {
	v, err := igb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (igb *ItemGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range igb.fields {
		if !item.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := igb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := igb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (igb *ItemGroupBy) sqlQuery() *sql.Selector {
	selector := igb.sql.Select()
	aggregation := make([]string, 0, len(igb.fns))
	for _, fn := range igb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(igb.fields)+len(igb.fns))
		for _, f := range igb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(igb.fields...)...)
}

// ItemSelect is the builder for selecting fields of Item entities.
type ItemSelect struct {
	*ItemQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (is *ItemSelect) Scan(ctx context.Context, v interface{}) error {
	if err := is.prepareQuery(ctx); err != nil {
		return err
	}
	is.sql = is.ItemQuery.sqlQuery(ctx)
	return is.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (is *ItemSelect) ScanX(ctx context.Context, v interface{}) {
	if err := is.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (is *ItemSelect) Strings(ctx context.Context) ([]string, error) {
	if len(is.fields) > 1 {
		return nil, errors.New("ent: ItemSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := is.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (is *ItemSelect) StringsX(ctx context.Context) []string {
	v, err := is.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (is *ItemSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = is.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{item.Label}
	default:
		err = fmt.Errorf("ent: ItemSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (is *ItemSelect) StringX(ctx context.Context) string {
	v, err := is.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (is *ItemSelect) Ints(ctx context.Context) ([]int, error) {
	if len(is.fields) > 1 {
		return nil, errors.New("ent: ItemSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := is.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (is *ItemSelect) IntsX(ctx context.Context) []int {
	v, err := is.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (is *ItemSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = is.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{item.Label}
	default:
		err = fmt.Errorf("ent: ItemSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (is *ItemSelect) IntX(ctx context.Context) int {
	v, err := is.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (is *ItemSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(is.fields) > 1 {
		return nil, errors.New("ent: ItemSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := is.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (is *ItemSelect) Float64sX(ctx context.Context) []float64 {
	v, err := is.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (is *ItemSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = is.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{item.Label}
	default:
		err = fmt.Errorf("ent: ItemSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (is *ItemSelect) Float64X(ctx context.Context) float64 {
	v, err := is.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (is *ItemSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(is.fields) > 1 {
		return nil, errors.New("ent: ItemSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := is.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (is *ItemSelect) BoolsX(ctx context.Context) []bool {
	v, err := is.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (is *ItemSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = is.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{item.Label}
	default:
		err = fmt.Errorf("ent: ItemSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (is *ItemSelect) BoolX(ctx context.Context) bool {
	v, err := is.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (is *ItemSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := is.sql.Query()
	if err := is.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
