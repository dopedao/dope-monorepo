// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustlerrelation"
)

// GameHustlerRelationCreate is the builder for creating a GameHustlerRelation entity.
type GameHustlerRelationCreate struct {
	config
	mutation *GameHustlerRelationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCitizen sets the "citizen" field.
func (ghrc *GameHustlerRelationCreate) SetCitizen(s string) *GameHustlerRelationCreate {
	ghrc.mutation.SetCitizen(s)
	return ghrc
}

// SetConversation sets the "conversation" field.
func (ghrc *GameHustlerRelationCreate) SetConversation(s string) *GameHustlerRelationCreate {
	ghrc.mutation.SetConversation(s)
	return ghrc
}

// SetText sets the "text" field.
func (ghrc *GameHustlerRelationCreate) SetText(u uint) *GameHustlerRelationCreate {
	ghrc.mutation.SetText(u)
	return ghrc
}

// SetID sets the "id" field.
func (ghrc *GameHustlerRelationCreate) SetID(s string) *GameHustlerRelationCreate {
	ghrc.mutation.SetID(s)
	return ghrc
}

// SetHustlerID sets the "hustler" edge to the GameHustler entity by ID.
func (ghrc *GameHustlerRelationCreate) SetHustlerID(id string) *GameHustlerRelationCreate {
	ghrc.mutation.SetHustlerID(id)
	return ghrc
}

// SetNillableHustlerID sets the "hustler" edge to the GameHustler entity by ID if the given value is not nil.
func (ghrc *GameHustlerRelationCreate) SetNillableHustlerID(id *string) *GameHustlerRelationCreate {
	if id != nil {
		ghrc = ghrc.SetHustlerID(*id)
	}
	return ghrc
}

// SetHustler sets the "hustler" edge to the GameHustler entity.
func (ghrc *GameHustlerRelationCreate) SetHustler(g *GameHustler) *GameHustlerRelationCreate {
	return ghrc.SetHustlerID(g.ID)
}

// Mutation returns the GameHustlerRelationMutation object of the builder.
func (ghrc *GameHustlerRelationCreate) Mutation() *GameHustlerRelationMutation {
	return ghrc.mutation
}

// Save creates the GameHustlerRelation in the database.
func (ghrc *GameHustlerRelationCreate) Save(ctx context.Context) (*GameHustlerRelation, error) {
	var (
		err  error
		node *GameHustlerRelation
	)
	if len(ghrc.hooks) == 0 {
		if err = ghrc.check(); err != nil {
			return nil, err
		}
		node, err = ghrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameHustlerRelationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ghrc.check(); err != nil {
				return nil, err
			}
			ghrc.mutation = mutation
			if node, err = ghrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ghrc.hooks) - 1; i >= 0; i-- {
			if ghrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ghrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ghrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ghrc *GameHustlerRelationCreate) SaveX(ctx context.Context) *GameHustlerRelation {
	v, err := ghrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ghrc *GameHustlerRelationCreate) Exec(ctx context.Context) error {
	_, err := ghrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghrc *GameHustlerRelationCreate) ExecX(ctx context.Context) {
	if err := ghrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ghrc *GameHustlerRelationCreate) check() error {
	if _, ok := ghrc.mutation.Citizen(); !ok {
		return &ValidationError{Name: "citizen", err: errors.New(`ent: missing required field "GameHustlerRelation.citizen"`)}
	}
	if _, ok := ghrc.mutation.Conversation(); !ok {
		return &ValidationError{Name: "conversation", err: errors.New(`ent: missing required field "GameHustlerRelation.conversation"`)}
	}
	if _, ok := ghrc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "GameHustlerRelation.text"`)}
	}
	return nil
}

func (ghrc *GameHustlerRelationCreate) sqlSave(ctx context.Context) (*GameHustlerRelation, error) {
	_node, _spec := ghrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ghrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GameHustlerRelation.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (ghrc *GameHustlerRelationCreate) createSpec() (*GameHustlerRelation, *sqlgraph.CreateSpec) {
	var (
		_node = &GameHustlerRelation{config: ghrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: gamehustlerrelation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: gamehustlerrelation.FieldID,
			},
		}
	)
	_spec.OnConflict = ghrc.conflict
	if id, ok := ghrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ghrc.mutation.Citizen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gamehustlerrelation.FieldCitizen,
		})
		_node.Citizen = value
	}
	if value, ok := ghrc.mutation.Conversation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gamehustlerrelation.FieldConversation,
		})
		_node.Conversation = value
	}
	if value, ok := ghrc.mutation.Text(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: gamehustlerrelation.FieldText,
		})
		_node.Text = value
	}
	if nodes := ghrc.mutation.HustlerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehustlerrelation.HustlerTable,
			Columns: []string{gamehustlerrelation.HustlerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gamehustler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_hustler_relations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameHustlerRelation.Create().
//		SetCitizen(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameHustlerRelationUpsert) {
//			SetCitizen(v+v).
//		}).
//		Exec(ctx)
//
func (ghrc *GameHustlerRelationCreate) OnConflict(opts ...sql.ConflictOption) *GameHustlerRelationUpsertOne {
	ghrc.conflict = opts
	return &GameHustlerRelationUpsertOne{
		create: ghrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameHustlerRelation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ghrc *GameHustlerRelationCreate) OnConflictColumns(columns ...string) *GameHustlerRelationUpsertOne {
	ghrc.conflict = append(ghrc.conflict, sql.ConflictColumns(columns...))
	return &GameHustlerRelationUpsertOne{
		create: ghrc,
	}
}

type (
	// GameHustlerRelationUpsertOne is the builder for "upsert"-ing
	//  one GameHustlerRelation node.
	GameHustlerRelationUpsertOne struct {
		create *GameHustlerRelationCreate
	}

	// GameHustlerRelationUpsert is the "OnConflict" setter.
	GameHustlerRelationUpsert struct {
		*sql.UpdateSet
	}
)

// SetCitizen sets the "citizen" field.
func (u *GameHustlerRelationUpsert) SetCitizen(v string) *GameHustlerRelationUpsert {
	u.Set(gamehustlerrelation.FieldCitizen, v)
	return u
}

// UpdateCitizen sets the "citizen" field to the value that was provided on create.
func (u *GameHustlerRelationUpsert) UpdateCitizen() *GameHustlerRelationUpsert {
	u.SetExcluded(gamehustlerrelation.FieldCitizen)
	return u
}

// SetConversation sets the "conversation" field.
func (u *GameHustlerRelationUpsert) SetConversation(v string) *GameHustlerRelationUpsert {
	u.Set(gamehustlerrelation.FieldConversation, v)
	return u
}

// UpdateConversation sets the "conversation" field to the value that was provided on create.
func (u *GameHustlerRelationUpsert) UpdateConversation() *GameHustlerRelationUpsert {
	u.SetExcluded(gamehustlerrelation.FieldConversation)
	return u
}

// SetText sets the "text" field.
func (u *GameHustlerRelationUpsert) SetText(v uint) *GameHustlerRelationUpsert {
	u.Set(gamehustlerrelation.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *GameHustlerRelationUpsert) UpdateText() *GameHustlerRelationUpsert {
	u.SetExcluded(gamehustlerrelation.FieldText)
	return u
}

// AddText adds v to the "text" field.
func (u *GameHustlerRelationUpsert) AddText(v uint) *GameHustlerRelationUpsert {
	u.Add(gamehustlerrelation.FieldText, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GameHustlerRelation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gamehustlerrelation.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GameHustlerRelationUpsertOne) UpdateNewValues() *GameHustlerRelationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(gamehustlerrelation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GameHustlerRelation.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GameHustlerRelationUpsertOne) Ignore() *GameHustlerRelationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameHustlerRelationUpsertOne) DoNothing() *GameHustlerRelationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameHustlerRelationCreate.OnConflict
// documentation for more info.
func (u *GameHustlerRelationUpsertOne) Update(set func(*GameHustlerRelationUpsert)) *GameHustlerRelationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameHustlerRelationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCitizen sets the "citizen" field.
func (u *GameHustlerRelationUpsertOne) SetCitizen(v string) *GameHustlerRelationUpsertOne {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.SetCitizen(v)
	})
}

// UpdateCitizen sets the "citizen" field to the value that was provided on create.
func (u *GameHustlerRelationUpsertOne) UpdateCitizen() *GameHustlerRelationUpsertOne {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.UpdateCitizen()
	})
}

// SetConversation sets the "conversation" field.
func (u *GameHustlerRelationUpsertOne) SetConversation(v string) *GameHustlerRelationUpsertOne {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.SetConversation(v)
	})
}

// UpdateConversation sets the "conversation" field to the value that was provided on create.
func (u *GameHustlerRelationUpsertOne) UpdateConversation() *GameHustlerRelationUpsertOne {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.UpdateConversation()
	})
}

// SetText sets the "text" field.
func (u *GameHustlerRelationUpsertOne) SetText(v uint) *GameHustlerRelationUpsertOne {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.SetText(v)
	})
}

// AddText adds v to the "text" field.
func (u *GameHustlerRelationUpsertOne) AddText(v uint) *GameHustlerRelationUpsertOne {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.AddText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *GameHustlerRelationUpsertOne) UpdateText() *GameHustlerRelationUpsertOne {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.UpdateText()
	})
}

// Exec executes the query.
func (u *GameHustlerRelationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GameHustlerRelationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameHustlerRelationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GameHustlerRelationUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GameHustlerRelationUpsertOne.ID is not supported by MySQL driver. Use GameHustlerRelationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GameHustlerRelationUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GameHustlerRelationCreateBulk is the builder for creating many GameHustlerRelation entities in bulk.
type GameHustlerRelationCreateBulk struct {
	config
	builders []*GameHustlerRelationCreate
	conflict []sql.ConflictOption
}

// Save creates the GameHustlerRelation entities in the database.
func (ghrcb *GameHustlerRelationCreateBulk) Save(ctx context.Context) ([]*GameHustlerRelation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ghrcb.builders))
	nodes := make([]*GameHustlerRelation, len(ghrcb.builders))
	mutators := make([]Mutator, len(ghrcb.builders))
	for i := range ghrcb.builders {
		func(i int, root context.Context) {
			builder := ghrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameHustlerRelationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ghrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ghrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ghrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ghrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ghrcb *GameHustlerRelationCreateBulk) SaveX(ctx context.Context) []*GameHustlerRelation {
	v, err := ghrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ghrcb *GameHustlerRelationCreateBulk) Exec(ctx context.Context) error {
	_, err := ghrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghrcb *GameHustlerRelationCreateBulk) ExecX(ctx context.Context) {
	if err := ghrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameHustlerRelation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameHustlerRelationUpsert) {
//			SetCitizen(v+v).
//		}).
//		Exec(ctx)
//
func (ghrcb *GameHustlerRelationCreateBulk) OnConflict(opts ...sql.ConflictOption) *GameHustlerRelationUpsertBulk {
	ghrcb.conflict = opts
	return &GameHustlerRelationUpsertBulk{
		create: ghrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameHustlerRelation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ghrcb *GameHustlerRelationCreateBulk) OnConflictColumns(columns ...string) *GameHustlerRelationUpsertBulk {
	ghrcb.conflict = append(ghrcb.conflict, sql.ConflictColumns(columns...))
	return &GameHustlerRelationUpsertBulk{
		create: ghrcb,
	}
}

// GameHustlerRelationUpsertBulk is the builder for "upsert"-ing
// a bulk of GameHustlerRelation nodes.
type GameHustlerRelationUpsertBulk struct {
	create *GameHustlerRelationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GameHustlerRelation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gamehustlerrelation.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GameHustlerRelationUpsertBulk) UpdateNewValues() *GameHustlerRelationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(gamehustlerrelation.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GameHustlerRelation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GameHustlerRelationUpsertBulk) Ignore() *GameHustlerRelationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameHustlerRelationUpsertBulk) DoNothing() *GameHustlerRelationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameHustlerRelationCreateBulk.OnConflict
// documentation for more info.
func (u *GameHustlerRelationUpsertBulk) Update(set func(*GameHustlerRelationUpsert)) *GameHustlerRelationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameHustlerRelationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCitizen sets the "citizen" field.
func (u *GameHustlerRelationUpsertBulk) SetCitizen(v string) *GameHustlerRelationUpsertBulk {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.SetCitizen(v)
	})
}

// UpdateCitizen sets the "citizen" field to the value that was provided on create.
func (u *GameHustlerRelationUpsertBulk) UpdateCitizen() *GameHustlerRelationUpsertBulk {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.UpdateCitizen()
	})
}

// SetConversation sets the "conversation" field.
func (u *GameHustlerRelationUpsertBulk) SetConversation(v string) *GameHustlerRelationUpsertBulk {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.SetConversation(v)
	})
}

// UpdateConversation sets the "conversation" field to the value that was provided on create.
func (u *GameHustlerRelationUpsertBulk) UpdateConversation() *GameHustlerRelationUpsertBulk {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.UpdateConversation()
	})
}

// SetText sets the "text" field.
func (u *GameHustlerRelationUpsertBulk) SetText(v uint) *GameHustlerRelationUpsertBulk {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.SetText(v)
	})
}

// AddText adds v to the "text" field.
func (u *GameHustlerRelationUpsertBulk) AddText(v uint) *GameHustlerRelationUpsertBulk {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.AddText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *GameHustlerRelationUpsertBulk) UpdateText() *GameHustlerRelationUpsertBulk {
	return u.Update(func(s *GameHustlerRelationUpsert) {
		s.UpdateText()
	})
}

// Exec executes the query.
func (u *GameHustlerRelationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GameHustlerRelationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GameHustlerRelationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameHustlerRelationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
