// Code generated by entc, DO NOT EDIT.

package listing

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v Source) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v Source) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSource), v))
	})
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...Source) predicate.Listing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Listing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSource), v...))
	})
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...Source) predicate.Listing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Listing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSource), v...))
	})
}

// OrderIsNil applies the IsNil predicate on the "order" field.
func OrderIsNil() predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrder)))
	})
}

// OrderNotNil applies the NotNil predicate on the "order" field.
func OrderNotNil() predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrder)))
	})
}

// HasDope applies the HasEdge predicate on the "dope" edge.
func HasDope() predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DopeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DopeTable, DopeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDopeWith applies the HasEdge predicate on the "dope" edge with a given conditions (other predicates).
func HasDopeWith(preds ...predicate.Dope) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DopeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DopeTable, DopeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDopeLastsales applies the HasEdge predicate on the "dope_lastsales" edge.
func HasDopeLastsales() predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DopeLastsalesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DopeLastsalesTable, DopeLastsalesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDopeLastsalesWith applies the HasEdge predicate on the "dope_lastsales" edge with a given conditions (other predicates).
func HasDopeLastsalesWith(preds ...predicate.Dope) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DopeLastsalesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DopeLastsalesTable, DopeLastsalesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInputs applies the HasEdge predicate on the "inputs" edge.
func HasInputs() predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InputsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InputsTable, InputsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInputsWith applies the HasEdge predicate on the "inputs" edge with a given conditions (other predicates).
func HasInputsWith(preds ...predicate.Amount) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InputsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InputsTable, InputsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutputs applies the HasEdge predicate on the "outputs" edge.
func HasOutputs() predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OutputsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OutputsTable, OutputsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutputsWith applies the HasEdge predicate on the "outputs" edge with a given conditions (other predicates).
func HasOutputsWith(preds ...predicate.Amount) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OutputsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OutputsTable, OutputsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Listing) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Listing) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Listing) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		p(s.Not())
	})
}
