// Code generated by entc, DO NOT EDIT.

package gamehustlerrelation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Citizen applies equality check predicate on the "citizen" field. It's identical to CitizenEQ.
func Citizen(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCitizen), v))
	})
}

// Conversation applies equality check predicate on the "conversation" field. It's identical to ConversationEQ.
func Conversation(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConversation), v))
	})
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v uint) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldText), v))
	})
}

// CitizenEQ applies the EQ predicate on the "citizen" field.
func CitizenEQ(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCitizen), v))
	})
}

// CitizenNEQ applies the NEQ predicate on the "citizen" field.
func CitizenNEQ(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCitizen), v))
	})
}

// CitizenIn applies the In predicate on the "citizen" field.
func CitizenIn(vs ...string) predicate.GameHustlerRelation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCitizen), v...))
	})
}

// CitizenNotIn applies the NotIn predicate on the "citizen" field.
func CitizenNotIn(vs ...string) predicate.GameHustlerRelation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCitizen), v...))
	})
}

// CitizenGT applies the GT predicate on the "citizen" field.
func CitizenGT(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCitizen), v))
	})
}

// CitizenGTE applies the GTE predicate on the "citizen" field.
func CitizenGTE(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCitizen), v))
	})
}

// CitizenLT applies the LT predicate on the "citizen" field.
func CitizenLT(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCitizen), v))
	})
}

// CitizenLTE applies the LTE predicate on the "citizen" field.
func CitizenLTE(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCitizen), v))
	})
}

// CitizenContains applies the Contains predicate on the "citizen" field.
func CitizenContains(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCitizen), v))
	})
}

// CitizenHasPrefix applies the HasPrefix predicate on the "citizen" field.
func CitizenHasPrefix(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCitizen), v))
	})
}

// CitizenHasSuffix applies the HasSuffix predicate on the "citizen" field.
func CitizenHasSuffix(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCitizen), v))
	})
}

// CitizenEqualFold applies the EqualFold predicate on the "citizen" field.
func CitizenEqualFold(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCitizen), v))
	})
}

// CitizenContainsFold applies the ContainsFold predicate on the "citizen" field.
func CitizenContainsFold(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCitizen), v))
	})
}

// ConversationEQ applies the EQ predicate on the "conversation" field.
func ConversationEQ(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConversation), v))
	})
}

// ConversationNEQ applies the NEQ predicate on the "conversation" field.
func ConversationNEQ(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConversation), v))
	})
}

// ConversationIn applies the In predicate on the "conversation" field.
func ConversationIn(vs ...string) predicate.GameHustlerRelation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConversation), v...))
	})
}

// ConversationNotIn applies the NotIn predicate on the "conversation" field.
func ConversationNotIn(vs ...string) predicate.GameHustlerRelation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConversation), v...))
	})
}

// ConversationGT applies the GT predicate on the "conversation" field.
func ConversationGT(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConversation), v))
	})
}

// ConversationGTE applies the GTE predicate on the "conversation" field.
func ConversationGTE(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConversation), v))
	})
}

// ConversationLT applies the LT predicate on the "conversation" field.
func ConversationLT(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConversation), v))
	})
}

// ConversationLTE applies the LTE predicate on the "conversation" field.
func ConversationLTE(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConversation), v))
	})
}

// ConversationContains applies the Contains predicate on the "conversation" field.
func ConversationContains(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConversation), v))
	})
}

// ConversationHasPrefix applies the HasPrefix predicate on the "conversation" field.
func ConversationHasPrefix(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConversation), v))
	})
}

// ConversationHasSuffix applies the HasSuffix predicate on the "conversation" field.
func ConversationHasSuffix(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConversation), v))
	})
}

// ConversationEqualFold applies the EqualFold predicate on the "conversation" field.
func ConversationEqualFold(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConversation), v))
	})
}

// ConversationContainsFold applies the ContainsFold predicate on the "conversation" field.
func ConversationContainsFold(v string) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConversation), v))
	})
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v uint) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldText), v))
	})
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v uint) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldText), v))
	})
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...uint) predicate.GameHustlerRelation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldText), v...))
	})
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...uint) predicate.GameHustlerRelation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldText), v...))
	})
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v uint) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldText), v))
	})
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v uint) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldText), v))
	})
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v uint) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldText), v))
	})
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v uint) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldText), v))
	})
}

// HasHustler applies the HasEdge predicate on the "hustler" edge.
func HasHustler() predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HustlerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HustlerTable, HustlerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerWith applies the HasEdge predicate on the "hustler" edge with a given conditions (other predicates).
func HasHustlerWith(preds ...predicate.GameHustler) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HustlerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HustlerTable, HustlerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GameHustlerRelation) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GameHustlerRelation) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GameHustlerRelation) predicate.GameHustlerRelation {
	return predicate.GameHustlerRelation(func(s *sql.Selector) {
		p(s.Not())
	})
}
