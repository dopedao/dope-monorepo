// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/ent/bodypart"
	"github.com/dopedao/dope-monorepo/packages/api/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/ent/search"
	"github.com/dopedao/dope-monorepo/packages/api/ent/wallet"
)

// HustlerQuery is the builder for querying Hustler entities.
type HustlerQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Hustler
	// eager-loading edges.
	withWallet    *WalletQuery
	withWeapon    *ItemQuery
	withClothes   *ItemQuery
	withVehicle   *ItemQuery
	withWaist     *ItemQuery
	withFoot      *ItemQuery
	withHand      *ItemQuery
	withDrug      *ItemQuery
	withNeck      *ItemQuery
	withRing      *ItemQuery
	withAccessory *ItemQuery
	withBody      *BodyPartQuery
	withHair      *BodyPartQuery
	withBeard     *BodyPartQuery
	withIndex     *SearchQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HustlerQuery builder.
func (hq *HustlerQuery) Where(ps ...predicate.Hustler) *HustlerQuery {
	hq.predicates = append(hq.predicates, ps...)
	return hq
}

// Limit adds a limit step to the query.
func (hq *HustlerQuery) Limit(limit int) *HustlerQuery {
	hq.limit = &limit
	return hq
}

// Offset adds an offset step to the query.
func (hq *HustlerQuery) Offset(offset int) *HustlerQuery {
	hq.offset = &offset
	return hq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hq *HustlerQuery) Unique(unique bool) *HustlerQuery {
	hq.unique = &unique
	return hq
}

// Order adds an order step to the query.
func (hq *HustlerQuery) Order(o ...OrderFunc) *HustlerQuery {
	hq.order = append(hq.order, o...)
	return hq
}

// QueryWallet chains the current query on the "wallet" edge.
func (hq *HustlerQuery) QueryWallet() *WalletQuery {
	query := &WalletQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(wallet.Table, wallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.WalletTable, hustler.WalletColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWeapon chains the current query on the "weapon" edge.
func (hq *HustlerQuery) QueryWeapon() *ItemQuery {
	query := &ItemQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.WeaponTable, hustler.WeaponColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClothes chains the current query on the "clothes" edge.
func (hq *HustlerQuery) QueryClothes() *ItemQuery {
	query := &ItemQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.ClothesTable, hustler.ClothesColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVehicle chains the current query on the "vehicle" edge.
func (hq *HustlerQuery) QueryVehicle() *ItemQuery {
	query := &ItemQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.VehicleTable, hustler.VehicleColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWaist chains the current query on the "waist" edge.
func (hq *HustlerQuery) QueryWaist() *ItemQuery {
	query := &ItemQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.WaistTable, hustler.WaistColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFoot chains the current query on the "foot" edge.
func (hq *HustlerQuery) QueryFoot() *ItemQuery {
	query := &ItemQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.FootTable, hustler.FootColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHand chains the current query on the "hand" edge.
func (hq *HustlerQuery) QueryHand() *ItemQuery {
	query := &ItemQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.HandTable, hustler.HandColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDrug chains the current query on the "drug" edge.
func (hq *HustlerQuery) QueryDrug() *ItemQuery {
	query := &ItemQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.DrugTable, hustler.DrugColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNeck chains the current query on the "neck" edge.
func (hq *HustlerQuery) QueryNeck() *ItemQuery {
	query := &ItemQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.NeckTable, hustler.NeckColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRing chains the current query on the "ring" edge.
func (hq *HustlerQuery) QueryRing() *ItemQuery {
	query := &ItemQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.RingTable, hustler.RingColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccessory chains the current query on the "accessory" edge.
func (hq *HustlerQuery) QueryAccessory() *ItemQuery {
	query := &ItemQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.AccessoryTable, hustler.AccessoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBody chains the current query on the "body" edge.
func (hq *HustlerQuery) QueryBody() *BodyPartQuery {
	query := &BodyPartQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(bodypart.Table, bodypart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.BodyTable, hustler.BodyColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHair chains the current query on the "hair" edge.
func (hq *HustlerQuery) QueryHair() *BodyPartQuery {
	query := &BodyPartQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(bodypart.Table, bodypart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.HairTable, hustler.HairColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBeard chains the current query on the "beard" edge.
func (hq *HustlerQuery) QueryBeard() *BodyPartQuery {
	query := &BodyPartQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(bodypart.Table, bodypart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.BeardTable, hustler.BeardColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIndex chains the current query on the "index" edge.
func (hq *HustlerQuery) QueryIndex() *SearchQuery {
	query := &SearchQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(search.Table, search.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, hustler.IndexTable, hustler.IndexColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Hustler entity from the query.
// Returns a *NotFoundError when no Hustler was found.
func (hq *HustlerQuery) First(ctx context.Context) (*Hustler, error) {
	nodes, err := hq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hustler.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hq *HustlerQuery) FirstX(ctx context.Context) *Hustler {
	node, err := hq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Hustler ID from the query.
// Returns a *NotFoundError when no Hustler ID was found.
func (hq *HustlerQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = hq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hustler.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hq *HustlerQuery) FirstIDX(ctx context.Context) string {
	id, err := hq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Hustler entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Hustler entity is not found.
// Returns a *NotFoundError when no Hustler entities are found.
func (hq *HustlerQuery) Only(ctx context.Context) (*Hustler, error) {
	nodes, err := hq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hustler.Label}
	default:
		return nil, &NotSingularError{hustler.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hq *HustlerQuery) OnlyX(ctx context.Context) *Hustler {
	node, err := hq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Hustler ID in the query.
// Returns a *NotSingularError when exactly one Hustler ID is not found.
// Returns a *NotFoundError when no entities are found.
func (hq *HustlerQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = hq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hustler.Label}
	default:
		err = &NotSingularError{hustler.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hq *HustlerQuery) OnlyIDX(ctx context.Context) string {
	id, err := hq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Hustlers.
func (hq *HustlerQuery) All(ctx context.Context) ([]*Hustler, error) {
	if err := hq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return hq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (hq *HustlerQuery) AllX(ctx context.Context) []*Hustler {
	nodes, err := hq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Hustler IDs.
func (hq *HustlerQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := hq.Select(hustler.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hq *HustlerQuery) IDsX(ctx context.Context) []string {
	ids, err := hq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hq *HustlerQuery) Count(ctx context.Context) (int, error) {
	if err := hq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return hq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (hq *HustlerQuery) CountX(ctx context.Context) int {
	count, err := hq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hq *HustlerQuery) Exist(ctx context.Context) (bool, error) {
	if err := hq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return hq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (hq *HustlerQuery) ExistX(ctx context.Context) bool {
	exist, err := hq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HustlerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hq *HustlerQuery) Clone() *HustlerQuery {
	if hq == nil {
		return nil
	}
	return &HustlerQuery{
		config:        hq.config,
		limit:         hq.limit,
		offset:        hq.offset,
		order:         append([]OrderFunc{}, hq.order...),
		predicates:    append([]predicate.Hustler{}, hq.predicates...),
		withWallet:    hq.withWallet.Clone(),
		withWeapon:    hq.withWeapon.Clone(),
		withClothes:   hq.withClothes.Clone(),
		withVehicle:   hq.withVehicle.Clone(),
		withWaist:     hq.withWaist.Clone(),
		withFoot:      hq.withFoot.Clone(),
		withHand:      hq.withHand.Clone(),
		withDrug:      hq.withDrug.Clone(),
		withNeck:      hq.withNeck.Clone(),
		withRing:      hq.withRing.Clone(),
		withAccessory: hq.withAccessory.Clone(),
		withBody:      hq.withBody.Clone(),
		withHair:      hq.withHair.Clone(),
		withBeard:     hq.withBeard.Clone(),
		withIndex:     hq.withIndex.Clone(),
		// clone intermediate query.
		sql:  hq.sql.Clone(),
		path: hq.path,
	}
}

// WithWallet tells the query-builder to eager-load the nodes that are connected to
// the "wallet" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithWallet(opts ...func(*WalletQuery)) *HustlerQuery {
	query := &WalletQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withWallet = query
	return hq
}

// WithWeapon tells the query-builder to eager-load the nodes that are connected to
// the "weapon" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithWeapon(opts ...func(*ItemQuery)) *HustlerQuery {
	query := &ItemQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withWeapon = query
	return hq
}

// WithClothes tells the query-builder to eager-load the nodes that are connected to
// the "clothes" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithClothes(opts ...func(*ItemQuery)) *HustlerQuery {
	query := &ItemQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withClothes = query
	return hq
}

// WithVehicle tells the query-builder to eager-load the nodes that are connected to
// the "vehicle" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithVehicle(opts ...func(*ItemQuery)) *HustlerQuery {
	query := &ItemQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withVehicle = query
	return hq
}

// WithWaist tells the query-builder to eager-load the nodes that are connected to
// the "waist" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithWaist(opts ...func(*ItemQuery)) *HustlerQuery {
	query := &ItemQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withWaist = query
	return hq
}

// WithFoot tells the query-builder to eager-load the nodes that are connected to
// the "foot" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithFoot(opts ...func(*ItemQuery)) *HustlerQuery {
	query := &ItemQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withFoot = query
	return hq
}

// WithHand tells the query-builder to eager-load the nodes that are connected to
// the "hand" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithHand(opts ...func(*ItemQuery)) *HustlerQuery {
	query := &ItemQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withHand = query
	return hq
}

// WithDrug tells the query-builder to eager-load the nodes that are connected to
// the "drug" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithDrug(opts ...func(*ItemQuery)) *HustlerQuery {
	query := &ItemQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withDrug = query
	return hq
}

// WithNeck tells the query-builder to eager-load the nodes that are connected to
// the "neck" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithNeck(opts ...func(*ItemQuery)) *HustlerQuery {
	query := &ItemQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withNeck = query
	return hq
}

// WithRing tells the query-builder to eager-load the nodes that are connected to
// the "ring" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithRing(opts ...func(*ItemQuery)) *HustlerQuery {
	query := &ItemQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withRing = query
	return hq
}

// WithAccessory tells the query-builder to eager-load the nodes that are connected to
// the "accessory" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithAccessory(opts ...func(*ItemQuery)) *HustlerQuery {
	query := &ItemQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withAccessory = query
	return hq
}

// WithBody tells the query-builder to eager-load the nodes that are connected to
// the "body" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithBody(opts ...func(*BodyPartQuery)) *HustlerQuery {
	query := &BodyPartQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withBody = query
	return hq
}

// WithHair tells the query-builder to eager-load the nodes that are connected to
// the "hair" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithHair(opts ...func(*BodyPartQuery)) *HustlerQuery {
	query := &BodyPartQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withHair = query
	return hq
}

// WithBeard tells the query-builder to eager-load the nodes that are connected to
// the "beard" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithBeard(opts ...func(*BodyPartQuery)) *HustlerQuery {
	query := &BodyPartQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withBeard = query
	return hq
}

// WithIndex tells the query-builder to eager-load the nodes that are connected to
// the "index" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithIndex(opts ...func(*SearchQuery)) *HustlerQuery {
	query := &SearchQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withIndex = query
	return hq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type hustler.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Hustler.Query().
//		GroupBy(hustler.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (hq *HustlerQuery) GroupBy(field string, fields ...string) *HustlerGroupBy {
	group := &HustlerGroupBy{config: hq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return hq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type hustler.Type `json:"type,omitempty"`
//	}
//
//	client.Hustler.Query().
//		Select(hustler.FieldType).
//		Scan(ctx, &v)
//
func (hq *HustlerQuery) Select(fields ...string) *HustlerSelect {
	hq.fields = append(hq.fields, fields...)
	return &HustlerSelect{HustlerQuery: hq}
}

func (hq *HustlerQuery) prepareQuery(ctx context.Context) error {
	for _, f := range hq.fields {
		if !hustler.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hq.path != nil {
		prev, err := hq.path(ctx)
		if err != nil {
			return err
		}
		hq.sql = prev
	}
	return nil
}

func (hq *HustlerQuery) sqlAll(ctx context.Context) ([]*Hustler, error) {
	var (
		nodes       = []*Hustler{}
		withFKs     = hq.withFKs
		_spec       = hq.querySpec()
		loadedTypes = [15]bool{
			hq.withWallet != nil,
			hq.withWeapon != nil,
			hq.withClothes != nil,
			hq.withVehicle != nil,
			hq.withWaist != nil,
			hq.withFoot != nil,
			hq.withHand != nil,
			hq.withDrug != nil,
			hq.withNeck != nil,
			hq.withRing != nil,
			hq.withAccessory != nil,
			hq.withBody != nil,
			hq.withHair != nil,
			hq.withBeard != nil,
			hq.withIndex != nil,
		}
	)
	if hq.withWallet != nil || hq.withWeapon != nil || hq.withClothes != nil || hq.withVehicle != nil || hq.withWaist != nil || hq.withFoot != nil || hq.withHand != nil || hq.withDrug != nil || hq.withNeck != nil || hq.withRing != nil || hq.withAccessory != nil || hq.withBody != nil || hq.withHair != nil || hq.withBeard != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hustler.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Hustler{config: hq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, hq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := hq.withWallet; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].wallet_hustlers == nil {
				continue
			}
			fk := *nodes[i].wallet_hustlers
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(wallet.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "wallet_hustlers" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Wallet = n
			}
		}
	}

	if query := hq.withWeapon; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].item_hustler_weapons == nil {
				continue
			}
			fk := *nodes[i].item_hustler_weapons
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_weapons" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Weapon = n
			}
		}
	}

	if query := hq.withClothes; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].item_hustler_clothes == nil {
				continue
			}
			fk := *nodes[i].item_hustler_clothes
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_clothes" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Clothes = n
			}
		}
	}

	if query := hq.withVehicle; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].item_hustler_vehicles == nil {
				continue
			}
			fk := *nodes[i].item_hustler_vehicles
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_vehicles" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Vehicle = n
			}
		}
	}

	if query := hq.withWaist; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].item_hustler_waists == nil {
				continue
			}
			fk := *nodes[i].item_hustler_waists
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_waists" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Waist = n
			}
		}
	}

	if query := hq.withFoot; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].item_hustler_feet == nil {
				continue
			}
			fk := *nodes[i].item_hustler_feet
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_feet" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Foot = n
			}
		}
	}

	if query := hq.withHand; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].item_hustler_hands == nil {
				continue
			}
			fk := *nodes[i].item_hustler_hands
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_hands" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Hand = n
			}
		}
	}

	if query := hq.withDrug; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].item_hustler_drugs == nil {
				continue
			}
			fk := *nodes[i].item_hustler_drugs
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_drugs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Drug = n
			}
		}
	}

	if query := hq.withNeck; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].item_hustler_necks == nil {
				continue
			}
			fk := *nodes[i].item_hustler_necks
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_necks" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Neck = n
			}
		}
	}

	if query := hq.withRing; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].item_hustler_rings == nil {
				continue
			}
			fk := *nodes[i].item_hustler_rings
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_rings" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Ring = n
			}
		}
	}

	if query := hq.withAccessory; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].item_hustler_accessories == nil {
				continue
			}
			fk := *nodes[i].item_hustler_accessories
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_hustler_accessories" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Accessory = n
			}
		}
	}

	if query := hq.withBody; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].body_part_hustler_bodies == nil {
				continue
			}
			fk := *nodes[i].body_part_hustler_bodies
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(bodypart.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "body_part_hustler_bodies" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Body = n
			}
		}
	}

	if query := hq.withHair; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].body_part_hustler_hairs == nil {
				continue
			}
			fk := *nodes[i].body_part_hustler_hairs
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(bodypart.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "body_part_hustler_hairs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Hair = n
			}
		}
	}

	if query := hq.withBeard; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Hustler)
		for i := range nodes {
			if nodes[i].body_part_hustler_beards == nil {
				continue
			}
			fk := *nodes[i].body_part_hustler_beards
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(bodypart.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "body_part_hustler_beards" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Beard = n
			}
		}
	}

	if query := hq.withIndex; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*Hustler)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Search(func(s *sql.Selector) {
			s.Where(sql.InValues(hustler.IndexColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.hustler_index
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "hustler_index" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "hustler_index" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Index = n
		}
	}

	return nodes, nil
}

func (hq *HustlerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hq.querySpec()
	_spec.Node.Columns = hq.fields
	if len(hq.fields) > 0 {
		_spec.Unique = hq.unique != nil && *hq.unique
	}
	return sqlgraph.CountNodes(ctx, hq.driver, _spec)
}

func (hq *HustlerQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := hq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (hq *HustlerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hustler.Table,
			Columns: hustler.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hustler.FieldID,
			},
		},
		From:   hq.sql,
		Unique: true,
	}
	if unique := hq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := hq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hustler.FieldID)
		for i := range fields {
			if fields[i] != hustler.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hq *HustlerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hq.driver.Dialect())
	t1 := builder.Table(hustler.Table)
	columns := hq.fields
	if len(columns) == 0 {
		columns = hustler.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hq.sql != nil {
		selector = hq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hq.unique != nil && *hq.unique {
		selector.Distinct()
	}
	for _, p := range hq.predicates {
		p(selector)
	}
	for _, p := range hq.order {
		p(selector)
	}
	if offset := hq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HustlerGroupBy is the group-by builder for Hustler entities.
type HustlerGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hgb *HustlerGroupBy) Aggregate(fns ...AggregateFunc) *HustlerGroupBy {
	hgb.fns = append(hgb.fns, fns...)
	return hgb
}

// Scan applies the group-by query and scans the result into the given value.
func (hgb *HustlerGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := hgb.path(ctx)
	if err != nil {
		return err
	}
	hgb.sql = query
	return hgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (hgb *HustlerGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := hgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (hgb *HustlerGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(hgb.fields) > 1 {
		return nil, errors.New("ent: HustlerGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := hgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (hgb *HustlerGroupBy) StringsX(ctx context.Context) []string {
	v, err := hgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hgb *HustlerGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = hgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hustler.Label}
	default:
		err = fmt.Errorf("ent: HustlerGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (hgb *HustlerGroupBy) StringX(ctx context.Context) string {
	v, err := hgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (hgb *HustlerGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(hgb.fields) > 1 {
		return nil, errors.New("ent: HustlerGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := hgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (hgb *HustlerGroupBy) IntsX(ctx context.Context) []int {
	v, err := hgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hgb *HustlerGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = hgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hustler.Label}
	default:
		err = fmt.Errorf("ent: HustlerGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (hgb *HustlerGroupBy) IntX(ctx context.Context) int {
	v, err := hgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (hgb *HustlerGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(hgb.fields) > 1 {
		return nil, errors.New("ent: HustlerGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := hgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (hgb *HustlerGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := hgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hgb *HustlerGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = hgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hustler.Label}
	default:
		err = fmt.Errorf("ent: HustlerGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (hgb *HustlerGroupBy) Float64X(ctx context.Context) float64 {
	v, err := hgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (hgb *HustlerGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(hgb.fields) > 1 {
		return nil, errors.New("ent: HustlerGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := hgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (hgb *HustlerGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := hgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hgb *HustlerGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = hgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hustler.Label}
	default:
		err = fmt.Errorf("ent: HustlerGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (hgb *HustlerGroupBy) BoolX(ctx context.Context) bool {
	v, err := hgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (hgb *HustlerGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range hgb.fields {
		if !hustler.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := hgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (hgb *HustlerGroupBy) sqlQuery() *sql.Selector {
	selector := hgb.sql.Select()
	aggregation := make([]string, 0, len(hgb.fns))
	for _, fn := range hgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(hgb.fields)+len(hgb.fns))
		for _, f := range hgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(hgb.fields...)...)
}

// HustlerSelect is the builder for selecting fields of Hustler entities.
type HustlerSelect struct {
	*HustlerQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (hs *HustlerSelect) Scan(ctx context.Context, v interface{}) error {
	if err := hs.prepareQuery(ctx); err != nil {
		return err
	}
	hs.sql = hs.HustlerQuery.sqlQuery(ctx)
	return hs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (hs *HustlerSelect) ScanX(ctx context.Context, v interface{}) {
	if err := hs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (hs *HustlerSelect) Strings(ctx context.Context) ([]string, error) {
	if len(hs.fields) > 1 {
		return nil, errors.New("ent: HustlerSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := hs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (hs *HustlerSelect) StringsX(ctx context.Context) []string {
	v, err := hs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (hs *HustlerSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = hs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hustler.Label}
	default:
		err = fmt.Errorf("ent: HustlerSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (hs *HustlerSelect) StringX(ctx context.Context) string {
	v, err := hs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (hs *HustlerSelect) Ints(ctx context.Context) ([]int, error) {
	if len(hs.fields) > 1 {
		return nil, errors.New("ent: HustlerSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := hs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (hs *HustlerSelect) IntsX(ctx context.Context) []int {
	v, err := hs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (hs *HustlerSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = hs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hustler.Label}
	default:
		err = fmt.Errorf("ent: HustlerSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (hs *HustlerSelect) IntX(ctx context.Context) int {
	v, err := hs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (hs *HustlerSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(hs.fields) > 1 {
		return nil, errors.New("ent: HustlerSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := hs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (hs *HustlerSelect) Float64sX(ctx context.Context) []float64 {
	v, err := hs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (hs *HustlerSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = hs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hustler.Label}
	default:
		err = fmt.Errorf("ent: HustlerSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (hs *HustlerSelect) Float64X(ctx context.Context) float64 {
	v, err := hs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (hs *HustlerSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(hs.fields) > 1 {
		return nil, errors.New("ent: HustlerSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := hs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (hs *HustlerSelect) BoolsX(ctx context.Context) []bool {
	v, err := hs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (hs *HustlerSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = hs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hustler.Label}
	default:
		err = fmt.Errorf("ent: HustlerSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (hs *HustlerSelect) BoolX(ctx context.Context) bool {
	v, err := hs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (hs *HustlerSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := hs.sql.Query()
	if err := hs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
