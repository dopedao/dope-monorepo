// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/schema"
)

// GameHustler is the model entity for the GameHustler schema.
type GameHustler struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// LastPosition holds the value of the "last_position" field.
	LastPosition schema.Position `json:"last_position,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameHustlerQuery when eager-loading is set.
	Edges GameHustlerEdges `json:"edges"`
}

// GameHustlerEdges holds the relations/edges for other nodes in the graph.
type GameHustlerEdges struct {
	// Relations holds the value of the relations edge.
	Relations []*GameHustlerRelation `json:"relations,omitempty"`
	// Items holds the value of the items edge.
	Items []*GameHustlerItem `json:"items,omitempty"`
	// Quests holds the value of the quests edge.
	Quests []*GameHustlerQuest `json:"quests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RelationsOrErr returns the Relations value or an error if the edge
// was not loaded in eager-loading.
func (e GameHustlerEdges) RelationsOrErr() ([]*GameHustlerRelation, error) {
	if e.loadedTypes[0] {
		return e.Relations, nil
	}
	return nil, &NotLoadedError{edge: "relations"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e GameHustlerEdges) ItemsOrErr() ([]*GameHustlerItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// QuestsOrErr returns the Quests value or an error if the edge
// was not loaded in eager-loading.
func (e GameHustlerEdges) QuestsOrErr() ([]*GameHustlerQuest, error) {
	if e.loadedTypes[2] {
		return e.Quests, nil
	}
	return nil, &NotLoadedError{edge: "quests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameHustler) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case gamehustler.FieldLastPosition:
			values[i] = new([]byte)
		case gamehustler.FieldID:
			values[i] = new(sql.NullString)
		case gamehustler.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GameHustler", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameHustler fields.
func (gh *GameHustler) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gamehustler.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gh.ID = value.String
			}
		case gamehustler.FieldLastPosition:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_position", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gh.LastPosition); err != nil {
					return fmt.Errorf("unmarshal field last_position: %w", err)
				}
			}
		case gamehustler.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gh.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryRelations queries the "relations" edge of the GameHustler entity.
func (gh *GameHustler) QueryRelations() *GameHustlerRelationQuery {
	return (&GameHustlerClient{config: gh.config}).QueryRelations(gh)
}

// QueryItems queries the "items" edge of the GameHustler entity.
func (gh *GameHustler) QueryItems() *GameHustlerItemQuery {
	return (&GameHustlerClient{config: gh.config}).QueryItems(gh)
}

// QueryQuests queries the "quests" edge of the GameHustler entity.
func (gh *GameHustler) QueryQuests() *GameHustlerQuestQuery {
	return (&GameHustlerClient{config: gh.config}).QueryQuests(gh)
}

// Update returns a builder for updating this GameHustler.
// Note that you need to call GameHustler.Unwrap() before calling this method if this GameHustler
// was returned from a transaction, and the transaction was committed or rolled back.
func (gh *GameHustler) Update() *GameHustlerUpdateOne {
	return (&GameHustlerClient{config: gh.config}).UpdateOne(gh)
}

// Unwrap unwraps the GameHustler entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gh *GameHustler) Unwrap() *GameHustler {
	tx, ok := gh.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameHustler is not a transactional entity")
	}
	gh.config.driver = tx.drv
	return gh
}

// String implements the fmt.Stringer.
func (gh *GameHustler) String() string {
	var builder strings.Builder
	builder.WriteString("GameHustler(")
	builder.WriteString(fmt.Sprintf("id=%v", gh.ID))
	builder.WriteString(", last_position=")
	builder.WriteString(fmt.Sprintf("%v", gh.LastPosition))
	builder.WriteString(", created_at=")
	builder.WriteString(gh.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GameHustlers is a parsable slice of GameHustler.
type GameHustlers []*GameHustler

func (gh GameHustlers) config(cfg config) {
	for _i := range gh {
		gh[_i].config = cfg
	}
}
