// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/bodypart"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/search"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/wallet"
)

// HustlerUpdate is the builder for updating Hustler entities.
type HustlerUpdate struct {
	config
	hooks    []Hook
	mutation *HustlerMutation
}

// Where appends a list predicates to the HustlerUpdate builder.
func (hu *HustlerUpdate) Where(ps ...predicate.Hustler) *HustlerUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetName sets the "name" field.
func (hu *HustlerUpdate) SetName(s string) *HustlerUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hu *HustlerUpdate) SetNillableName(s *string) *HustlerUpdate {
	if s != nil {
		hu.SetName(*s)
	}
	return hu
}

// ClearName clears the value of the "name" field.
func (hu *HustlerUpdate) ClearName() *HustlerUpdate {
	hu.mutation.ClearName()
	return hu
}

// SetTitle sets the "title" field.
func (hu *HustlerUpdate) SetTitle(s string) *HustlerUpdate {
	hu.mutation.SetTitle(s)
	return hu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (hu *HustlerUpdate) SetNillableTitle(s *string) *HustlerUpdate {
	if s != nil {
		hu.SetTitle(*s)
	}
	return hu
}

// ClearTitle clears the value of the "title" field.
func (hu *HustlerUpdate) ClearTitle() *HustlerUpdate {
	hu.mutation.ClearTitle()
	return hu
}

// SetColor sets the "color" field.
func (hu *HustlerUpdate) SetColor(s string) *HustlerUpdate {
	hu.mutation.SetColor(s)
	return hu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (hu *HustlerUpdate) SetNillableColor(s *string) *HustlerUpdate {
	if s != nil {
		hu.SetColor(*s)
	}
	return hu
}

// ClearColor clears the value of the "color" field.
func (hu *HustlerUpdate) ClearColor() *HustlerUpdate {
	hu.mutation.ClearColor()
	return hu
}

// SetBackground sets the "background" field.
func (hu *HustlerUpdate) SetBackground(s string) *HustlerUpdate {
	hu.mutation.SetBackground(s)
	return hu
}

// SetNillableBackground sets the "background" field if the given value is not nil.
func (hu *HustlerUpdate) SetNillableBackground(s *string) *HustlerUpdate {
	if s != nil {
		hu.SetBackground(*s)
	}
	return hu
}

// ClearBackground clears the value of the "background" field.
func (hu *HustlerUpdate) ClearBackground() *HustlerUpdate {
	hu.mutation.ClearBackground()
	return hu
}

// SetAge sets the "age" field.
func (hu *HustlerUpdate) SetAge(u uint64) *HustlerUpdate {
	hu.mutation.ResetAge()
	hu.mutation.SetAge(u)
	return hu
}

// AddAge adds u to the "age" field.
func (hu *HustlerUpdate) AddAge(u int64) *HustlerUpdate {
	hu.mutation.AddAge(u)
	return hu
}

// SetSex sets the "sex" field.
func (hu *HustlerUpdate) SetSex(h hustler.Sex) *HustlerUpdate {
	hu.mutation.SetSex(h)
	return hu
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (hu *HustlerUpdate) SetNillableSex(h *hustler.Sex) *HustlerUpdate {
	if h != nil {
		hu.SetSex(*h)
	}
	return hu
}

// SetViewbox sets the "viewbox" field.
func (hu *HustlerUpdate) SetViewbox(i []int) *HustlerUpdate {
	hu.mutation.SetViewbox(i)
	return hu
}

// SetOrder sets the "order" field.
func (hu *HustlerUpdate) SetOrder(i []int) *HustlerUpdate {
	hu.mutation.SetOrder(i)
	return hu
}

// SetSvg sets the "svg" field.
func (hu *HustlerUpdate) SetSvg(s string) *HustlerUpdate {
	hu.mutation.SetSvg(s)
	return hu
}

// SetNillableSvg sets the "svg" field if the given value is not nil.
func (hu *HustlerUpdate) SetNillableSvg(s *string) *HustlerUpdate {
	if s != nil {
		hu.SetSvg(*s)
	}
	return hu
}

// ClearSvg clears the value of the "svg" field.
func (hu *HustlerUpdate) ClearSvg() *HustlerUpdate {
	hu.mutation.ClearSvg()
	return hu
}

// SetWalletID sets the "wallet" edge to the Wallet entity by ID.
func (hu *HustlerUpdate) SetWalletID(id string) *HustlerUpdate {
	hu.mutation.SetWalletID(id)
	return hu
}

// SetNillableWalletID sets the "wallet" edge to the Wallet entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableWalletID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetWalletID(*id)
	}
	return hu
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (hu *HustlerUpdate) SetWallet(w *Wallet) *HustlerUpdate {
	return hu.SetWalletID(w.ID)
}

// SetWeaponID sets the "weapon" edge to the Item entity by ID.
func (hu *HustlerUpdate) SetWeaponID(id string) *HustlerUpdate {
	hu.mutation.SetWeaponID(id)
	return hu
}

// SetNillableWeaponID sets the "weapon" edge to the Item entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableWeaponID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetWeaponID(*id)
	}
	return hu
}

// SetWeapon sets the "weapon" edge to the Item entity.
func (hu *HustlerUpdate) SetWeapon(i *Item) *HustlerUpdate {
	return hu.SetWeaponID(i.ID)
}

// SetClothesID sets the "clothes" edge to the Item entity by ID.
func (hu *HustlerUpdate) SetClothesID(id string) *HustlerUpdate {
	hu.mutation.SetClothesID(id)
	return hu
}

// SetNillableClothesID sets the "clothes" edge to the Item entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableClothesID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetClothesID(*id)
	}
	return hu
}

// SetClothes sets the "clothes" edge to the Item entity.
func (hu *HustlerUpdate) SetClothes(i *Item) *HustlerUpdate {
	return hu.SetClothesID(i.ID)
}

// SetVehicleID sets the "vehicle" edge to the Item entity by ID.
func (hu *HustlerUpdate) SetVehicleID(id string) *HustlerUpdate {
	hu.mutation.SetVehicleID(id)
	return hu
}

// SetNillableVehicleID sets the "vehicle" edge to the Item entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableVehicleID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetVehicleID(*id)
	}
	return hu
}

// SetVehicle sets the "vehicle" edge to the Item entity.
func (hu *HustlerUpdate) SetVehicle(i *Item) *HustlerUpdate {
	return hu.SetVehicleID(i.ID)
}

// SetWaistID sets the "waist" edge to the Item entity by ID.
func (hu *HustlerUpdate) SetWaistID(id string) *HustlerUpdate {
	hu.mutation.SetWaistID(id)
	return hu
}

// SetNillableWaistID sets the "waist" edge to the Item entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableWaistID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetWaistID(*id)
	}
	return hu
}

// SetWaist sets the "waist" edge to the Item entity.
func (hu *HustlerUpdate) SetWaist(i *Item) *HustlerUpdate {
	return hu.SetWaistID(i.ID)
}

// SetFootID sets the "foot" edge to the Item entity by ID.
func (hu *HustlerUpdate) SetFootID(id string) *HustlerUpdate {
	hu.mutation.SetFootID(id)
	return hu
}

// SetNillableFootID sets the "foot" edge to the Item entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableFootID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetFootID(*id)
	}
	return hu
}

// SetFoot sets the "foot" edge to the Item entity.
func (hu *HustlerUpdate) SetFoot(i *Item) *HustlerUpdate {
	return hu.SetFootID(i.ID)
}

// SetHandID sets the "hand" edge to the Item entity by ID.
func (hu *HustlerUpdate) SetHandID(id string) *HustlerUpdate {
	hu.mutation.SetHandID(id)
	return hu
}

// SetNillableHandID sets the "hand" edge to the Item entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableHandID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetHandID(*id)
	}
	return hu
}

// SetHand sets the "hand" edge to the Item entity.
func (hu *HustlerUpdate) SetHand(i *Item) *HustlerUpdate {
	return hu.SetHandID(i.ID)
}

// SetDrugID sets the "drug" edge to the Item entity by ID.
func (hu *HustlerUpdate) SetDrugID(id string) *HustlerUpdate {
	hu.mutation.SetDrugID(id)
	return hu
}

// SetNillableDrugID sets the "drug" edge to the Item entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableDrugID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetDrugID(*id)
	}
	return hu
}

// SetDrug sets the "drug" edge to the Item entity.
func (hu *HustlerUpdate) SetDrug(i *Item) *HustlerUpdate {
	return hu.SetDrugID(i.ID)
}

// SetNeckID sets the "neck" edge to the Item entity by ID.
func (hu *HustlerUpdate) SetNeckID(id string) *HustlerUpdate {
	hu.mutation.SetNeckID(id)
	return hu
}

// SetNillableNeckID sets the "neck" edge to the Item entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableNeckID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetNeckID(*id)
	}
	return hu
}

// SetNeck sets the "neck" edge to the Item entity.
func (hu *HustlerUpdate) SetNeck(i *Item) *HustlerUpdate {
	return hu.SetNeckID(i.ID)
}

// SetRingID sets the "ring" edge to the Item entity by ID.
func (hu *HustlerUpdate) SetRingID(id string) *HustlerUpdate {
	hu.mutation.SetRingID(id)
	return hu
}

// SetNillableRingID sets the "ring" edge to the Item entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableRingID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetRingID(*id)
	}
	return hu
}

// SetRing sets the "ring" edge to the Item entity.
func (hu *HustlerUpdate) SetRing(i *Item) *HustlerUpdate {
	return hu.SetRingID(i.ID)
}

// SetAccessoryID sets the "accessory" edge to the Item entity by ID.
func (hu *HustlerUpdate) SetAccessoryID(id string) *HustlerUpdate {
	hu.mutation.SetAccessoryID(id)
	return hu
}

// SetNillableAccessoryID sets the "accessory" edge to the Item entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableAccessoryID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetAccessoryID(*id)
	}
	return hu
}

// SetAccessory sets the "accessory" edge to the Item entity.
func (hu *HustlerUpdate) SetAccessory(i *Item) *HustlerUpdate {
	return hu.SetAccessoryID(i.ID)
}

// SetBodyID sets the "body" edge to the BodyPart entity by ID.
func (hu *HustlerUpdate) SetBodyID(id string) *HustlerUpdate {
	hu.mutation.SetBodyID(id)
	return hu
}

// SetNillableBodyID sets the "body" edge to the BodyPart entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableBodyID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetBodyID(*id)
	}
	return hu
}

// SetBody sets the "body" edge to the BodyPart entity.
func (hu *HustlerUpdate) SetBody(b *BodyPart) *HustlerUpdate {
	return hu.SetBodyID(b.ID)
}

// SetHairID sets the "hair" edge to the BodyPart entity by ID.
func (hu *HustlerUpdate) SetHairID(id string) *HustlerUpdate {
	hu.mutation.SetHairID(id)
	return hu
}

// SetNillableHairID sets the "hair" edge to the BodyPart entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableHairID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetHairID(*id)
	}
	return hu
}

// SetHair sets the "hair" edge to the BodyPart entity.
func (hu *HustlerUpdate) SetHair(b *BodyPart) *HustlerUpdate {
	return hu.SetHairID(b.ID)
}

// SetBeardID sets the "beard" edge to the BodyPart entity by ID.
func (hu *HustlerUpdate) SetBeardID(id string) *HustlerUpdate {
	hu.mutation.SetBeardID(id)
	return hu
}

// SetNillableBeardID sets the "beard" edge to the BodyPart entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableBeardID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetBeardID(*id)
	}
	return hu
}

// SetBeard sets the "beard" edge to the BodyPart entity.
func (hu *HustlerUpdate) SetBeard(b *BodyPart) *HustlerUpdate {
	return hu.SetBeardID(b.ID)
}

// SetIndexID sets the "index" edge to the Search entity by ID.
func (hu *HustlerUpdate) SetIndexID(id string) *HustlerUpdate {
	hu.mutation.SetIndexID(id)
	return hu
}

// SetNillableIndexID sets the "index" edge to the Search entity by ID if the given value is not nil.
func (hu *HustlerUpdate) SetNillableIndexID(id *string) *HustlerUpdate {
	if id != nil {
		hu = hu.SetIndexID(*id)
	}
	return hu
}

// SetIndex sets the "index" edge to the Search entity.
func (hu *HustlerUpdate) SetIndex(s *Search) *HustlerUpdate {
	return hu.SetIndexID(s.ID)
}

// Mutation returns the HustlerMutation object of the builder.
func (hu *HustlerUpdate) Mutation() *HustlerMutation {
	return hu.mutation
}

// ClearWallet clears the "wallet" edge to the Wallet entity.
func (hu *HustlerUpdate) ClearWallet() *HustlerUpdate {
	hu.mutation.ClearWallet()
	return hu
}

// ClearWeapon clears the "weapon" edge to the Item entity.
func (hu *HustlerUpdate) ClearWeapon() *HustlerUpdate {
	hu.mutation.ClearWeapon()
	return hu
}

// ClearClothes clears the "clothes" edge to the Item entity.
func (hu *HustlerUpdate) ClearClothes() *HustlerUpdate {
	hu.mutation.ClearClothes()
	return hu
}

// ClearVehicle clears the "vehicle" edge to the Item entity.
func (hu *HustlerUpdate) ClearVehicle() *HustlerUpdate {
	hu.mutation.ClearVehicle()
	return hu
}

// ClearWaist clears the "waist" edge to the Item entity.
func (hu *HustlerUpdate) ClearWaist() *HustlerUpdate {
	hu.mutation.ClearWaist()
	return hu
}

// ClearFoot clears the "foot" edge to the Item entity.
func (hu *HustlerUpdate) ClearFoot() *HustlerUpdate {
	hu.mutation.ClearFoot()
	return hu
}

// ClearHand clears the "hand" edge to the Item entity.
func (hu *HustlerUpdate) ClearHand() *HustlerUpdate {
	hu.mutation.ClearHand()
	return hu
}

// ClearDrug clears the "drug" edge to the Item entity.
func (hu *HustlerUpdate) ClearDrug() *HustlerUpdate {
	hu.mutation.ClearDrug()
	return hu
}

// ClearNeck clears the "neck" edge to the Item entity.
func (hu *HustlerUpdate) ClearNeck() *HustlerUpdate {
	hu.mutation.ClearNeck()
	return hu
}

// ClearRing clears the "ring" edge to the Item entity.
func (hu *HustlerUpdate) ClearRing() *HustlerUpdate {
	hu.mutation.ClearRing()
	return hu
}

// ClearAccessory clears the "accessory" edge to the Item entity.
func (hu *HustlerUpdate) ClearAccessory() *HustlerUpdate {
	hu.mutation.ClearAccessory()
	return hu
}

// ClearBody clears the "body" edge to the BodyPart entity.
func (hu *HustlerUpdate) ClearBody() *HustlerUpdate {
	hu.mutation.ClearBody()
	return hu
}

// ClearHair clears the "hair" edge to the BodyPart entity.
func (hu *HustlerUpdate) ClearHair() *HustlerUpdate {
	hu.mutation.ClearHair()
	return hu
}

// ClearBeard clears the "beard" edge to the BodyPart entity.
func (hu *HustlerUpdate) ClearBeard() *HustlerUpdate {
	hu.mutation.ClearBeard()
	return hu
}

// ClearIndex clears the "index" edge to the Search entity.
func (hu *HustlerUpdate) ClearIndex() *HustlerUpdate {
	hu.mutation.ClearIndex()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HustlerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		if err = hu.check(); err != nil {
			return 0, err
		}
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HustlerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hu.check(); err != nil {
				return 0, err
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HustlerUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HustlerUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HustlerUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HustlerUpdate) check() error {
	if v, ok := hu.mutation.Sex(); ok {
		if err := hustler.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf(`ent: validator failed for field "Hustler.sex": %w`, err)}
		}
	}
	return nil
}

func (hu *HustlerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hustler.Table,
			Columns: hustler.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hustler.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hustler.FieldName,
		})
	}
	if hu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hustler.FieldName,
		})
	}
	if value, ok := hu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hustler.FieldTitle,
		})
	}
	if hu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hustler.FieldTitle,
		})
	}
	if value, ok := hu.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hustler.FieldColor,
		})
	}
	if hu.mutation.ColorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hustler.FieldColor,
		})
	}
	if value, ok := hu.mutation.Background(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hustler.FieldBackground,
		})
	}
	if hu.mutation.BackgroundCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hustler.FieldBackground,
		})
	}
	if value, ok := hu.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: hustler.FieldAge,
		})
	}
	if value, ok := hu.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: hustler.FieldAge,
		})
	}
	if value, ok := hu.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: hustler.FieldSex,
		})
	}
	if value, ok := hu.mutation.Viewbox(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: hustler.FieldViewbox,
		})
	}
	if value, ok := hu.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: hustler.FieldOrder,
		})
	}
	if value, ok := hu.mutation.Svg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hustler.FieldSvg,
		})
	}
	if hu.mutation.SvgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hustler.FieldSvg,
		})
	}
	if hu.mutation.WalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WalletTable,
			Columns: []string{hustler.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: wallet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WalletTable,
			Columns: []string{hustler.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.WeaponCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WeaponTable,
			Columns: []string{hustler.WeaponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.WeaponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WeaponTable,
			Columns: []string{hustler.WeaponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.ClothesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.ClothesTable,
			Columns: []string{hustler.ClothesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.ClothesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.ClothesTable,
			Columns: []string{hustler.ClothesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.VehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.VehicleTable,
			Columns: []string{hustler.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.VehicleTable,
			Columns: []string{hustler.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.WaistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WaistTable,
			Columns: []string{hustler.WaistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.WaistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WaistTable,
			Columns: []string{hustler.WaistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.FootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.FootTable,
			Columns: []string{hustler.FootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.FootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.FootTable,
			Columns: []string{hustler.FootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.HandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.HandTable,
			Columns: []string{hustler.HandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.HandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.HandTable,
			Columns: []string{hustler.HandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.DrugCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.DrugTable,
			Columns: []string{hustler.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.DrugTable,
			Columns: []string{hustler.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.NeckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.NeckTable,
			Columns: []string{hustler.NeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.NeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.NeckTable,
			Columns: []string{hustler.NeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.RingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.RingTable,
			Columns: []string{hustler.RingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.RingTable,
			Columns: []string{hustler.RingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.AccessoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.AccessoryTable,
			Columns: []string{hustler.AccessoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.AccessoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.AccessoryTable,
			Columns: []string{hustler.AccessoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.BodyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.BodyTable,
			Columns: []string{hustler.BodyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.BodyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.BodyTable,
			Columns: []string{hustler.BodyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.HairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.HairTable,
			Columns: []string{hustler.HairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.HairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.HairTable,
			Columns: []string{hustler.HairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.BeardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.BeardTable,
			Columns: []string{hustler.BeardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.BeardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.BeardTable,
			Columns: []string{hustler.BeardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.IndexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hustler.IndexTable,
			Columns: []string{hustler.IndexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: search.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.IndexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hustler.IndexTable,
			Columns: []string{hustler.IndexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: search.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hustler.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// HustlerUpdateOne is the builder for updating a single Hustler entity.
type HustlerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HustlerMutation
}

// SetName sets the "name" field.
func (huo *HustlerUpdateOne) SetName(s string) *HustlerUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableName(s *string) *HustlerUpdateOne {
	if s != nil {
		huo.SetName(*s)
	}
	return huo
}

// ClearName clears the value of the "name" field.
func (huo *HustlerUpdateOne) ClearName() *HustlerUpdateOne {
	huo.mutation.ClearName()
	return huo
}

// SetTitle sets the "title" field.
func (huo *HustlerUpdateOne) SetTitle(s string) *HustlerUpdateOne {
	huo.mutation.SetTitle(s)
	return huo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableTitle(s *string) *HustlerUpdateOne {
	if s != nil {
		huo.SetTitle(*s)
	}
	return huo
}

// ClearTitle clears the value of the "title" field.
func (huo *HustlerUpdateOne) ClearTitle() *HustlerUpdateOne {
	huo.mutation.ClearTitle()
	return huo
}

// SetColor sets the "color" field.
func (huo *HustlerUpdateOne) SetColor(s string) *HustlerUpdateOne {
	huo.mutation.SetColor(s)
	return huo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableColor(s *string) *HustlerUpdateOne {
	if s != nil {
		huo.SetColor(*s)
	}
	return huo
}

// ClearColor clears the value of the "color" field.
func (huo *HustlerUpdateOne) ClearColor() *HustlerUpdateOne {
	huo.mutation.ClearColor()
	return huo
}

// SetBackground sets the "background" field.
func (huo *HustlerUpdateOne) SetBackground(s string) *HustlerUpdateOne {
	huo.mutation.SetBackground(s)
	return huo
}

// SetNillableBackground sets the "background" field if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableBackground(s *string) *HustlerUpdateOne {
	if s != nil {
		huo.SetBackground(*s)
	}
	return huo
}

// ClearBackground clears the value of the "background" field.
func (huo *HustlerUpdateOne) ClearBackground() *HustlerUpdateOne {
	huo.mutation.ClearBackground()
	return huo
}

// SetAge sets the "age" field.
func (huo *HustlerUpdateOne) SetAge(u uint64) *HustlerUpdateOne {
	huo.mutation.ResetAge()
	huo.mutation.SetAge(u)
	return huo
}

// AddAge adds u to the "age" field.
func (huo *HustlerUpdateOne) AddAge(u int64) *HustlerUpdateOne {
	huo.mutation.AddAge(u)
	return huo
}

// SetSex sets the "sex" field.
func (huo *HustlerUpdateOne) SetSex(h hustler.Sex) *HustlerUpdateOne {
	huo.mutation.SetSex(h)
	return huo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableSex(h *hustler.Sex) *HustlerUpdateOne {
	if h != nil {
		huo.SetSex(*h)
	}
	return huo
}

// SetViewbox sets the "viewbox" field.
func (huo *HustlerUpdateOne) SetViewbox(i []int) *HustlerUpdateOne {
	huo.mutation.SetViewbox(i)
	return huo
}

// SetOrder sets the "order" field.
func (huo *HustlerUpdateOne) SetOrder(i []int) *HustlerUpdateOne {
	huo.mutation.SetOrder(i)
	return huo
}

// SetSvg sets the "svg" field.
func (huo *HustlerUpdateOne) SetSvg(s string) *HustlerUpdateOne {
	huo.mutation.SetSvg(s)
	return huo
}

// SetNillableSvg sets the "svg" field if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableSvg(s *string) *HustlerUpdateOne {
	if s != nil {
		huo.SetSvg(*s)
	}
	return huo
}

// ClearSvg clears the value of the "svg" field.
func (huo *HustlerUpdateOne) ClearSvg() *HustlerUpdateOne {
	huo.mutation.ClearSvg()
	return huo
}

// SetWalletID sets the "wallet" edge to the Wallet entity by ID.
func (huo *HustlerUpdateOne) SetWalletID(id string) *HustlerUpdateOne {
	huo.mutation.SetWalletID(id)
	return huo
}

// SetNillableWalletID sets the "wallet" edge to the Wallet entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableWalletID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetWalletID(*id)
	}
	return huo
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (huo *HustlerUpdateOne) SetWallet(w *Wallet) *HustlerUpdateOne {
	return huo.SetWalletID(w.ID)
}

// SetWeaponID sets the "weapon" edge to the Item entity by ID.
func (huo *HustlerUpdateOne) SetWeaponID(id string) *HustlerUpdateOne {
	huo.mutation.SetWeaponID(id)
	return huo
}

// SetNillableWeaponID sets the "weapon" edge to the Item entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableWeaponID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetWeaponID(*id)
	}
	return huo
}

// SetWeapon sets the "weapon" edge to the Item entity.
func (huo *HustlerUpdateOne) SetWeapon(i *Item) *HustlerUpdateOne {
	return huo.SetWeaponID(i.ID)
}

// SetClothesID sets the "clothes" edge to the Item entity by ID.
func (huo *HustlerUpdateOne) SetClothesID(id string) *HustlerUpdateOne {
	huo.mutation.SetClothesID(id)
	return huo
}

// SetNillableClothesID sets the "clothes" edge to the Item entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableClothesID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetClothesID(*id)
	}
	return huo
}

// SetClothes sets the "clothes" edge to the Item entity.
func (huo *HustlerUpdateOne) SetClothes(i *Item) *HustlerUpdateOne {
	return huo.SetClothesID(i.ID)
}

// SetVehicleID sets the "vehicle" edge to the Item entity by ID.
func (huo *HustlerUpdateOne) SetVehicleID(id string) *HustlerUpdateOne {
	huo.mutation.SetVehicleID(id)
	return huo
}

// SetNillableVehicleID sets the "vehicle" edge to the Item entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableVehicleID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetVehicleID(*id)
	}
	return huo
}

// SetVehicle sets the "vehicle" edge to the Item entity.
func (huo *HustlerUpdateOne) SetVehicle(i *Item) *HustlerUpdateOne {
	return huo.SetVehicleID(i.ID)
}

// SetWaistID sets the "waist" edge to the Item entity by ID.
func (huo *HustlerUpdateOne) SetWaistID(id string) *HustlerUpdateOne {
	huo.mutation.SetWaistID(id)
	return huo
}

// SetNillableWaistID sets the "waist" edge to the Item entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableWaistID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetWaistID(*id)
	}
	return huo
}

// SetWaist sets the "waist" edge to the Item entity.
func (huo *HustlerUpdateOne) SetWaist(i *Item) *HustlerUpdateOne {
	return huo.SetWaistID(i.ID)
}

// SetFootID sets the "foot" edge to the Item entity by ID.
func (huo *HustlerUpdateOne) SetFootID(id string) *HustlerUpdateOne {
	huo.mutation.SetFootID(id)
	return huo
}

// SetNillableFootID sets the "foot" edge to the Item entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableFootID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetFootID(*id)
	}
	return huo
}

// SetFoot sets the "foot" edge to the Item entity.
func (huo *HustlerUpdateOne) SetFoot(i *Item) *HustlerUpdateOne {
	return huo.SetFootID(i.ID)
}

// SetHandID sets the "hand" edge to the Item entity by ID.
func (huo *HustlerUpdateOne) SetHandID(id string) *HustlerUpdateOne {
	huo.mutation.SetHandID(id)
	return huo
}

// SetNillableHandID sets the "hand" edge to the Item entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableHandID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetHandID(*id)
	}
	return huo
}

// SetHand sets the "hand" edge to the Item entity.
func (huo *HustlerUpdateOne) SetHand(i *Item) *HustlerUpdateOne {
	return huo.SetHandID(i.ID)
}

// SetDrugID sets the "drug" edge to the Item entity by ID.
func (huo *HustlerUpdateOne) SetDrugID(id string) *HustlerUpdateOne {
	huo.mutation.SetDrugID(id)
	return huo
}

// SetNillableDrugID sets the "drug" edge to the Item entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableDrugID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetDrugID(*id)
	}
	return huo
}

// SetDrug sets the "drug" edge to the Item entity.
func (huo *HustlerUpdateOne) SetDrug(i *Item) *HustlerUpdateOne {
	return huo.SetDrugID(i.ID)
}

// SetNeckID sets the "neck" edge to the Item entity by ID.
func (huo *HustlerUpdateOne) SetNeckID(id string) *HustlerUpdateOne {
	huo.mutation.SetNeckID(id)
	return huo
}

// SetNillableNeckID sets the "neck" edge to the Item entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableNeckID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetNeckID(*id)
	}
	return huo
}

// SetNeck sets the "neck" edge to the Item entity.
func (huo *HustlerUpdateOne) SetNeck(i *Item) *HustlerUpdateOne {
	return huo.SetNeckID(i.ID)
}

// SetRingID sets the "ring" edge to the Item entity by ID.
func (huo *HustlerUpdateOne) SetRingID(id string) *HustlerUpdateOne {
	huo.mutation.SetRingID(id)
	return huo
}

// SetNillableRingID sets the "ring" edge to the Item entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableRingID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetRingID(*id)
	}
	return huo
}

// SetRing sets the "ring" edge to the Item entity.
func (huo *HustlerUpdateOne) SetRing(i *Item) *HustlerUpdateOne {
	return huo.SetRingID(i.ID)
}

// SetAccessoryID sets the "accessory" edge to the Item entity by ID.
func (huo *HustlerUpdateOne) SetAccessoryID(id string) *HustlerUpdateOne {
	huo.mutation.SetAccessoryID(id)
	return huo
}

// SetNillableAccessoryID sets the "accessory" edge to the Item entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableAccessoryID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetAccessoryID(*id)
	}
	return huo
}

// SetAccessory sets the "accessory" edge to the Item entity.
func (huo *HustlerUpdateOne) SetAccessory(i *Item) *HustlerUpdateOne {
	return huo.SetAccessoryID(i.ID)
}

// SetBodyID sets the "body" edge to the BodyPart entity by ID.
func (huo *HustlerUpdateOne) SetBodyID(id string) *HustlerUpdateOne {
	huo.mutation.SetBodyID(id)
	return huo
}

// SetNillableBodyID sets the "body" edge to the BodyPart entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableBodyID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetBodyID(*id)
	}
	return huo
}

// SetBody sets the "body" edge to the BodyPart entity.
func (huo *HustlerUpdateOne) SetBody(b *BodyPart) *HustlerUpdateOne {
	return huo.SetBodyID(b.ID)
}

// SetHairID sets the "hair" edge to the BodyPart entity by ID.
func (huo *HustlerUpdateOne) SetHairID(id string) *HustlerUpdateOne {
	huo.mutation.SetHairID(id)
	return huo
}

// SetNillableHairID sets the "hair" edge to the BodyPart entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableHairID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetHairID(*id)
	}
	return huo
}

// SetHair sets the "hair" edge to the BodyPart entity.
func (huo *HustlerUpdateOne) SetHair(b *BodyPart) *HustlerUpdateOne {
	return huo.SetHairID(b.ID)
}

// SetBeardID sets the "beard" edge to the BodyPart entity by ID.
func (huo *HustlerUpdateOne) SetBeardID(id string) *HustlerUpdateOne {
	huo.mutation.SetBeardID(id)
	return huo
}

// SetNillableBeardID sets the "beard" edge to the BodyPart entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableBeardID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetBeardID(*id)
	}
	return huo
}

// SetBeard sets the "beard" edge to the BodyPart entity.
func (huo *HustlerUpdateOne) SetBeard(b *BodyPart) *HustlerUpdateOne {
	return huo.SetBeardID(b.ID)
}

// SetIndexID sets the "index" edge to the Search entity by ID.
func (huo *HustlerUpdateOne) SetIndexID(id string) *HustlerUpdateOne {
	huo.mutation.SetIndexID(id)
	return huo
}

// SetNillableIndexID sets the "index" edge to the Search entity by ID if the given value is not nil.
func (huo *HustlerUpdateOne) SetNillableIndexID(id *string) *HustlerUpdateOne {
	if id != nil {
		huo = huo.SetIndexID(*id)
	}
	return huo
}

// SetIndex sets the "index" edge to the Search entity.
func (huo *HustlerUpdateOne) SetIndex(s *Search) *HustlerUpdateOne {
	return huo.SetIndexID(s.ID)
}

// Mutation returns the HustlerMutation object of the builder.
func (huo *HustlerUpdateOne) Mutation() *HustlerMutation {
	return huo.mutation
}

// ClearWallet clears the "wallet" edge to the Wallet entity.
func (huo *HustlerUpdateOne) ClearWallet() *HustlerUpdateOne {
	huo.mutation.ClearWallet()
	return huo
}

// ClearWeapon clears the "weapon" edge to the Item entity.
func (huo *HustlerUpdateOne) ClearWeapon() *HustlerUpdateOne {
	huo.mutation.ClearWeapon()
	return huo
}

// ClearClothes clears the "clothes" edge to the Item entity.
func (huo *HustlerUpdateOne) ClearClothes() *HustlerUpdateOne {
	huo.mutation.ClearClothes()
	return huo
}

// ClearVehicle clears the "vehicle" edge to the Item entity.
func (huo *HustlerUpdateOne) ClearVehicle() *HustlerUpdateOne {
	huo.mutation.ClearVehicle()
	return huo
}

// ClearWaist clears the "waist" edge to the Item entity.
func (huo *HustlerUpdateOne) ClearWaist() *HustlerUpdateOne {
	huo.mutation.ClearWaist()
	return huo
}

// ClearFoot clears the "foot" edge to the Item entity.
func (huo *HustlerUpdateOne) ClearFoot() *HustlerUpdateOne {
	huo.mutation.ClearFoot()
	return huo
}

// ClearHand clears the "hand" edge to the Item entity.
func (huo *HustlerUpdateOne) ClearHand() *HustlerUpdateOne {
	huo.mutation.ClearHand()
	return huo
}

// ClearDrug clears the "drug" edge to the Item entity.
func (huo *HustlerUpdateOne) ClearDrug() *HustlerUpdateOne {
	huo.mutation.ClearDrug()
	return huo
}

// ClearNeck clears the "neck" edge to the Item entity.
func (huo *HustlerUpdateOne) ClearNeck() *HustlerUpdateOne {
	huo.mutation.ClearNeck()
	return huo
}

// ClearRing clears the "ring" edge to the Item entity.
func (huo *HustlerUpdateOne) ClearRing() *HustlerUpdateOne {
	huo.mutation.ClearRing()
	return huo
}

// ClearAccessory clears the "accessory" edge to the Item entity.
func (huo *HustlerUpdateOne) ClearAccessory() *HustlerUpdateOne {
	huo.mutation.ClearAccessory()
	return huo
}

// ClearBody clears the "body" edge to the BodyPart entity.
func (huo *HustlerUpdateOne) ClearBody() *HustlerUpdateOne {
	huo.mutation.ClearBody()
	return huo
}

// ClearHair clears the "hair" edge to the BodyPart entity.
func (huo *HustlerUpdateOne) ClearHair() *HustlerUpdateOne {
	huo.mutation.ClearHair()
	return huo
}

// ClearBeard clears the "beard" edge to the BodyPart entity.
func (huo *HustlerUpdateOne) ClearBeard() *HustlerUpdateOne {
	huo.mutation.ClearBeard()
	return huo
}

// ClearIndex clears the "index" edge to the Search entity.
func (huo *HustlerUpdateOne) ClearIndex() *HustlerUpdateOne {
	huo.mutation.ClearIndex()
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HustlerUpdateOne) Select(field string, fields ...string) *HustlerUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hustler entity.
func (huo *HustlerUpdateOne) Save(ctx context.Context) (*Hustler, error) {
	var (
		err  error
		node *Hustler
	)
	if len(huo.hooks) == 0 {
		if err = huo.check(); err != nil {
			return nil, err
		}
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HustlerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = huo.check(); err != nil {
				return nil, err
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HustlerUpdateOne) SaveX(ctx context.Context) *Hustler {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HustlerUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HustlerUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HustlerUpdateOne) check() error {
	if v, ok := huo.mutation.Sex(); ok {
		if err := hustler.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf(`ent: validator failed for field "Hustler.sex": %w`, err)}
		}
	}
	return nil
}

func (huo *HustlerUpdateOne) sqlSave(ctx context.Context) (_node *Hustler, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hustler.Table,
			Columns: hustler.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hustler.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hustler.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hustler.FieldID)
		for _, f := range fields {
			if !hustler.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hustler.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hustler.FieldName,
		})
	}
	if huo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hustler.FieldName,
		})
	}
	if value, ok := huo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hustler.FieldTitle,
		})
	}
	if huo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hustler.FieldTitle,
		})
	}
	if value, ok := huo.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hustler.FieldColor,
		})
	}
	if huo.mutation.ColorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hustler.FieldColor,
		})
	}
	if value, ok := huo.mutation.Background(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hustler.FieldBackground,
		})
	}
	if huo.mutation.BackgroundCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hustler.FieldBackground,
		})
	}
	if value, ok := huo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: hustler.FieldAge,
		})
	}
	if value, ok := huo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: hustler.FieldAge,
		})
	}
	if value, ok := huo.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: hustler.FieldSex,
		})
	}
	if value, ok := huo.mutation.Viewbox(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: hustler.FieldViewbox,
		})
	}
	if value, ok := huo.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: hustler.FieldOrder,
		})
	}
	if value, ok := huo.mutation.Svg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hustler.FieldSvg,
		})
	}
	if huo.mutation.SvgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hustler.FieldSvg,
		})
	}
	if huo.mutation.WalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WalletTable,
			Columns: []string{hustler.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: wallet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WalletTable,
			Columns: []string{hustler.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.WeaponCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WeaponTable,
			Columns: []string{hustler.WeaponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.WeaponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WeaponTable,
			Columns: []string{hustler.WeaponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.ClothesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.ClothesTable,
			Columns: []string{hustler.ClothesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.ClothesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.ClothesTable,
			Columns: []string{hustler.ClothesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.VehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.VehicleTable,
			Columns: []string{hustler.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.VehicleTable,
			Columns: []string{hustler.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.WaistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WaistTable,
			Columns: []string{hustler.WaistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.WaistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.WaistTable,
			Columns: []string{hustler.WaistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.FootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.FootTable,
			Columns: []string{hustler.FootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.FootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.FootTable,
			Columns: []string{hustler.FootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.HandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.HandTable,
			Columns: []string{hustler.HandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.HandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.HandTable,
			Columns: []string{hustler.HandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.DrugCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.DrugTable,
			Columns: []string{hustler.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.DrugTable,
			Columns: []string{hustler.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.NeckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.NeckTable,
			Columns: []string{hustler.NeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.NeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.NeckTable,
			Columns: []string{hustler.NeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.RingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.RingTable,
			Columns: []string{hustler.RingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.RingTable,
			Columns: []string{hustler.RingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.AccessoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.AccessoryTable,
			Columns: []string{hustler.AccessoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.AccessoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.AccessoryTable,
			Columns: []string{hustler.AccessoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.BodyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.BodyTable,
			Columns: []string{hustler.BodyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.BodyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.BodyTable,
			Columns: []string{hustler.BodyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.HairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.HairTable,
			Columns: []string{hustler.HairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.HairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.HairTable,
			Columns: []string{hustler.HairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.BeardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.BeardTable,
			Columns: []string{hustler.BeardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.BeardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hustler.BeardTable,
			Columns: []string{hustler.BeardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: bodypart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.IndexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hustler.IndexTable,
			Columns: []string{hustler.IndexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: search.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.IndexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hustler.IndexTable,
			Columns: []string{hustler.IndexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: search.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Hustler{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hustler.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
